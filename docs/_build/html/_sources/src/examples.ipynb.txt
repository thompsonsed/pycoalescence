{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Example simulations and analysis using pycoalescence\n",
    "\n",
    "This jupyter notebook shows a variety of full example simulations that can be run using the files provided in the *sample* folder in **pycoalescence**. They are intended to be used as templates for your own simulations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that this notebook requires Python 3.x and a full install of **pycoalescence**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First import the necessary modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "from pycoalescence import Simulation, CoalescenceTree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define our input and output directories - **change these as required**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_dir = \"pycoalescence/sample\"\n",
    "output_dir = \"output\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic spatial simulation and analysis\n",
    "\n",
    "Basic spatial simulation on just one map file, with a closed landscape. For this example we run with full logging (at 'debug' level). All other examples will be run using 'critical'\n",
    "level, which shouldn't output any information unless there is a problem.\n",
    "\n",
    "Use a speciation rate of 0.1, a dispersal of 2.0 (sigma) and 10 individuals per cell (deme).\n",
    "\n",
    "The output will be stored in *output/data_1_1.db*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rChecking folder existance...pycoalescence/sample/SA_sample_fine.tif exists!               \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rChecking folder existance...output exists!               \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Checking folder existance...\rChecking folder existance...done!                                                                \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Checking for unfinished simulations...done!\nNo files found containing unfinished simulations.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*************************************************\nSetting up simulation...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Dispersal (tau, sigma): 1, 2\nDispersal method: normal\nFine map\n-file: pycoalescence/sample/SA_sample_fine.tif\n-dimensions: (13, 13)\n-offset: (0, 0)\nCoarse map\n-file: none\n-dimensions: (13, 13)\n-offset: (0, 0)\n-scale: 1\nSample grid\n-dimensions: (13, 13)\n-optimised area: (13, 13)\n-optimised offsets: (0, 0)\n-deme: 10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed: 1\nSpeciation rate: 0.1\nJob Type: 1\nMax time: 3600\n-deme sample: 1\nOutput directory: output\nDisp Rel Cost: 1\nTimes:  0.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rChecking folder existance...pycoalescence/sample/SA_sample_fine.tif exists!               \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Importing pycoalescence/sample/SA_sample_fine.tif "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No data value is: 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif .."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif ...."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif ....."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif ......."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif ........"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif .........."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif ..........."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif ............."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif .............."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif ................"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif ................."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rImporting pycoalescence/sample/SA_sample_fine.tif ..................."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "done!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No data value is: 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using dispersal kernel.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Initial count is 380980\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rSetting up simulation...filling grid                           "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rSetting up simulation...done!                           \nNumber of individuals simulating: 380980\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*************************************************\nBeginning simulations..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rBeginning simulations..................."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "done!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No additional speciation rates to apply.\nSpeciation rate is: 0.1.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Finalising data..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "done!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Creating SQL database file...\n    Checking for existing folders...."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r    Generating species list....              "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r    Executing SQL commands...."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "done!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "0.000000,"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating generation 0.000000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating tree structure..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "done!\nNumber of species: 96121\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Generating new SQL table for speciation rate 0.1..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rGenerating new SQL table for speciation rate 0.1...done!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r    Writing to output/data_1_1.db ....     "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r    Writing to output/data_1_1.db ....  done!              \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Total generations simulated (steps): 197.821 (963721)\nSetup time was 0 minutes 0 seconds\nSimulation time was 0 hours 0 minutes 1 seconds\nFile output and species calculation time was 0 minutes 3 seconds\nSQL output time was 0 minutes 0 seconds\nTotal time taken was 0 hours 0 minutes 1 seconds\n"
     ]
    }
   ],
   "source": [
    "sim1 = Simulation(logging_level=10)\n",
    "sim1.set_simulation_params(seed=1, job_type=1, output_directory=output_dir, min_speciation_rate=0.1,\n",
    "\t\t\t\t\t\t   sigma=2.0, deme=10)\n",
    "# Use automatic detection of the map file dimensions\n",
    "sim1.set_map(os.path.join(input_dir, \"SA_sample_fine.tif\"))\n",
    "sim1.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Re-create the coalescence tree for different speciation rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No sample file provided, defaulting to null."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No times provided, defaulting to 0.0."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "***************************\nSTARTING CALCULATIONS\nInput file is output/data_1_1.db\nSpeciation rates are: 0.1, 0.2, 0.4.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Protracted speciation parameters (min, max) are: \n0, 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Beginning data import..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rBeginning data import...done\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating speciation rate 0.1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating generation 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "calculation already performed for 0.1 at time 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "calculation already performed for 0.1 at time 0\nCalculating speciation rate 0.2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating generation 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating tree structure..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "done!\nNumber of species: 152080\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Generating new SQL table for speciation rate 0.2..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rGenerating new SQL table for speciation rate 0.2...done!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating generation 0\nCalculating speciation rate 0.4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating generation 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating tree structure..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "done!\nNumber of species: 232033\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Generating new SQL table for speciation rate 0.4..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\rGenerating new SQL table for speciation rate 0.4...done!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Writing out to output/data_1_1.db..."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "done!\n"
     ]
    }
   ],
   "source": [
    "tree1 = CoalescenceTree(sim1, logging_level=10)\n",
    "tree1.set_speciation_params(speciation_rates=[0.1, 0.2, 0.4])\n",
    "tree1.apply()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Print out the species richness for each speciation rate by looping over our community parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Species richness for speciation rate of 0.1 is 96121\nSpecies richness for speciation rate of 0.2 is 152080\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Species richness for speciation rate of 0.4 is 232033\n"
     ]
    }
   ],
   "source": [
    "for reference in tree1.get_community_references():\n",
    "\tspec_rate = tree1.get_community_parameters(reference=reference)[\"speciation_rate\"]\n",
    "\tprint(\"Species richness for speciation rate of {} is {}\".format(spec_rate,\n",
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttree1.get_richness(reference)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## More complex spatial example\n",
    "\n",
    "Here we use a sample area, a fine map file (defining high-resolution density around the area) and a coarse map file (defining the low-resolution density over a larger area).\n",
    "\n",
    "Additionally, we provide a historical fine and coarse maps to define the density at 100 generations in the past (with a rate of 0.5) and 200 generations in the past (with a rate of 0.0).\n",
    "\n",
    "Within the simulation, we sample the community at times 0, 50 and 100 generations in the past.\n",
    "\n",
    " The output will be stored in *output/data_1_2.db*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define our file paths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_file = os.path.join(input_dir, \"SA_samplemaskINT.tif\")\n",
    "fine_file = os.path.join(input_dir, \"SA_sample_fine.tif\")\n",
    "coarse_file = os.path.join(input_dir, \"SA_sample_coarse.tif\")\n",
    "pristine_fine_file1 = os.path.join(input_dir, \"SA_sample_fine_pristine1.tif\")\n",
    "pristine_coarse_file1 = os.path.join(input_dir, \"SA_sample_coarse_pristine1.tif\")\n",
    "pristine_fine_file2 = os.path.join(input_dir, \"SA_sample_fine_pristine2.tif\")\n",
    "pristine_coarse_file2 = os.path.join(input_dir, \"SA_sample_coarse_pristine2.tif\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "sim2 = Simulation(logging_level=50)\n",
    "sim2.set_simulation_params(seed=2, job_type=1, output_directory=output_dir, min_speciation_rate=0.1,\n",
    "\t\t\t\t\t\t   sigma=2.0, deme=1)\n",
    "sim2.set_speciation_rates([0.1, 0.2, 0.3])\n",
    "# Use automatic detection of the map file dimensions\n",
    "sim2.set_map_files(sample_file=sample_file, fine_file=fine_file, coarse_file=coarse_file)\n",
    "sim2.add_historical_map(fine_map=pristine_fine_file1, coarse_map=pristine_coarse_file1, time=100, \n",
    "\t\t\t\t\t\trate=0.5)\n",
    "sim2.add_historical_map(fine_map=pristine_fine_file2, coarse_map=pristine_coarse_file2, time=100, \n",
    "\t\t\t\t\t\trate=0.5)\n",
    "sim2.add_sample_time(50)\n",
    "sim2.add_sample_time(100)\n",
    "sim2.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Print the species richness for each time and speciation rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Species richness at time 0.0 with speciation rate of 0.1 is 7358.\nSpecies richness at time 50.0 with speciation rate of 0.1 is 7424.\nSpecies richness at time 100.0 with speciation rate of 0.1 is 7397.\nSpecies richness at time 0.0 with speciation rate of 0.2 is 8776.\nSpecies richness at time 50.0 with speciation rate of 0.2 is 8788.\nSpecies richness at time 100.0 with speciation rate of 0.2 is 8810.\nSpecies richness at time 0.0 with speciation rate of 0.3 is 9597.\nSpecies richness at time 50.0 with speciation rate of 0.3 is 9575.\nSpecies richness at time 100.0 with speciation rate of 0.3 is 9677.\n"
     ]
    }
   ],
   "source": [
    "tree2 = CoalescenceTree(sim2)\n",
    "for reference in tree2.get_community_references():\n",
    "\t# Contains a dictionary of the parameters\n",
    "\tcommunity_parameters = tree2.get_community_parameters(reference)\n",
    "\tspec_rate = community_parameters[\"speciation_rate\"]\n",
    "\ttime = community_parameters[\"time\"]\n",
    "\tprint(\"Species richness at time {} with speciation rate of {} is {}.\".format(time,\n",
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t spec_rate,\n",
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tree2.get_richness(reference)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example using protracted speciation and a metacommunity\n",
    "\n",
    "This is the same as the first example, but with protracted speciation preventing speciation from occuring before 1000 generations, and forcing speciation to occur at 10000 generations. \n",
    "\n",
    "The coalescence tree is generated with and without a metacommunity as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "sim3 = Simulation(logging_level=50)\n",
    "sim3.set_simulation_params(seed=3, job_type=1, output_directory=output_dir,\n",
    "\t\t\t\t\t\t   min_speciation_rate=0.1, sigma=2.0, deme=1,\n",
    "\t\t\t\t\t\t   protracted=True, min_speciation_gen=1000, max_speciation_gen=10000)\n",
    "sim3.set_speciation_rates([0.1, 0.2, 0.3])\n",
    "# Use automatic detection of the map file dimensions\n",
    "sim3.set_map(os.path.join(input_dir, \"SA_sample_fine.tif\"))\n",
    "sim3.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Re-create the coalescence tree using sampling from a metacommunity instead of a speciation rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "tree3 = CoalescenceTree(sim3)\n",
    "tree3.set_speciation_params(speciation_rates=[0.1, 0.2, 0.3], protracted_speciation_min=1000, \n",
    "\t\t\t\t\t\t\tprotracted_speciation_max=10000, metacommunity_speciation_rate=0.001,\n",
    "\t\t\t\t\t\t\tmetacommunity_size=100000)\n",
    "tree3.add_protracted_parameters(10, 5000)\n",
    "tree3.add_protracted_parameters(50, 800)\n",
    "tree3.apply()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Print out the species richness for each parameter set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Speciation rate of 0.1, (min gen=1000.0, max gen=10000.0)\nSpecies richness: 71\nSpeciation rate of 0.2, (min gen=1000.0, max gen=10000.0)\nSpecies richness: 71\nSpeciation rate of 0.3, (min gen=1000.0, max gen=10000.0)\nSpecies richness: 71\nSpeciation rate of 0.1, (min gen=1000.0, max gen=10000.0)\nMetacommunity used of size 100000.0 with speciation rate 0.001.\nSpecies richness: 71\nSpeciation rate of 0.2, (min gen=1000.0, max gen=10000.0)\nMetacommunity used of size 100000.0 with speciation rate 0.001.\nSpecies richness: 71\nSpeciation rate of 0.3, (min gen=1000.0, max gen=10000.0)\nMetacommunity used of size 100000.0 with speciation rate 0.001.\nSpecies richness: 71\nSpeciation rate of 0.1, (min gen=10.0, max gen=5000.0)\nMetacommunity used of size 100000.0 with speciation rate 0.001.\nSpecies richness: 657\nSpeciation rate of 0.2, (min gen=10.0, max gen=5000.0)\nMetacommunity used of size 100000.0 with speciation rate 0.001.\nSpecies richness: 657\nSpeciation rate of 0.3, (min gen=10.0, max gen=5000.0)\nMetacommunity used of size 100000.0 with speciation rate 0.001.\nSpecies richness: 657\nSpeciation rate of 0.1, (min gen=50.0, max gen=800.0)\nMetacommunity used of size 100000.0 with speciation rate 0.001.\nSpecies richness: 656\nSpeciation rate of 0.2, (min gen=50.0, max gen=800.0)\nMetacommunity used of size 100000.0 with speciation rate 0.001.\nSpecies richness: 657\nSpeciation rate of 0.3, (min gen=50.0, max gen=800.0)\nMetacommunity used of size 100000.0 with speciation rate 0.001.\nSpecies richness: 657\n"
     ]
    }
   ],
   "source": [
    "for reference in tree3.get_community_references():\n",
    "\tparams = tree3.get_community_parameters(reference)\n",
    "\tspec_rate = params[\"speciation_rate\"]\n",
    "\tproc_min = params[\"min_speciation_gen\"]\n",
    "\tproc_max = params[\"max_speciation_gen\"]\n",
    "\tprint(\"Speciation rate of {}, (min gen={}, max gen={})\".format(spec_rate, proc_min, proc_max))\n",
    "\tif params[\"metacommunity_reference\"] != 0:\n",
    "\t\tmeta_params = tree3.get_metacommunity_parameters(params[\"metacommunity_reference\"])\n",
    "\t\tmeta_spec = meta_params[\"speciation_rate\"]\n",
    "\t\tmeta_size = meta_params[\"metacommunity_size\"]\n",
    "\t\tprint(\"Metacommunity used of size {} with speciation rate {}.\".format(meta_size, meta_spec))\n",
    "\tprint(\"Species richness: {}\".format(tree3.get_richness(reference)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Clean up\n",
    "\n",
    "Delete the objects from memory to clear from RAM - this is not usually required as objects will be deleted when they fall out of scope.\n",
    "\t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "sim1 = None\n",
    "sim2 = None\n",
    "sim3 = None\n",
    "tree1 = None\n",
    "tree2 = None\n",
    "tree3 = None"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
