.. _program_listing_file_CustomExceptions.h:

Program Listing for File CustomExceptions.h
========================================================================================

- Return to documentation for :ref:`file_CustomExceptions.h`

.. code-block:: cpp

   //This file is part of NECSim project which is released under BSD-3 license.
   //See file **LICENSE.txt** or visit https://opensource.org/licenses/BSD-3-Clause) for full license details.
   // Author: Samuel Thompson
   // Contact: samuel.thompson14@imperial.ac.uk or thompsonsed@gmail.com
    #ifndef EXCEPTION
    #define EXCEPTION
    #include <stdexcept>
    using namespace std;
   struct Main_Exception : public runtime_error
   {
     Main_Exception():runtime_error("Exception thrown at run time in main: "){}
     Main_Exception(string msg):runtime_error(msg.c_str()){}
   };
   
   
   struct Fatal_Exception : public runtime_error
   {
     Fatal_Exception():runtime_error("Fatal exception thrown at run time, quitting program. "){}
     Fatal_Exception(string msg):runtime_error(msg.c_str()){}
   };
    
    // for non fatal map exceptions - in most cases, if they can't be resolved, the program will have to quit regardless.
    struct Map_Exception : public runtime_error
   {
       Map_Exception():runtime_error("Exception thrown at run time in Map: "){}
       Map_Exception(string msg):runtime_error(msg.c_str()){}
   };
    
    // For returning fatal map exceptions
    struct Map_Fatal_Exception : public runtime_error
    {
       Map_Fatal_Exception():runtime_error("Fatal exception thrown at run time in Map: "){}
       Map_Fatal_Exception(string msg):runtime_error(msg.c_str()){}
    };
    
    /************************************************************
                           CONFIGOPTION CLASS
    ************************************************************/
    // Create the ConfigException object
   struct Config_Exception : public runtime_error
   {
     Config_Exception():runtime_error("Exception thrown at run time in config: "){}
     Config_Exception(string msg):runtime_error(msg.c_str()){}
   };
   
   
   using std::runtime_error;
   struct SpeciesException : public runtime_error
   {
       SpeciesException():runtime_error("Exception thrown at run time in SpeciationCounter: "){}
       SpeciesException(string msg):runtime_error(msg.c_str()){}
   };
   #endif


