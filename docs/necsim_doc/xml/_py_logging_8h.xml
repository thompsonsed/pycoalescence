<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_py_logging_8h" kind="file" language="C++">
    <compoundname>PyLogging.h</compoundname>
    <includes local="yes">Python.h</includes>
    <includes local="no">string</includes>
    <includes local="yes">necsim/LogFile.h</includes>
    <includedby refid="applyspecmodule_8cpp" local="yes">applyspecmodule.cpp</includedby>
    <includedby refid="dispersalmodule_8cpp" local="yes">dispersalmodule.cpp</includedby>
    <includedby refid="necsimmodule_8cpp" local="yes">necsimmodule.cpp</includedby>
    <includedby refid="_py_logging_8cpp" local="yes">PyLogging.cpp</includedby>
    <incdepgraph>
      <node id="1664">
        <label>string</label>
      </node>
      <node id="1663">
        <label>Python.h</label>
      </node>
      <node id="1665">
        <label>necsim/LogFile.h</label>
      </node>
      <node id="1662">
        <label>PyLogging.h</label>
        <link refid="PyLogging.h"/>
        <childnode refid="1663" relation="include">
        </childnode>
        <childnode refid="1664" relation="include">
        </childnode>
        <childnode refid="1665" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_py_logging_8h_1a304b2017ec52852821aced29cb2fe2ed" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool log_set</definition>
        <argsstring></argsstring>
        <name>log_set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogging.h" line="16" column="1" bodyfile="applyspecmodule.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_py_logging_8h_1a08d9fbb3de64e2e37d485a6fb7c413c9" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool logger_set</definition>
        <argsstring></argsstring>
        <name>logger_set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogging.h" line="17" column="1" bodyfile="applyspecmodule.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_py_logging_8h_1ae0822a71c8f520b72eee4e308ca8f3d5" prot="public" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* call_logging</definition>
        <argsstring></argsstring>
        <name>call_logging</name>
        <briefdescription>
<para>A python object container for the logger function call for outputting using python&apos;s logging module. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogging.h" line="22" column="1" bodyfile="applyspecmodule.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_py_logging_8h_1ac5c8cc1b55a6d2753d51817bd568aada" prot="public" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* logger</definition>
        <argsstring></argsstring>
        <name>logger</name>
        <briefdescription>
<para>A python object container for the logger object for outputting using python&apos;s logging module. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogging.h" line="28" column="1" bodyfile="applyspecmodule.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_py_logging_8h_1a097ab5db9e7a680d4bbb69d4208d26b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* set_log_function</definition>
        <argsstring>(PyObject *dummy, PyObject *args)</argsstring>
        <name>set_log_function</name>
        <param>
          <type>PyObject *</type>
          <declname>dummy</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Sets the logging function to the provided specification. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dummy</parametername>
</parameternamelist>
<parameterdescription>
<para>the dummy object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the args provided (should be one callable logging function) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogging.h" line="35" column="1" bodyfile="PyLogging.cpp" bodystart="51" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="_py_logging_8h_1aacf1c4b75e0c736bc8947f45ef904694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* set_logger</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>set_logger</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Sets the logger to the inputted object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>required for python objects </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the logger to link for error outputting </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogging.h" line="42" column="1" bodyfile="PyLogging.cpp" bodystart="122" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="_py_logging_8h_1adfc52d9192c002e36e0a8967c3091268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_log</definition>
        <argsstring>(int level, char *message)</argsstring>
        <name>write_log</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Writes the message out to python&apos;s logging module at the level supplied. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>logging level to write out at (10: Debug, 20: Info, 30: Warning, 40: Error, 50: Critical) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to write out </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the python object as a result (should be Py_RETURN_NONE) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogging.h" line="50" column="1" bodyfile="PyLogging.cpp" bodystart="74" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="_py_logging_8h_1a0b934c1eebf12a6ae82467f7fc56f5b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_log</definition>
        <argsstring>(int level, string message)</argsstring>
        <name>write_log</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Writes the message out to python&apos;s logging module at the level supplied. Overloaded version with support for normal strings. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>logging level to write out at (10: Debug, 20: Info, 30: Warning, 40: Error, 50: Critical) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to write out </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the python object as a result (should be Py_RETURN_NONE) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogging.h" line="59" column="1" bodyfile="PyLogging.cpp" bodystart="111" bodyend="120"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Routines for writing to python logging module. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Sam Thompson</para></simplesect>
<simplesect kind="copyright"><para><ulink url="https://opensource.org/licenses/BSD-3-Clause">BSD-3 Licence.</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NECSim<sp/>project<sp/>which<sp/>is<sp/>released<sp/>under<sp/>BSD-3<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//See<sp/>file<sp/>**LICENSE.txt**<sp/>or<sp/>visit<sp/>https://opensource.org/licenses/BSD-3-Clause)<sp/>for<sp/>full<sp/>license<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor">#ifndef<sp/>PYLOGGING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYLOGGING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Python.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;necsim/LogFile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>log_set;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>logger_set;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PyObject<sp/>*<sp/>call_logging;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PyObject<sp/>*logger;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">PyObject<sp/>*<sp/>set_log_function(PyObject<sp/>*dummy,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">PyObject<sp/>*<sp/>set_logger(PyObject<sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*<sp/>args);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_log(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>message);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_log(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>message);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PYLOGGING_H</highlight></codeline>
    </programlisting>
    <location file="PyLogging.h"/>
  </compounddef>
</doxygen>
