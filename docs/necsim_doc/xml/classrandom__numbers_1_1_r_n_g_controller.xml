<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classrandom__numbers_1_1_r_n_g_controller" kind="class" language="C++" prot="public">
    <compoundname>random_numbers::RNGController</compoundname>
    <basecompoundref refid="classrandom__numbers_1_1_xoroshiro256plus" prot="public" virt="virtual">random_numbers::Xoroshiro256plus</basecompoundref>
    <includes refid="_r_n_g_controller_8h" local="no">RNGController.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classrandom__numbers_1_1_r_n_g_controller_1a26a7273dfdd6d4f7609f1f38e0bcb5ff" prot="private" static="no">
        <type>double(RNGController::*</type>
        <definition>typedef double(RNGController::* random_numbers::RNGController::fptr) ()</definition>
        <argsstring>)()</argsstring>
        <name>fptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="142" column="1" bodyfile="necsim/RNGController.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrandom__numbers_1_1_r_n_g_controller_1a4d0498d287d14db23e0d5f5874733997" prot="private" static="no">
        <type>double(RNGController::*</type>
        <definition>typedef double(RNGController::* random_numbers::RNGController::fptr2) (const double &amp;min_distance)</definition>
        <argsstring>)(const double &amp;min_distance)</argsstring>
        <name>fptr2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="146" column="1" bodyfile="necsim/RNGController.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrandom__numbers_1_1_r_n_g_controller_1a8082c7743ab8e93c1ba3ee7a6a0e2a58" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool random_numbers::RNGController::seeded</definition>
        <argsstring></argsstring>
        <name>seeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="135" column="1" bodyfile="necsim/RNGController.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrandom__numbers_1_1_r_n_g_controller_1a2c6e72cffb13a7984bd0897cbbfcea06" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t random_numbers::RNGController::seed</definition>
        <argsstring></argsstring>
        <name>seed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="136" column="1" bodyfile="necsim/RNGController.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrandom__numbers_1_1_r_n_g_controller_1a018121037ec811b2b25f286d95d62970" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double random_numbers::RNGController::tau</definition>
        <argsstring></argsstring>
        <name>tau</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="138" column="1" bodyfile="necsim/RNGController.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrandom__numbers_1_1_r_n_g_controller_1a5a75503a4d5a3174b8114b21be310abf" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double random_numbers::RNGController::sigma</definition>
        <argsstring></argsstring>
        <name>sigma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="140" column="1" bodyfile="necsim/RNGController.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrandom__numbers_1_1_r_n_g_controller_1a5c096382a55f1885e9f1706311b8684c" prot="private" static="no" mutable="no">
        <type>fptr</type>
        <definition>fptr random_numbers::RNGController::dispersalFunction</definition>
        <argsstring></argsstring>
        <name>dispersalFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="143" column="1" bodyfile="necsim/RNGController.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrandom__numbers_1_1_r_n_g_controller_1a93fdebe27b3f3b1d73fa244979158d0c" prot="private" static="no" mutable="no">
        <type>fptr2</type>
        <definition>fptr2 random_numbers::RNGController::dispersalFunctionMinDistance</definition>
        <argsstring></argsstring>
        <name>dispersalFunctionMinDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="148" column="1" bodyfile="necsim/RNGController.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrandom__numbers_1_1_r_n_g_controller_1aeedd321b30a6dedd81240615538f7817" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double random_numbers::RNGController::m_prob</definition>
        <argsstring></argsstring>
        <name>m_prob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="151" column="1" bodyfile="necsim/RNGController.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrandom__numbers_1_1_r_n_g_controller_1af622640a543b10e6a3f2849b96308b66" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double random_numbers::RNGController::cutoff</definition>
        <argsstring></argsstring>
        <name>cutoff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="153" column="1" bodyfile="necsim/RNGController.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a3c17c6896784d77720cc0ed424c7d659" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>random_numbers::RNGController::RNGController</definition>
        <argsstring>()</argsstring>
        <name>RNGController</name>
        <briefdescription>
<para>Standard constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="159" column="1" bodyfile="necsim/RNGController.h" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a87dfdf88ef5b6e7f485055dcc328dc42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void random_numbers::RNGController::setSeed</definition>
        <argsstring>(uint64_t seed) override</argsstring>
        <name>setSeed</name>
        <reimplements refid="classrandom__numbers_1_1_xoroshiro256plus_1a16cb6bab9d08f12e6791f23f6fee8d07">setSeed</reimplements>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Sets the seed to the given input. Is only seeded if the seed hasn&apos;t already been provided. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>the input seed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="170" column="1" bodyfile="necsim/RNGController.h" bodystart="170" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a9833e6a81b7d4f8551897dee4050dcd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void random_numbers::RNGController::wipeSeed</definition>
        <argsstring>()</argsstring>
        <name>wipeSeed</name>
        <briefdescription>
<para>Clears the seed, if it has already been set. Keeps other simulation parameters, such as sigma and tau. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="188" column="1" bodyfile="necsim/RNGController.h" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a484c1bb5a72324b17e26f95c5109e588" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long random_numbers::RNGController::i0</definition>
        <argsstring>(unsigned long max)</argsstring>
        <name>i0</name>
        <param>
          <type>unsigned long</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Generates a random number uniformly from 0 to the maximum value provided. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an integer of the produced random number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="198" column="1" bodyfile="necsim/RNGController.h" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1acdd16d1eedc57394bf534137922b5e63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::norm</definition>
        <argsstring>()</argsstring>
        <name>norm</name>
        <briefdescription>
<para>Generates a normally distributed number Uses the standard normal distribution using the Ziggurat method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the random number from a normal distribution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="208" column="1" bodyfile="necsim/RNGController.h" bodystart="208" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a4370dc3d6cea9f95604c2ae7408c575b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::rayleigh</definition>
        <argsstring>()</argsstring>
        <name>rayleigh</name>
        <briefdescription>
<para>Returns a random distance from a 2 dimensional normal distribution, also called the rayleigh distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>dispersal distance of a rayleigh distribution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="250" column="1" bodyfile="necsim/RNGController.h" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a48b1d925c8f6c9f97437930fbfa04f0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::rayleighMinDist</definition>
        <argsstring>(const double &amp;dist)</argsstring>
        <name>rayleighMinDist</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
<para>Generates a random distance from a rayleigh distribution, given that the distance is more than some minimum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to generate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random distance greater than the minimum provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="261" column="1" bodyfile="necsim/RNGController.h" bodystart="261" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1ac14558b07ee48f01742797dcf27f04fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::rayleighCDF</definition>
        <argsstring>(const double &amp;dist)</argsstring>
        <name>rayleighCDF</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
<para>Gets the cumulative probability of a distance from the rayleigh distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance to obtain the probability of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the probability of producing the given distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="281" column="1" bodyfile="necsim/RNGController.h" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1af7caa2df1f1984ba6fc680264e038aba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void random_numbers::RNGController::setDispersalParams</definition>
        <argsstring>(const double sigmain, const double tauin)</argsstring>
        <name>setDispersalParams</name>
        <param>
          <type>const double</type>
          <declname>sigmain</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tauin</declname>
        </param>
        <briefdescription>
<para>Sets the dispersal parameters, avoiding requirement to provide these numbers each function call. This is only relevant for fat-tailed dispersal calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sigmain</parametername>
</parameternamelist>
<parameterdescription>
<para>the fatness of the fat-tailed dispersal kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tauin</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the fat-tailed dispersal kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="292" column="1" bodyfile="necsim/RNGController.h" bodystart="292" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a29e925758e8353852a9be2c811e21175" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::fattail</definition>
        <argsstring>(double z)</argsstring>
        <name>fattail</name>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Call from the fat-tailed dispersal kernel with the provided sigma. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This is the original version used in J Rosindell&apos;s codebase, and has been altered for a version which approximates the gaussian distribution at extreme limits. </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired sigma. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random number drawn from the fat-tailed dispersal kernel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="305" column="1" bodyfile="necsim/RNGController.h" bodystart="305" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a68df151241ad6b8bfbc92bc4696fddd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::fattailCDF</definition>
        <argsstring>(const double &amp;distance)</argsstring>
        <name>fattailCDF</name>
        <param>
          <type>const double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Gets the cumulative probability density of travelling the distance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance to obtain the cumulative probability for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the probability of dispersing less than or equal to distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="317" column="1" bodyfile="necsim/RNGController.h" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1ac26b55adfa26dd0ede89c579a29bd533" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::fattailMinDistance</definition>
        <argsstring>(const double &amp;min_distance)</argsstring>
        <name>fattailMinDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Gets a fat-tailed random distance greater than some minimum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_distance</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a fat-tailed distance greater than the minimum </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="327" column="1" bodyfile="necsim/RNGController.h" bodystart="327" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1adf935bc98030f331ab3a665e65d17b1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::fattail</definition>
        <argsstring>()</argsstring>
        <name>fattail</name>
        <briefdescription>
<para>Call from fat-tailed dispersal kernel. This function requires <ref refid="classrandom__numbers_1_1_r_n_g_controller_1af7caa2df1f1984ba6fc680264e038aba" kindref="member">setDispersalParams()</ref> has already been called. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>deprecated, kept for testing purposes only </para>
</xrefdescription></xrefsect><simplesect kind="return"><para>a random number drawn from the fat-tailed dispersal kernel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="348" column="1" bodyfile="necsim/RNGController.h" bodystart="348" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1aa6de7e34c1cdb8ef242d5990e3f87416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::fattail_old</definition>
        <argsstring>()</argsstring>
        <name>fattail_old</name>
        <briefdescription>
<para>Old version of the function call reparameterised for different nu and sigma. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Kept only for testing purposes. </para>
</xrefdescription></xrefsect><simplesect kind="return"><para>a random number drawn from the fat-tailed dispersal kernel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="362" column="1" bodyfile="necsim/RNGController.h" bodystart="362" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1aae5a6f61acb0f5d936751e9788c7dff2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::direction</definition>
        <argsstring>()</argsstring>
        <name>direction</name>
        <briefdescription>
<para>Generates a direction in radians. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the direction in radians </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="373" column="1" bodyfile="necsim/RNGController.h" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1aac957f39f7fc65e546854fe253df8e56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool random_numbers::RNGController::event</definition>
        <argsstring>(double event_probability)</argsstring>
        <name>event</name>
        <param>
          <type>double</type>
          <declname>event_probability</declname>
        </param>
        <briefdescription>
<para>For a given event probability, returns the probability that the event has occured. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_probability</parametername>
</parameternamelist>
<parameterdescription>
<para>the event probability. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether or not the event has occured. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="383" column="1" bodyfile="necsim/RNGController.h" bodystart="383" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a2d1d1f843eb509aa08526b45c6d88cf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::normUniform</definition>
        <argsstring>()</argsstring>
        <name>normUniform</name>
        <briefdescription>
<para>Normal distribution, with percentage chance to choose a uniform distribution instead. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function will not produce the same output as <ref refid="classrandom__numbers_1_1_r_n_g_controller_1acdd16d1eedc57394bf534137922b5e63" kindref="member">norm()</ref> for the same parameters, even with a zero chance of picking from the uniform distribution (due to random number draws). </para>
</simplesect>
<simplesect kind="return"><para>normally (or uniformly) distributed number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="407" column="1" bodyfile="necsim/RNGController.h" bodystart="407" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1aed2e72b6032bb7386100f3b13a8e9522" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::normUniformMinDistance</definition>
        <argsstring>(const double &amp;min_distance)</argsstring>
        <name>normUniformMinDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Generates a random distance from a norm-uniform distribution, given that the distance is more than some minimum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to generate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random distance greater than the minimum provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="424" column="1" bodyfile="necsim/RNGController.h" bodystart="424" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a32c116e4d9fca1b83c40264e43344c39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::uniform</definition>
        <argsstring>()</argsstring>
        <name>uniform</name>
        <briefdescription>
<para>Draws a random number from a uniform distribution between 0 and cutoff. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a random number in (0, cutoff) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="438" column="1" bodyfile="necsim/RNGController.h" bodystart="438" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a38e9b113a34cf695c27b90e5eba2f40c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::uniformMinDistance</definition>
        <argsstring>(const double &amp;min_distance)</argsstring>
        <name>uniformMinDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Generates a random distance from a uniform distribution, given that the distance is more than some minimum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to generate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random distance greater than the minimum provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="449" column="1" bodyfile="necsim/RNGController.h" bodystart="449" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a87691d401e6b900ec56f4a187721f124" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::uniformUniform</definition>
        <argsstring>()</argsstring>
        <name>uniformUniform</name>
        <briefdescription>
<para>Two uniform distributions, the first between 0 and 0.1*cutoff, and the second between 0.9*cutoff and cutoff. Selects from both distributions equally. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The mean for this function should be identical to a uniform distribution between 0 and cutoff. </para>
</simplesect>
<simplesect kind="return"><para>uniformly distributed number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="468" column="1" bodyfile="necsim/RNGController.h" bodystart="468" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1ad48e664fae13f821b7ca37bd552dd1f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::uniformUniformMinDistance</definition>
        <argsstring>(const double &amp;min_distance)</argsstring>
        <name>uniformUniformMinDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Generates a random distance from a uniform-uniform distribution, given that the distance is more than some minimum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to generate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random distance greater than the minimum provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="485" column="1" bodyfile="necsim/RNGController.h" bodystart="485" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1ae9f308d9659d69f8bb0d48324d5a9567" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void random_numbers::RNGController::setDispersalMethod</definition>
        <argsstring>(const string &amp;dispersal_method, const double &amp;m_probin, const double &amp;cutoffin)</argsstring>
        <name>setDispersalMethod</name>
        <param>
          <type>const string &amp;</type>
          <declname>dispersal_method</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>m_probin</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>cutoffin</declname>
        </param>
        <briefdescription>
<para>Sets the dispersal method by creating the link between dispersalFunction() and the correct dispersal character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispersal_method</parametername>
</parameternamelist>
<parameterdescription>
<para>string containing the dispersal type. Can be one of [normal, fat-tail, norm-uniform] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m_probin</parametername>
</parameternamelist>
<parameterdescription>
<para>the probability of drawing from the uniform distribution. Only relevant for uniform dispersals. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cutoffin</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum value to be drawn from the uniform dispersal. Only relevant for uniform dispersals. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="506" column="1" bodyfile="necsim/RNGController.h" bodystart="506" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a54b52cbe8a20b4961f8b1438c0de61b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::dispersal</definition>
        <argsstring>()</argsstring>
        <name>dispersal</name>
        <briefdescription>
<para>Runs the dispersal with the allocated dispersal function. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function will never return a value larger than the size of LONG_MAX to avoid issues of converting doubles to integers. For dispersal distance within coalescence simulations, this is seemed a reasonable assumption, but may cause issues if code is re-used in later projects.</para>
</simplesect>
<simplesect kind="return"><para>distance the dispersal distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="570" column="1" bodyfile="necsim/RNGController.h" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1ad089f537a2001a7ab82077d83b43ea4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::dispersalMinDistance</definition>
        <argsstring>(const double &amp;min_distance)</argsstring>
        <name>dispersalMinDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Get a dispersal distance with some minimum. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will never return doubles larger than LONG_MAX to avoid integer overflows.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_distance</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to disperse </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the random dispersal distance greater than or equal to the minimum </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="583" column="1" bodyfile="necsim/RNGController.h" bodystart="583" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a815ccbca89f1e19923117951814301f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long random_numbers::RNGController::randomLogarithmic</definition>
        <argsstring>(long double alpha)</argsstring>
        <name>randomLogarithmic</name>
        <param>
          <type>long double</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Sample from a logarithmic distribution. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses the LK sampling method for generating random numbers from a logarithmic distribution, as described by Kemp (1981).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>alpha parameter for the logarithmic distribution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the randomly generated logarithmic number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="597" column="1" bodyfile="necsim/RNGController.h" bodystart="597" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1a5576cc5fa7a2677b0b95a376a89d25f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::RNGController::randomExponential</definition>
        <argsstring>(double lambda)</argsstring>
        <name>randomExponential</name>
        <param>
          <type>double</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="621" column="1" bodyfile="necsim/RNGController.h" bodystart="621" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_xoroshiro256plus_1a1f784c1deb73da3e3eae76668cb50547" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t random_numbers::Xoroshiro256plus::next</definition>
        <argsstring>()</argsstring>
        <name>next</name>
        <briefdescription>
<para>Generates the next random integer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a random integer from 0 to max of 2^64 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Xoroshiro256plus.h" line="157" column="1" bodyfile="necsim/Xoroshiro256plus.h" bodystart="157" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_xoroshiro256plus_1a24e7062397e7130f80b939652e23cab7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_numbers::Xoroshiro256plus::d01</definition>
        <argsstring>()</argsstring>
        <name>d01</name>
        <briefdescription>
<para>Generates a random number in the range [0, 1) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a random double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Xoroshiro256plus.h" line="180" column="1" bodyfile="necsim/Xoroshiro256plus.h" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__numbers_1_1_xoroshiro256plus_1a9b44f592f68cb5faa6f56471915098dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void random_numbers::Xoroshiro256plus::jump</definition>
        <argsstring>()</argsstring>
        <name>jump</name>
        <briefdescription>
<para>Jumps the generator forwards by the equivalent of 2^128 calls of <ref refid="classrandom__numbers_1_1_xoroshiro256plus_1a1f784c1deb73da3e3eae76668cb50547" kindref="member">next()</ref> - useful for parallel computations where different random number sequences are required. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Xoroshiro256plus.h" line="189" column="1" bodyfile="necsim/Xoroshiro256plus.h" bodystart="189" bodyend="215"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrandom__numbers_1_1_r_n_g_controller_1aad7d5fd009cdb6edeecdf756b62766fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T</type>
        <definition>static const T random_numbers::RNGController::exponentialDistribution</definition>
        <argsstring>(const T lambda, const T r)</argsstring>
        <name>exponentialDistribution</name>
        <param>
          <type>const T</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="626" column="1" bodyfile="necsim/RNGController.h" bodystart="626" bodyend="629"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classrandom__numbers_1_1_r_n_g_controller_1a2f8b17ccf552ed7ea4976de1e8dc6377" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const RNGController &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classrandom__numbers_1_1_r_n_g_controller" kindref="compound">RNGController</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Outputs the NRrand object to the output stream. Used for saving the object to file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the NRrand object to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="639" column="1" bodyfile="necsim/RNGController.h" bodystart="639" bodyend="646"/>
      </memberdef>
      <memberdef kind="friend" id="classrandom__numbers_1_1_r_n_g_controller_1afc263f62844d6301616e770747fb4252" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, RNGController &amp;r)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classrandom__numbers_1_1_r_n_g_controller" kindref="compound">RNGController</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Inputs the NRrand object from the input stream. Used for reading the NRrand object from a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the NRrand object to input to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/RNGController.h" line="655" column="1" bodyfile="necsim/RNGController.h" bodystart="655" bodyend="661"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classrandom__numbers_1_1_xoroshiro256plus_1af2c7c9c5a47212287e86e24d15be7b24" prot="protected" static="no" mutable="no">
        <type>std::array&lt; uint64_t, 4 &gt;</type>
        <definition>std::array&lt;uint64_t, 4&gt; random_numbers::Xoroshiro256plus::shuffle_table</definition>
        <argsstring></argsstring>
        <name>shuffle_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Xoroshiro256plus.h" line="123" column="1" bodyfile="necsim/Xoroshiro256plus.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains the functions for random number generation, based on the Xoroshiro256+ algorithm. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="414">
        <label>random_numbers::Xoroshiro256plus</label>
        <link refid="classrandom__numbers_1_1_xoroshiro256plus"/>
      </node>
      <node id="413">
        <label>random_numbers::RNGController</label>
        <link refid="classrandom__numbers_1_1_r_n_g_controller"/>
        <childnode refid="414" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="417">
        <label>std::array&lt; uint64_t, 4 &gt;</label>
      </node>
      <node id="416">
        <label>random_numbers::Xoroshiro256plus</label>
        <link refid="classrandom__numbers_1_1_xoroshiro256plus"/>
        <childnode refid="417" relation="usage">
          <edgelabel>shuffle_table</edgelabel>
        </childnode>
      </node>
      <node id="415">
        <label>random_numbers::RNGController</label>
        <link refid="classrandom__numbers_1_1_r_n_g_controller"/>
        <childnode refid="416" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/RNGController.h" line="132" column="1" bodyfile="necsim/RNGController.h" bodystart="131" bodyend="662"/>
    <listofallmembers>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1af622640a543b10e6a3f2849b96308b66" prot="private" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>cutoff</name></member>
      <member refid="classrandom__numbers_1_1_xoroshiro256plus_1a24e7062397e7130f80b939652e23cab7" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>d01</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1aae5a6f61acb0f5d936751e9788c7dff2" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>direction</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a54b52cbe8a20b4961f8b1438c0de61b1" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>dispersal</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a5c096382a55f1885e9f1706311b8684c" prot="private" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>dispersalFunction</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a93fdebe27b3f3b1d73fa244979158d0c" prot="private" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>dispersalFunctionMinDistance</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1ad089f537a2001a7ab82077d83b43ea4f" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>dispersalMinDistance</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1aac957f39f7fc65e546854fe253df8e56" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>event</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1aad7d5fd009cdb6edeecdf756b62766fe" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>exponentialDistribution</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a29e925758e8353852a9be2c811e21175" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>fattail</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1adf935bc98030f331ab3a665e65d17b1e" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>fattail</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1aa6de7e34c1cdb8ef242d5990e3f87416" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>fattail_old</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a68df151241ad6b8bfbc92bc4696fddd1" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>fattailCDF</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1ac26b55adfa26dd0ede89c579a29bd533" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>fattailMinDistance</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a26a7273dfdd6d4f7609f1f38e0bcb5ff" prot="private" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>fptr</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a4d0498d287d14db23e0d5f5874733997" prot="private" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>fptr2</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a484c1bb5a72324b17e26f95c5109e588" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>i0</name></member>
      <member refid="classrandom__numbers_1_1_xoroshiro256plus_1a9b44f592f68cb5faa6f56471915098dc" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>jump</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1aeedd321b30a6dedd81240615538f7817" prot="private" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>m_prob</name></member>
      <member refid="classrandom__numbers_1_1_xoroshiro256plus_1a1f784c1deb73da3e3eae76668cb50547" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>next</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1acdd16d1eedc57394bf534137922b5e63" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>norm</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a2d1d1f843eb509aa08526b45c6d88cf9" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>normUniform</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1aed2e72b6032bb7386100f3b13a8e9522" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>normUniformMinDistance</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a2f8b17ccf552ed7ea4976de1e8dc6377" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>operator&lt;&lt;</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1afc263f62844d6301616e770747fb4252" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>operator&gt;&gt;</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a5576cc5fa7a2677b0b95a376a89d25f1" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>randomExponential</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a815ccbca89f1e19923117951814301f0" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>randomLogarithmic</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a4370dc3d6cea9f95604c2ae7408c575b" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>rayleigh</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1ac14558b07ee48f01742797dcf27f04fe" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>rayleighCDF</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a48b1d925c8f6c9f97437930fbfa04f0f" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>rayleighMinDist</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a3c17c6896784d77720cc0ed424c7d659" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>RNGController</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a2c6e72cffb13a7984bd0897cbbfcea06" prot="private" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>seed</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a8082c7743ab8e93c1ba3ee7a6a0e2a58" prot="private" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>seeded</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1ae9f308d9659d69f8bb0d48324d5a9567" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>setDispersalMethod</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1af7caa2df1f1984ba6fc680264e038aba" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>setDispersalParams</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a87dfdf88ef5b6e7f485055dcc328dc42" prot="public" virt="virtual"><scope>random_numbers::RNGController</scope><name>setSeed</name></member>
      <member refid="classrandom__numbers_1_1_xoroshiro256plus_1af2c7c9c5a47212287e86e24d15be7b24" prot="protected" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>shuffle_table</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a5a75503a4d5a3174b8114b21be310abf" prot="private" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>sigma</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a018121037ec811b2b25f286d95d62970" prot="private" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>tau</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a32c116e4d9fca1b83c40264e43344c39" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>uniform</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a38e9b113a34cf695c27b90e5eba2f40c" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>uniformMinDistance</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a87691d401e6b900ec56f4a187721f124" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>uniformUniform</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1ad48e664fae13f821b7ca37bd552dd1f1" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>uniformUniformMinDistance</name></member>
      <member refid="classrandom__numbers_1_1_r_n_g_controller_1a9833e6a81b7d4f8551897dee4050dcd7" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>wipeSeed</name></member>
      <member refid="classrandom__numbers_1_1_xoroshiro256plus_1a5b47806285be2ac295b2e595f93740e2" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>Xoroshiro256plus</name></member>
      <member refid="classrandom__numbers_1_1_xoroshiro256plus_1a2db51d9e2307ed500499f54549183329" prot="public" virt="non-virtual"><scope>random_numbers::RNGController</scope><name>Xoroshiro256plus</name></member>
      <member refid="classrandom__numbers_1_1_xoroshiro256plus_1a0cbaa9054b9d4956e6e911003f17709a" prot="public" virt="virtual"><scope>random_numbers::RNGController</scope><name>~Xoroshiro256plus</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
