<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_double_comparison_8cpp" kind="file" language="C++">
    <compoundname>DoubleComparison.cpp</compoundname>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="501">
        <label>necsim/DoubleComparison.cpp</label>
        <link refid="DoubleComparison.cpp"/>
        <childnode refid="502" relation="include">
        </childnode>
      </node>
      <node id="502">
        <label>cmath</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_double_comparison_8cpp_1a7d6dcddec98b5a2e2310370a2a11b3ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool doubleCompare</definition>
        <argsstring>(double d1, double d2, double epsilon)</argsstring>
        <name>doubleCompare</name>
        <param>
          <type>double</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Compares two doubles and returns a boolean of whether they are equal, within the epsilon deviation. This is useful for floating point errors in saving and reading doubles from file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first double. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second double. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the deviation within which the values are assumed to be equal. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the doubles are within epsilon of each other </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/DoubleComparison.cpp" line="17" column="1" bodyfile="necsim/DoubleComparison.cpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="_double_comparison_8cpp_1a691869ae2affd4d42f7ba9ea9839fe04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool doubleCompare</definition>
        <argsstring>(long double d1, long double d2, long double epsilon)</argsstring>
        <name>doubleCompare</name>
        <param>
          <type>long double</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Compares two doubles and returns a boolean of whether they are equal, within the epsilon deviation. This is useful for floating point errors in saving and reading doubles from file. Overloaded version for long doubles. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first double. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second double. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the deviation within which the values are assumed to be equal. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the doubles are within epsilon of each other </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/DoubleComparison.cpp" line="22" column="1" bodyfile="necsim/DoubleComparison.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="_double_comparison_8cpp_1a15cd56115375f185c8a6f95c13800bfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool doubleCompare</definition>
        <argsstring>(long double d1, long double d2, double epsilon)</argsstring>
        <name>doubleCompare</name>
        <param>
          <type>long double</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Compares two doubles and returns a boolean of whether they are equal, within the epsilon deviation. This is useful for floating point errors in saving and reading doubles from file. Overloaded version for long doubles and double epsilon. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first double. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second double. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the deviation within which the values are assumed to be equal. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the doubles are within epsilon of each other </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/DoubleComparison.cpp" line="27" column="1" bodyfile="necsim/DoubleComparison.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Simple comparison between floating points. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Samuel Thompson</para></simplesect>
<simplesect kind="copyright"><para><ulink url="https://opensource.org/licenses/MIT">MIT Licence.</ulink> Contact: <ulink url="mailto:samuel.thompson14@imperial.ac.uk">samuel.thompson14@imperial.ac.uk</ulink> or <ulink url="mailto:thompsonsed@gmail.com">thompsonsed@gmail.com</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NECSim<sp/>project<sp/>which<sp/>is<sp/>released<sp/>under<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>**LICENSE.txt**<sp/>or<sp/>visit<sp/>https://opensource.org/licenses/MIT)<sp/>for<sp/>full<sp/>license<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doubleCompare(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(abs(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(d1<sp/>-<sp/>d2))<sp/>&lt;<sp/>epsilon);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doubleCompare(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d1,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abs((d1<sp/>-<sp/>d2))<sp/>&lt;<sp/>epsilon;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doubleCompare(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d1,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abs((d1<sp/>-<sp/>d2))<sp/>&lt;<sp/>epsilon;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="necsim/DoubleComparison.cpp"/>
  </compounddef>
</doxygen>
