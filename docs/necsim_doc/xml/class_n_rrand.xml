<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_n_rrand" kind="class" language="C++" prot="public">
    <compoundname>NRrand</compoundname>
    <includes refid="_n_rrand_8h" local="no">NRrand.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_n_rrand_1ab3e0e4d3947232a533984c9d39d7c79e" prot="private" static="no">
        <type>double(NRrand::*</type>
        <definition>typedef double(NRrand::* NRrand::fptr) ()</definition>
        <argsstring>)()</argsstring>
        <name>fptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="73" column="1" bodyfile="necsim/NRrand.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_n_rrand_1a8fd49c6be5f3f68a5b366b0cfec4aa91" prot="private" static="no">
        <type>double(NRrand::*</type>
        <definition>typedef double(NRrand::* NRrand::fptr2) (const double &amp;min_distance)</definition>
        <argsstring>)(const double &amp;min_distance)</argsstring>
        <name>fptr2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="77" column="1" bodyfile="necsim/NRrand.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_n_rrand_1aeb21579db31d24957dc384b556b58036" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long NRrand::idum</definition>
        <argsstring></argsstring>
        <name>idum</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="57" column="1" bodyfile="necsim/NRrand.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a6978a773da285910118adc42eb76ef25" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int NRrand::j</definition>
        <argsstring></argsstring>
        <name>j</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="58" column="1" bodyfile="necsim/NRrand.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a83a0f523589a5c29165590895b795007" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long NRrand::k</definition>
        <argsstring></argsstring>
        <name>k</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="59" column="1" bodyfile="necsim/NRrand.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1abac4e50326d4d0ea98b4ce200a811077" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long NRrand::idum2</definition>
        <argsstring></argsstring>
        <name>idum2</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="60" column="1" bodyfile="necsim/NRrand.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a3afc1d57ab124f11e9c2de15c57f0aec" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long NRrand::iy</definition>
        <argsstring></argsstring>
        <name>iy</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="61" column="1" bodyfile="necsim/NRrand.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1acf4be9e683753552ab13ab798a688216" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long NRrand::iv[NTAB]</definition>
        <argsstring>[NTAB]</argsstring>
        <name>iv</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="62" column="1" bodyfile="necsim/NRrand.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a98d56cd4a8d07d259ebd77c91cde3f5d" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double NRrand::temp</definition>
        <argsstring></argsstring>
        <name>temp</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="63" column="1" bodyfile="necsim/NRrand.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a5241fca3dd4bd50fa2a5a1d88d2a9b0e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool NRrand::seeded</definition>
        <argsstring></argsstring>
        <name>seeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="64" column="1" bodyfile="necsim/NRrand.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a18e2282d3947ec16a78dc930a6afe786" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double NRrand::lastresult</definition>
        <argsstring></argsstring>
        <name>lastresult</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="66" column="1" bodyfile="necsim/NRrand.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a6661c5558a907bad71db245226459ec3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool NRrand::normflag</definition>
        <argsstring></argsstring>
        <name>normflag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="67" column="1" bodyfile="necsim/NRrand.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1adaa2f871531a1fdeff8016f658b9175e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double NRrand::tau</definition>
        <argsstring></argsstring>
        <name>tau</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="69" column="1" bodyfile="necsim/NRrand.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1aa1d194b8e3a49f08745434c762370623" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double NRrand::sigma</definition>
        <argsstring></argsstring>
        <name>sigma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="71" column="1" bodyfile="necsim/NRrand.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a62a731045ef34443e867b3659564e6d9" prot="private" static="no" mutable="no">
        <type>fptr</type>
        <definition>fptr NRrand::dispersalFunction</definition>
        <argsstring></argsstring>
        <name>dispersalFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="74" column="1" bodyfile="necsim/NRrand.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a7b63a0c9498ea9f2f6f2c96be4c5d8ca" prot="private" static="no" mutable="no">
        <type>fptr2</type>
        <definition>fptr2 NRrand::dispersalFunctionMinDistance</definition>
        <argsstring></argsstring>
        <name>dispersalFunctionMinDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="79" column="1" bodyfile="necsim/NRrand.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a96ac7234a8c5432273b69b5e3db2b495" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double NRrand::m_prob</definition>
        <argsstring></argsstring>
        <name>m_prob</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="81" column="1" bodyfile="necsim/NRrand.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_n_rrand_1a38507f8ce555ff8efd3f23d1b55bab68" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double NRrand::cutoff</definition>
        <argsstring></argsstring>
        <name>cutoff</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="83" column="1" bodyfile="necsim/NRrand.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_n_rrand_1a674521c4c29a6cb692f343ea9cf6a40c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NRrand::NRrand</definition>
        <argsstring>()</argsstring>
        <name>NRrand</name>
        <briefdescription>
<para>Standard constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="89" column="1" bodyfile="necsim/NRrand.h" bodystart="89" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a23325b4d35ee0b5b580726db05e2b8a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NRrand::setSeed</definition>
        <argsstring>(long seed)</argsstring>
        <name>setSeed</name>
        <param>
          <type>long</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Sets the seed to the given input. Is only seeded if the seed hasn&apos;t already been provided. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>the input seed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="104" column="1" bodyfile="necsim/NRrand.h" bodystart="104" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a34238557ccd72ee3e58712b7140a649a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NRrand::wipeSeed</definition>
        <argsstring>()</argsstring>
        <name>wipeSeed</name>
        <briefdescription>
<para>Clears the seed, if it has already been set. Keeps other simulation parameters, such as sigma and tau. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="135" column="1" bodyfile="necsim/NRrand.h" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a0043ba1c33b3dcb3b98210fb432f9f6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::d01</definition>
        <argsstring>()</argsstring>
        <name>d01</name>
        <briefdescription>
<para>The random number generator. Uses Schrage&apos;s method and a shuffle table to generate the output. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the random number (a double between 0 and 1). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="145" column="1" bodyfile="necsim/NRrand.h" bodystart="145" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1abb6db53dd1fdd9388b39e5dcd26c13ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long NRrand::i0</definition>
        <argsstring>(unsigned long max)</argsstring>
        <name>i0</name>
        <param>
          <type>unsigned long</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Generates a random number uniformly from 0 to the maximum value provided. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an integer of the produced random number. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="175" column="1" bodyfile="necsim/NRrand.h" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1aa57a6e9bae94c2df5a00473ba6fa900d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::norm</definition>
        <argsstring>()</argsstring>
        <name>norm</name>
        <briefdescription>
<para>Generates a normally distributed number Uses the standard normal distribution from a Box-Muller transform. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the random number from a normal distribution. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="185" column="1" bodyfile="necsim/NRrand.h" bodystart="185" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a39576a34204f90b6cda7dfd92561c0b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::rayleigh</definition>
        <argsstring>()</argsstring>
        <name>rayleigh</name>
        <briefdescription>
<para>Returns a random distance from a 2 dimensional normal distribution, also called the rayleigh distribution. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>dispersal distance of a rayleigh distribution </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="215" column="1" bodyfile="necsim/NRrand.h" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1aefdaf5521b01658bdd1c206bbe1e855f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::rayleighMinDist</definition>
        <argsstring>(const double &amp;dist)</argsstring>
        <name>rayleighMinDist</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
<para>Generates a random distance from a rayleigh distribution, given that the distance is more than some minimum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to generate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random distance greater than the minimum provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="226" column="1" bodyfile="necsim/NRrand.h" bodystart="226" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a2723a59dd63c61886238c2d466831985" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::rayleighCDF</definition>
        <argsstring>(const double &amp;dist)</argsstring>
        <name>rayleighCDF</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
<para>Gets the cumulative probability of a distance from the rayleigh distribution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance to obtain the probability of </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the probability of producing the given distance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="246" column="1" bodyfile="necsim/NRrand.h" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a5679f458940de730f527772ca27db5ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NRrand::setDispersalParams</definition>
        <argsstring>(const double sigmain, const double tauin)</argsstring>
        <name>setDispersalParams</name>
        <param>
          <type>const double</type>
          <declname>sigmain</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tauin</declname>
        </param>
        <briefdescription>
<para>Sets the dispersal parameters, avoiding requirement to provide these numbers each function call. This is only relevant for fat-tailed dispersal calls. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sigmain</parametername>
</parameternamelist>
<parameterdescription>
<para>the fatness of the fat-tailed dispersal kernel. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tauin</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the fat-tailed dispersal kernel. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="257" column="1" bodyfile="necsim/NRrand.h" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a464101f3def678477f9156d0bd1aab54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::fattail</definition>
        <argsstring>(double z)</argsstring>
        <name>fattail</name>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Call from the fat-tailed dispersal kernel with the provided sigma. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This is the original version used in J Rosindell&apos;s codebase, and has been altered for a version which approximates the gaussian distribution at extreme limits. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired sigma. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random number drawn from the fat-tailed dispersal kernel. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="270" column="1" bodyfile="necsim/NRrand.h" bodystart="270" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a66a9362387e7421623d5e987a68b186e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::fattailCDF</definition>
        <argsstring>(const double &amp;distance)</argsstring>
        <name>fattailCDF</name>
        <param>
          <type>const double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Gets the cumulative probability density of travelling the distance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance to obtain the cumulative probability for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the probability of dispersing less than or equal to distance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="282" column="1" bodyfile="necsim/NRrand.h" bodystart="282" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a67490e1351fd3f81d1e904a69e81ecdb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::fattailMinDistance</definition>
        <argsstring>(const double &amp;min_distance)</argsstring>
        <name>fattailMinDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Gets a fat-tailed random distance greater than some minimum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_distance</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to return </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a fat-tailed distance greater than the minimum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="293" column="1" bodyfile="necsim/NRrand.h" bodystart="293" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a3ec8aae87ae486ddfb5ad481a7972c27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::fattail</definition>
        <argsstring>()</argsstring>
        <name>fattail</name>
        <briefdescription>
<para>Call from fat-tailed dispersal kernel. This function requires <ref refid="class_n_rrand_1a5679f458940de730f527772ca27db5ad" kindref="member">setDispersalParams()</ref> has already been called. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>deprecated, kept for testing purposes only </para></xrefdescription></xrefsect><simplesect kind="return"><para>a random number drawn from the fat-tailed dispersal kernel. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="307" column="1" bodyfile="necsim/NRrand.h" bodystart="307" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1aab0ec97e2c0f74cf38cc7047356cae5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::fattail_old</definition>
        <argsstring>()</argsstring>
        <name>fattail_old</name>
        <briefdescription>
<para>Old version of the function call reparameterised for different nu and sigma. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000008"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Kept only for testing purposes. </para></xrefdescription></xrefsect><simplesect kind="return"><para>a random number drawn from the fat-tailed dispersal kernel. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="321" column="1" bodyfile="necsim/NRrand.h" bodystart="321" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1aef021289f62893215204589af450bf65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::direction</definition>
        <argsstring>()</argsstring>
        <name>direction</name>
        <briefdescription>
<para>Generates a direction in radians. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the direction in radians </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="332" column="1" bodyfile="necsim/NRrand.h" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a7c7a2dc1b3f14ebaaa0e6edd6c1d517a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRrand::event</definition>
        <argsstring>(double event_probability)</argsstring>
        <name>event</name>
        <param>
          <type>double</type>
          <declname>event_probability</declname>
        </param>
        <briefdescription>
<para>For a given event probability, returns the probability that the event has occured. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_probability</parametername>
</parameternamelist>
<parameterdescription>
<para>the event probability. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether or not the event has occured. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="342" column="1" bodyfile="necsim/NRrand.h" bodystart="342" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1ab18277b2f873878602e82672b272c9be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::normUniform</definition>
        <argsstring>()</argsstring>
        <name>normUniform</name>
        <briefdescription>
<para>Normal distribution, with percentage chance to choose a uniform distribution instead. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function will not produce the same output as <ref refid="class_n_rrand_1aa57a6e9bae94c2df5a00473ba6fa900d" kindref="member">norm()</ref> for the same parameters, even with a zero chance of picking from the uniform distribution (due to random number draws). </para></simplesect>
<simplesect kind="return"><para>normally (or uniformly) distributed number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="366" column="1" bodyfile="necsim/NRrand.h" bodystart="366" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1ad8c9f54d596e01624505c765172d8328" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::normUniformMinDistance</definition>
        <argsstring>(const double &amp;min_distance)</argsstring>
        <name>normUniformMinDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Generates a random distance from a norm-uniform distribution, given that the distance is more than some minimum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to generate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random distance greater than the minimum provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="383" column="1" bodyfile="necsim/NRrand.h" bodystart="383" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1ac89740fa57b3f92e30ca46b3d467a480" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::uniform</definition>
        <argsstring>()</argsstring>
        <name>uniform</name>
        <briefdescription>
<para>Draws a random number from a uniform distribution between 0 and cutoff. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a random number in (0, cutoff) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="397" column="1" bodyfile="necsim/NRrand.h" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a34fb5fae8e81f5073b6ec63988338c07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::uniformMinDistance</definition>
        <argsstring>(const double &amp;min_distance)</argsstring>
        <name>uniformMinDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Generates a random distance from a uniform distribution, given that the distance is more than some minimum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to generate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random distance greater than the minimum provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="408" column="1" bodyfile="necsim/NRrand.h" bodystart="408" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a799f55c57dc238f094a20e882e3abb51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::uniformUniform</definition>
        <argsstring>()</argsstring>
        <name>uniformUniform</name>
        <briefdescription>
<para>Two uniform distributions, the first between 0 and 0.1*cutoff, and the second between 0.9*cutoff and cutoff. Selects from both distributions equally. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The mean for this function should be identical to a uniform distribution between 0 and cutoff. </para></simplesect>
<simplesect kind="return"><para>uniformly distributed number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="427" column="1" bodyfile="necsim/NRrand.h" bodystart="427" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a31cfb60ce2a776bb81479b80f585202f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::uniformUniformMinDistance</definition>
        <argsstring>(const double &amp;min_distance)</argsstring>
        <name>uniformUniformMinDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Generates a random distance from a uniform-uniform distribution, given that the distance is more than some minimum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to generate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random distance greater than the minimum provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="444" column="1" bodyfile="necsim/NRrand.h" bodystart="444" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a432b648073ccd3cb7f8215bb5c299619" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NRrand::setDispersalMethod</definition>
        <argsstring>(const string &amp;dispersal_method, const double &amp;m_probin, const double &amp;cutoffin)</argsstring>
        <name>setDispersalMethod</name>
        <param>
          <type>const string &amp;</type>
          <declname>dispersal_method</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>m_probin</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>cutoffin</declname>
        </param>
        <briefdescription>
<para>Sets the dispersal method by creating the link between dispersalFunction() and the correct dispersal character. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispersal_method</parametername>
</parameternamelist>
<parameterdescription>
<para>string containing the dispersal type. Can be one of [normal, fat-tail, norm-uniform] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m_probin</parametername>
</parameternamelist>
<parameterdescription>
<para>the probability of drawing from the uniform distribution. Only relevant for uniform dispersals. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cutoffin</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum value to be drawn from the uniform dispersal. Only relevant for uniform dispersals. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="465" column="1" bodyfile="necsim/NRrand.h" bodystart="465" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a1e15746ff8398488245b750325f37b08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::dispersal</definition>
        <argsstring>()</argsstring>
        <name>dispersal</name>
        <briefdescription>
<para>Runs the dispersal with the allocated dispersal function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function will never return a value larger than the size of LONG_MAX to avoid issues of converting doubles to integers. For dispersal distance within coalescence simulations, this is seemed a reasonable assumption, but may cause issues if code is re-used in later projects.</para></simplesect>
<simplesect kind="return"><para>distance the dispersal distance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="529" column="1" bodyfile="necsim/NRrand.h" bodystart="529" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a3cb0629d54b54865403738edd84ba883" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NRrand::dispersalMinDistance</definition>
        <argsstring>(const double &amp;min_distance)</argsstring>
        <name>dispersalMinDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Get a dispersal distance with some minimum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_distance</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum distance to disperse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the random dispersal distance greater than or equal to the minimum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="539" column="1" bodyfile="necsim/NRrand.h" bodystart="539" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="class_n_rrand_1a347f480f78917ebcc822f0f3b74825c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long NRrand::randomLogarithmic</definition>
        <argsstring>(long double alpha)</argsstring>
        <name>randomLogarithmic</name>
        <param>
          <type>long double</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Sample from a logarithmic distribution. </para>        </briefdescription>
        <detaileddescription>
<para>Uses the LK sampling method for generating random numbers from a logarithmic distribution, as described by Kemp (1981).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>alpha parameter for the logarithmic distribution </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the randomly generated logarithmic number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="553" column="1" bodyfile="necsim/NRrand.h" bodystart="553" bodyend="575"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_n_rrand_1a604ebc1c878ab63df21e123dbd34185f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const NRrand &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_n_rrand" kindref="compound">NRrand</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Outputs the <ref refid="class_n_rrand" kindref="compound">NRrand</ref> object to the output stream. Used for saving the object to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_n_rrand" kindref="compound">NRrand</ref> object to output. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="584" column="1" bodyfile="necsim/NRrand.h" bodystart="584" bodyend="602"/>
      </memberdef>
      <memberdef kind="friend" id="class_n_rrand_1a0b8544414e90bb92ba90afa881b1f06e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, NRrand &amp;r)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="class_n_rrand" kindref="compound">NRrand</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Inputs the <ref refid="class_n_rrand" kindref="compound">NRrand</ref> object from the input stream. Used for reading the <ref refid="class_n_rrand" kindref="compound">NRrand</ref> object from a file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_n_rrand" kindref="compound">NRrand</ref> object to input to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/NRrand.h" line="611" column="1" bodyfile="necsim/NRrand.h" bodystart="611" bodyend="646"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains the functions for random number generation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="necsim/NRrand.h" line="54" column="1" bodyfile="necsim/NRrand.h" bodystart="53" bodyend="647"/>
    <listofallmembers>
      <member refid="class_n_rrand_1a38507f8ce555ff8efd3f23d1b55bab68" prot="private" virt="non-virtual"><scope>NRrand</scope><name>cutoff</name></member>
      <member refid="class_n_rrand_1a0043ba1c33b3dcb3b98210fb432f9f6c" prot="public" virt="non-virtual"><scope>NRrand</scope><name>d01</name></member>
      <member refid="class_n_rrand_1aef021289f62893215204589af450bf65" prot="public" virt="non-virtual"><scope>NRrand</scope><name>direction</name></member>
      <member refid="class_n_rrand_1a1e15746ff8398488245b750325f37b08" prot="public" virt="non-virtual"><scope>NRrand</scope><name>dispersal</name></member>
      <member refid="class_n_rrand_1a62a731045ef34443e867b3659564e6d9" prot="private" virt="non-virtual"><scope>NRrand</scope><name>dispersalFunction</name></member>
      <member refid="class_n_rrand_1a7b63a0c9498ea9f2f6f2c96be4c5d8ca" prot="private" virt="non-virtual"><scope>NRrand</scope><name>dispersalFunctionMinDistance</name></member>
      <member refid="class_n_rrand_1a3cb0629d54b54865403738edd84ba883" prot="public" virt="non-virtual"><scope>NRrand</scope><name>dispersalMinDistance</name></member>
      <member refid="class_n_rrand_1a7c7a2dc1b3f14ebaaa0e6edd6c1d517a" prot="public" virt="non-virtual"><scope>NRrand</scope><name>event</name></member>
      <member refid="class_n_rrand_1a464101f3def678477f9156d0bd1aab54" prot="public" virt="non-virtual"><scope>NRrand</scope><name>fattail</name></member>
      <member refid="class_n_rrand_1a3ec8aae87ae486ddfb5ad481a7972c27" prot="public" virt="non-virtual"><scope>NRrand</scope><name>fattail</name></member>
      <member refid="class_n_rrand_1aab0ec97e2c0f74cf38cc7047356cae5c" prot="public" virt="non-virtual"><scope>NRrand</scope><name>fattail_old</name></member>
      <member refid="class_n_rrand_1a66a9362387e7421623d5e987a68b186e" prot="public" virt="non-virtual"><scope>NRrand</scope><name>fattailCDF</name></member>
      <member refid="class_n_rrand_1a67490e1351fd3f81d1e904a69e81ecdb" prot="public" virt="non-virtual"><scope>NRrand</scope><name>fattailMinDistance</name></member>
      <member refid="class_n_rrand_1ab3e0e4d3947232a533984c9d39d7c79e" prot="private" virt="non-virtual"><scope>NRrand</scope><name>fptr</name></member>
      <member refid="class_n_rrand_1a8fd49c6be5f3f68a5b366b0cfec4aa91" prot="private" virt="non-virtual"><scope>NRrand</scope><name>fptr2</name></member>
      <member refid="class_n_rrand_1abb6db53dd1fdd9388b39e5dcd26c13ac" prot="public" virt="non-virtual"><scope>NRrand</scope><name>i0</name></member>
      <member refid="class_n_rrand_1aeb21579db31d24957dc384b556b58036" prot="private" virt="non-virtual"><scope>NRrand</scope><name>idum</name></member>
      <member refid="class_n_rrand_1abac4e50326d4d0ea98b4ce200a811077" prot="private" virt="non-virtual"><scope>NRrand</scope><name>idum2</name></member>
      <member refid="class_n_rrand_1acf4be9e683753552ab13ab798a688216" prot="private" virt="non-virtual"><scope>NRrand</scope><name>iv</name></member>
      <member refid="class_n_rrand_1a3afc1d57ab124f11e9c2de15c57f0aec" prot="private" virt="non-virtual"><scope>NRrand</scope><name>iy</name></member>
      <member refid="class_n_rrand_1a6978a773da285910118adc42eb76ef25" prot="private" virt="non-virtual"><scope>NRrand</scope><name>j</name></member>
      <member refid="class_n_rrand_1a83a0f523589a5c29165590895b795007" prot="private" virt="non-virtual"><scope>NRrand</scope><name>k</name></member>
      <member refid="class_n_rrand_1a18e2282d3947ec16a78dc930a6afe786" prot="private" virt="non-virtual"><scope>NRrand</scope><name>lastresult</name></member>
      <member refid="class_n_rrand_1a96ac7234a8c5432273b69b5e3db2b495" prot="private" virt="non-virtual"><scope>NRrand</scope><name>m_prob</name></member>
      <member refid="class_n_rrand_1aa57a6e9bae94c2df5a00473ba6fa900d" prot="public" virt="non-virtual"><scope>NRrand</scope><name>norm</name></member>
      <member refid="class_n_rrand_1a6661c5558a907bad71db245226459ec3" prot="private" virt="non-virtual"><scope>NRrand</scope><name>normflag</name></member>
      <member refid="class_n_rrand_1ab18277b2f873878602e82672b272c9be" prot="public" virt="non-virtual"><scope>NRrand</scope><name>normUniform</name></member>
      <member refid="class_n_rrand_1ad8c9f54d596e01624505c765172d8328" prot="public" virt="non-virtual"><scope>NRrand</scope><name>normUniformMinDistance</name></member>
      <member refid="class_n_rrand_1a674521c4c29a6cb692f343ea9cf6a40c" prot="public" virt="non-virtual"><scope>NRrand</scope><name>NRrand</name></member>
      <member refid="class_n_rrand_1a604ebc1c878ab63df21e123dbd34185f" prot="public" virt="non-virtual"><scope>NRrand</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_n_rrand_1a0b8544414e90bb92ba90afa881b1f06e" prot="public" virt="non-virtual"><scope>NRrand</scope><name>operator&gt;&gt;</name></member>
      <member refid="class_n_rrand_1a347f480f78917ebcc822f0f3b74825c3" prot="public" virt="non-virtual"><scope>NRrand</scope><name>randomLogarithmic</name></member>
      <member refid="class_n_rrand_1a39576a34204f90b6cda7dfd92561c0b0" prot="public" virt="non-virtual"><scope>NRrand</scope><name>rayleigh</name></member>
      <member refid="class_n_rrand_1a2723a59dd63c61886238c2d466831985" prot="public" virt="non-virtual"><scope>NRrand</scope><name>rayleighCDF</name></member>
      <member refid="class_n_rrand_1aefdaf5521b01658bdd1c206bbe1e855f" prot="public" virt="non-virtual"><scope>NRrand</scope><name>rayleighMinDist</name></member>
      <member refid="class_n_rrand_1a5241fca3dd4bd50fa2a5a1d88d2a9b0e" prot="private" virt="non-virtual"><scope>NRrand</scope><name>seeded</name></member>
      <member refid="class_n_rrand_1a432b648073ccd3cb7f8215bb5c299619" prot="public" virt="non-virtual"><scope>NRrand</scope><name>setDispersalMethod</name></member>
      <member refid="class_n_rrand_1a5679f458940de730f527772ca27db5ad" prot="public" virt="non-virtual"><scope>NRrand</scope><name>setDispersalParams</name></member>
      <member refid="class_n_rrand_1a23325b4d35ee0b5b580726db05e2b8a3" prot="public" virt="non-virtual"><scope>NRrand</scope><name>setSeed</name></member>
      <member refid="class_n_rrand_1aa1d194b8e3a49f08745434c762370623" prot="private" virt="non-virtual"><scope>NRrand</scope><name>sigma</name></member>
      <member refid="class_n_rrand_1adaa2f871531a1fdeff8016f658b9175e" prot="private" virt="non-virtual"><scope>NRrand</scope><name>tau</name></member>
      <member refid="class_n_rrand_1a98d56cd4a8d07d259ebd77c91cde3f5d" prot="private" virt="non-virtual"><scope>NRrand</scope><name>temp</name></member>
      <member refid="class_n_rrand_1ac89740fa57b3f92e30ca46b3d467a480" prot="public" virt="non-virtual"><scope>NRrand</scope><name>uniform</name></member>
      <member refid="class_n_rrand_1a34fb5fae8e81f5073b6ec63988338c07" prot="public" virt="non-virtual"><scope>NRrand</scope><name>uniformMinDistance</name></member>
      <member refid="class_n_rrand_1a799f55c57dc238f094a20e882e3abb51" prot="public" virt="non-virtual"><scope>NRrand</scope><name>uniformUniform</name></member>
      <member refid="class_n_rrand_1a31cfb60ce2a776bb81479b80f585202f" prot="public" virt="non-virtual"><scope>NRrand</scope><name>uniformUniformMinDistance</name></member>
      <member refid="class_n_rrand_1a34238557ccd72ee3e58712b7140a649a" prot="public" virt="non-virtual"><scope>NRrand</scope><name>wipeSeed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
