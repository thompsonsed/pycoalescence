<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_c_community_8h" kind="file" language="C++">
    <compoundname>CCommunity.h</compoundname>
    <includes local="no">Python.h</includes>
    <includes local="no">string</includes>
    <includes local="no">structmember.h</includes>
    <includes local="no">memory</includes>
    <includes refid="_py_imports_8h" local="yes">PyImports.h</includes>
    <includes local="yes">necsim/Community.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">sqlite3.h</includes>
    <includes local="no">cstring</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">boost/filesystem.hpp</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes local="no">set</includes>
    <includes local="no">utility</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/TreeNode.h</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Logging.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Logger.h</includes>
    <includes local="no">sstream</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/LogFile.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">ctime</includes>
    <includes local="no">map</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/cpl_custom_handler.h</includes>
    <includes local="no">cpl_error.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Matrix.h</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">vector</includes>
    <includes local="no">cstdint</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/DataMask.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/SimParameters.h</includes>
    <includes local="no">queue</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/ConfigParser.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">cctype</includes>
    <includes local="no">algorithm</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/custom_exceptions.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/file_system.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/double_comparison.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Map.h</includes>
    <includes local="no">gdal_priv.h</includes>
    <includes local="no">cpl_conv.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/parameters.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/SpecSimParameters.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/SQLiteHandler.h</includes>
    <includes local="yes">necsim/Metacommunity.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Community.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Tree.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/RNGController.h</includes>
    <includes local="no">climits</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Xoroshiro256plus.h</includes>
    <includes local="no">array</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/DataPoint.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Step.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Cell.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/MapLocation.h</includes>
    <includes local="yes">/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/SpeciesAbundancesHandler.h</includes>
    <includes refid="_py_templates_8h" local="yes">PyTemplates.h</includes>
    <includes refid="necsim_8h" local="yes">necsim.h</includes>
    <includedby refid="necsim_8cpp" local="yes">necsim.cpp</includedby>
    <incdepgraph>
      <node id="2481">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Logging.h</label>
      </node>
      <node id="2460">
        <label>CCommunity.h</label>
        <link refid="_c_community_8h"/>
        <childnode refid="2461" relation="include">
        </childnode>
        <childnode refid="2462" relation="include">
        </childnode>
        <childnode refid="2463" relation="include">
        </childnode>
        <childnode refid="2464" relation="include">
        </childnode>
        <childnode refid="2465" relation="include">
        </childnode>
        <childnode refid="2469" relation="include">
        </childnode>
        <childnode refid="2470" relation="include">
        </childnode>
        <childnode refid="2471" relation="include">
        </childnode>
        <childnode refid="2472" relation="include">
        </childnode>
        <childnode refid="2473" relation="include">
        </childnode>
        <childnode refid="2474" relation="include">
        </childnode>
        <childnode refid="2475" relation="include">
        </childnode>
        <childnode refid="2476" relation="include">
        </childnode>
        <childnode refid="2466" relation="include">
        </childnode>
        <childnode refid="2477" relation="include">
        </childnode>
        <childnode refid="2478" relation="include">
        </childnode>
        <childnode refid="2479" relation="include">
        </childnode>
        <childnode refid="2480" relation="include">
        </childnode>
        <childnode refid="2481" relation="include">
        </childnode>
        <childnode refid="2482" relation="include">
        </childnode>
        <childnode refid="2483" relation="include">
        </childnode>
        <childnode refid="2484" relation="include">
        </childnode>
        <childnode refid="2485" relation="include">
        </childnode>
        <childnode refid="2486" relation="include">
        </childnode>
        <childnode refid="2487" relation="include">
        </childnode>
        <childnode refid="2488" relation="include">
        </childnode>
        <childnode refid="2489" relation="include">
        </childnode>
        <childnode refid="2490" relation="include">
        </childnode>
        <childnode refid="2491" relation="include">
        </childnode>
        <childnode refid="2467" relation="include">
        </childnode>
        <childnode refid="2492" relation="include">
        </childnode>
        <childnode refid="2493" relation="include">
        </childnode>
        <childnode refid="2494" relation="include">
        </childnode>
        <childnode refid="2495" relation="include">
        </childnode>
        <childnode refid="2496" relation="include">
        </childnode>
        <childnode refid="2497" relation="include">
        </childnode>
        <childnode refid="2498" relation="include">
        </childnode>
        <childnode refid="2499" relation="include">
        </childnode>
        <childnode refid="2500" relation="include">
        </childnode>
        <childnode refid="2501" relation="include">
        </childnode>
        <childnode refid="2502" relation="include">
        </childnode>
        <childnode refid="2503" relation="include">
        </childnode>
        <childnode refid="2504" relation="include">
        </childnode>
        <childnode refid="2505" relation="include">
        </childnode>
        <childnode refid="2506" relation="include">
        </childnode>
        <childnode refid="2507" relation="include">
        </childnode>
        <childnode refid="2508" relation="include">
        </childnode>
        <childnode refid="2509" relation="include">
        </childnode>
        <childnode refid="2510" relation="include">
        </childnode>
        <childnode refid="2511" relation="include">
        </childnode>
        <childnode refid="2512" relation="include">
        </childnode>
        <childnode refid="2513" relation="include">
        </childnode>
        <childnode refid="2514" relation="include">
        </childnode>
        <childnode refid="2515" relation="include">
        </childnode>
        <childnode refid="2516" relation="include">
        </childnode>
        <childnode refid="2517" relation="include">
        </childnode>
        <childnode refid="2518" relation="include">
        </childnode>
        <childnode refid="2519" relation="include">
        </childnode>
        <childnode refid="2520" relation="include">
        </childnode>
        <childnode refid="2521" relation="include">
        </childnode>
        <childnode refid="2522" relation="include">
        </childnode>
      </node>
      <node id="2463">
        <label>structmember.h</label>
      </node>
      <node id="2508">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/SQLiteHandler.h</label>
      </node>
      <node id="2480">
        <label>iomanip</label>
      </node>
      <node id="2495">
        <label>queue</label>
      </node>
      <node id="2511">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Tree.h</label>
      </node>
      <node id="2519">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/MapLocation.h</label>
      </node>
      <node id="2475">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="2492">
        <label>cstdint</label>
      </node>
      <node id="2494">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/SimParameters.h</label>
      </node>
      <node id="2514">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Xoroshiro256plus.h</label>
      </node>
      <node id="2510">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Community.h</label>
      </node>
      <node id="2507">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/SpecSimParameters.h</label>
      </node>
      <node id="2501">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/file_system.h</label>
      </node>
      <node id="2506">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/parameters.h</label>
      </node>
      <node id="2470">
        <label>cmath</label>
      </node>
      <node id="2473">
        <label>stdexcept</label>
      </node>
      <node id="2484">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/LogFile.h</label>
      </node>
      <node id="2462">
        <label>string</label>
      </node>
      <node id="2518">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Cell.h</label>
      </node>
      <node id="2504">
        <label>gdal_priv.h</label>
      </node>
      <node id="2487">
        <label>map</label>
      </node>
      <node id="2488">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/cpl_custom_handler.h</label>
      </node>
      <node id="2471">
        <label>sqlite3.h</label>
      </node>
      <node id="2485">
        <label>fstream</label>
      </node>
      <node id="2509">
        <label>necsim/Metacommunity.h</label>
      </node>
      <node id="2477">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/TreeNode.h</label>
      </node>
      <node id="2490">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Matrix.h</label>
      </node>
      <node id="2502">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/double_comparison.h</label>
      </node>
      <node id="2520">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/SpeciesAbundancesHandler.h</label>
      </node>
      <node id="2482">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Logger.h</label>
      </node>
      <node id="2503">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Map.h</label>
      </node>
      <node id="2496">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/ConfigParser.h</label>
      </node>
      <node id="2478">
        <label>cstdio</label>
      </node>
      <node id="2516">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/DataPoint.h</label>
      </node>
      <node id="2469">
        <label>necsim/Community.h</label>
      </node>
      <node id="2486">
        <label>ctime</label>
      </node>
      <node id="2461">
        <label>Python.h</label>
      </node>
      <node id="2497">
        <label>unistd.h</label>
      </node>
      <node id="2467">
        <label>vector</label>
      </node>
      <node id="2474">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="2466">
        <label>utility</label>
      </node>
      <node id="2515">
        <label>array</label>
      </node>
      <node id="2512">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/RNGController.h</label>
      </node>
      <node id="2483">
        <label>sstream</label>
      </node>
      <node id="2500">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/custom_exceptions.h</label>
      </node>
      <node id="2468">
        <label>necsim/Cell.h</label>
      </node>
      <node id="2491">
        <label>cstdlib</label>
      </node>
      <node id="2498">
        <label>cctype</label>
      </node>
      <node id="2479">
        <label>iostream</label>
      </node>
      <node id="2513">
        <label>climits</label>
      </node>
      <node id="2465">
        <label>PyImports.h</label>
        <link refid="_py_imports_8h_source"/>
        <childnode refid="2461" relation="include">
        </childnode>
        <childnode refid="2466" relation="include">
        </childnode>
        <childnode refid="2467" relation="include">
        </childnode>
        <childnode refid="2462" relation="include">
        </childnode>
        <childnode refid="2468" relation="include">
        </childnode>
      </node>
      <node id="2522">
        <label>necsim.h</label>
        <link refid="necsim_8h_source"/>
        <childnode refid="2461" relation="include">
        </childnode>
        <childnode refid="2467" relation="include">
        </childnode>
        <childnode refid="2462" relation="include">
        </childnode>
      </node>
      <node id="2489">
        <label>cpl_error.h</label>
      </node>
      <node id="2521">
        <label>PyTemplates.h</label>
        <link refid="_py_templates_8h_source"/>
        <childnode refid="2461" relation="include">
        </childnode>
        <childnode refid="2463" relation="include">
        </childnode>
        <childnode refid="2464" relation="include">
        </childnode>
        <childnode refid="2465" relation="include">
        </childnode>
      </node>
      <node id="2476">
        <label>set</label>
      </node>
      <node id="2517">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/Step.h</label>
      </node>
      <node id="2499">
        <label>algorithm</label>
      </node>
      <node id="2505">
        <label>cpl_conv.h</label>
      </node>
      <node id="2493">
        <label>/home/sam/Documents/PhD/Code/pycoalescence/pycoalescence/lib/necsim/DataMask.h</label>
      </node>
      <node id="2472">
        <label>cstring</label>
      </node>
      <node id="2464">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_py_community_template" prot="public">PyCommunityTemplate</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_c_community_8h_1a68c4bfc1e5bd0f7b75d6338a4b13cac6" prot="public" static="yes" mutable="no">
        <type>PyTypeObject</type>
        <definition>PyTypeObject C_CommunityType</definition>
        <argsstring></argsstring>
        <name>C_CommunityType</name>
        <initializer>= genCommunityType&lt;<ref refid="classnecsim_1_1_community" kindref="compound">Community</ref>&gt;((char*) &quot;libnecsim.CCommunity&quot;,
                                                      (char*) &quot;C class for generating communities from neutral simulations&quot;)</initializer>
        <briefdescription>
<para>The type object containing the Community to pass on to Python. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="412" column="1" bodyfile="CCommunity.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_c_community_8h_1aaeb800bbf9821f0f36cad0a00abd1f80" prot="public" static="yes" mutable="no">
        <type>PyTypeObject</type>
        <definition>PyTypeObject C_MetacommunityType</definition>
        <argsstring></argsstring>
        <name>C_MetacommunityType</name>
        <initializer>= genCommunityType&lt;<ref refid="classnecsim_1_1_metacommunity" kindref="compound">Metacommunity</ref>&gt;((char*) &quot;libnecsim.CMetacommunity&quot;,
                                                                          (char*) &quot;C class for generating communities from neutral simulations&quot;)</initializer>
        <briefdescription>
<para>The type object containing the Metacommunity to pass on to Python. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="418" column="1" bodyfile="CCommunity.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_c_community_8h_1abc7dbff23a85753456bb7f9140e7a8ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyObject *</type>
        <definition>static PyObject* setupApplySpeciation</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self, PyObject *args)</argsstring>
        <name>setupApplySpeciation</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Sets up the speciation parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the Community </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to the Python self object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the arguments to pass </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_RETURN_NONE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="46" column="1" bodyfile="CCommunity.h" bodystart="46" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a1f8271f44934647e7a632e54886cf2ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyObject *</type>
        <definition>static PyObject* addTime</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self, PyObject *args)</argsstring>
        <name>addTime</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Adds a time to the speciation parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the Community </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to the Python self object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the arguments to pass </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_RETURN_NONE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="99" column="1" bodyfile="CCommunity.h" bodystart="99" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a7158dc626fa3755275e6a82dbd243080" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyObject *</type>
        <definition>static PyObject* addProtractedParameters</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self, PyObject *args)</argsstring>
        <name>addProtractedParameters</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Adds a set of protracted parameters to the speciation parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the Community </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to the Python self object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the arguments to pass </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_RETURN_NONE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="128" column="1" bodyfile="CCommunity.h" bodystart="128" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a0693dd618bc17bb176194223dbc5ac44" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyObject *</type>
        <definition>static PyObject* pyAddMetacommunityParameters</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self, PyObject *args)</argsstring>
        <name>pyAddMetacommunityParameters</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Adds a set of metacommunity parameters to the speciation parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the Community </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to the Python self object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the arguments to pass </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_RETURN_NONE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="157" column="1" bodyfile="CCommunity.h" bodystart="157" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a3233fe6d026603e71513b788e4079187" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyObject *</type>
        <definition>static PyObject* wipeProtractedParameters</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self)</argsstring>
        <name>wipeProtractedParameters</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Wipes the protracted parameters vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the Community </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to the Python self object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_RETURN_NONE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="190" column="1" bodyfile="CCommunity.h" bodystart="190" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a5ead9f33e67e11b4bad1e4c73a7f7460" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyObject *</type>
        <definition>static PyObject* apply</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self)</argsstring>
        <name>apply</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Applies the speciation parameters to the coalescence tree to generate the community. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the Community </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to the Python self object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_RETURN_NONE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="213" column="1" bodyfile="CCommunity.h" bodystart="213" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a5a5e69c263db112d29cc2fe41a0a9f29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyObject *</type>
        <definition>static PyObject* output</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self)</argsstring>
        <name>output</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Outputs the community to database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the Community </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to the Python self object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_RETURN_NONE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="238" column="1" bodyfile="CCommunity.h" bodystart="238" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a8d641f852eb1599cc34489c83a77e0b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyObject *</type>
        <definition>static PyObject* reset</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self)</argsstring>
        <name>reset</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Resets the internal community object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the Community </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to the Python self object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_RETURN_NONE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="263" column="1" bodyfile="CCommunity.h" bodystart="263" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1aa611507695b100eb3df24868c962ba48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyObject *</type>
        <definition>static PyObject* pySpeciateRemainingLineages</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self, PyObject *args)</argsstring>
        <name>pySpeciateRemainingLineages</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="286" column="1" bodyfile="CCommunity.h" bodystart="286" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a1821b40c86cdfd4ebbf1b27b45a29b94" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void PyCommunity_dealloc</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self)</argsstring>
        <name>PyCommunity_dealloc</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="310" column="1" bodyfile="CCommunity.h" bodystart="310" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a73dfa12ab7dff1a51d4195e438c6352d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>static int PyCommunity_init</definition>
        <argsstring>(PyCommunityTemplate&lt; T &gt; *self, PyObject *args, PyObject *kwds)</argsstring>
        <name>PyCommunity_init</name>
        <param>
          <type><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref>&lt; T &gt; *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>kwds</declname>
        </param>
        <briefdescription>
<para>Initialises the Community object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the template type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>the Python self object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to pass to constructor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kwds</parametername>
</parameternamelist>
<parameterdescription>
<para>keyword arguments to pass to constructor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="330" column="1" bodyfile="CCommunity.h" bodystart="330" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a3cdc099ed6706ea0281a2b753f0891e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyMethodDef *</type>
        <definition>PyMethodDef* genCommunityMethods</definition>
        <argsstring>()</argsstring>
        <name>genCommunityMethods</name>
        <briefdescription>
<para>Methods associated with the Python CCommunity object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the Community </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="341" column="1" bodyfile="CCommunity.h" bodystart="341" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a649144dd6457e0e55b7fe77bfdd641a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyTypeObject</type>
        <definition>static PyTypeObject genCommunityType</definition>
        <argsstring>(char *tp_name, char *tp_doc)</argsstring>
        <name>genCommunityType</name>
        <param>
          <type>char *</type>
          <declname>tp_name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>tp_doc</declname>
        </param>
        <briefdescription>
<para>Generates the community type using the object name and description. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the C++ class to generate a Python object for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tp_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the Python class name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tp_doc</parametername>
</parameternamelist>
<parameterdescription>
<para>the Python documentation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="374" column="1" bodyfile="CCommunity.h" bodystart="374" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="_c_community_8h_1a7a905b7f80ed254393e458210b1aa35f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>PyTypeObject</type>
        <definition>static PyTypeObject genCommunityType</definition>
        <argsstring>(string tp_name, string tp_doc)</argsstring>
        <name>genCommunityType</name>
        <param>
          <type>string</type>
          <declname>tp_name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>tp_doc</declname>
        </param>
        <briefdescription>
<para>Generates the community type using the object name and description. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the C++ class to generate a Python object for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tp_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the Python class name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tp_doc</parametername>
</parameternamelist>
<parameterdescription>
<para>the Python documentation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CCommunity.h" line="403" column="1" bodyfile="CCommunity.h" bodystart="403" bodyend="406"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wraps the various C++ community objects for accessing via Python. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Samuel Thompson</para>
</simplesect>
<simplesect kind="copyright"><para><ulink url="https://opensource.org/licenses/MIT">MIT Licence.</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>necsim<sp/>project<sp/>which<sp/>is<sp/>released<sp/>under<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>**LICENSE.txt**<sp/>or<sp/>visit<sp/>https://opensource.org/licenses/MIT)<sp/>for<sp/>full<sp/>license<sp/>details</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#ifndef<sp/>NECSIM_C_COMMUNITY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NECSIM_C_COMMUNITY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Python.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;structmember.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PyImports.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;necsim/Community.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;necsim/Metacommunity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PyTemplates.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;necsim.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">necsim;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="32" refid="class_py_community_template" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_py_template" kindref="compound">PyTemplate</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_ptr&lt;SpecSimParameters&gt;<sp/>specSimParameters;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>setupApplySpeciation(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject*<sp/>args)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>database;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>record_spatial;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sample_file;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fragment_file;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>list_speciation_rates;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>list_times;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;sissO!O!|kdsk&quot;</highlight><highlight class="normal">,<sp/>&amp;database,<sp/>&amp;record_spatial,<sp/>&amp;sample_file,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;fragment_file,<sp/>&amp;PyList_Type,<sp/>&amp;list_speciation_rates,<sp/>&amp;PyList_Type,<sp/>&amp;list_times))</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>getGlobalLogger(self-&gt;logger,<sp/>self-&gt;log_function);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>all<sp/>our<sp/>variables<sp/>to<sp/>the<sp/>relevant<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>database_str<sp/>=<sp/>database;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>use_spatial<sp/>=<sp/>static_cast&lt;bool&gt;(record_spatial);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sample_file_str<sp/>=<sp/>sample_file;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>fragment_file_str<sp/>=<sp/>fragment_file;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>speciation_rates;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>times;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!importPyListToVectorDouble(list_speciation_rates,<sp/>speciation_rates,<sp/></highlight><highlight class="stringliteral">&quot;Speciation<sp/>rates<sp/>must<sp/>be<sp/>floats.&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!importPyListToVectorDouble(list_times,<sp/>times,<sp/></highlight><highlight class="stringliteral">&quot;Times<sp/>must<sp/>be<sp/>floats.&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;specSimParameters-&gt;setup(std::move(database_str),<sp/>use_spatial,<sp/>sample_file_str,<sp/>times,<sp/>fragment_file_str,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>speciation_rates);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception<sp/>&amp;e)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeGlobalLogger();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(necsimError,<sp/>e.what());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>addTime(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject*<sp/>args)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/>&amp;time))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getGlobalLogger(self-&gt;logger,<sp/>self-&gt;log_function);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;specSimParameters-&gt;addTime(time);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception<sp/>&amp;e)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeGlobalLogger();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(necsimError,<sp/>e.what());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>addProtractedParameters(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject*<sp/>args)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>proc_min,<sp/>proc_max;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;dd&quot;</highlight><highlight class="normal">,<sp/>&amp;proc_min,<sp/>&amp;proc_max))</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getGlobalLogger(self-&gt;logger,<sp/>self-&gt;log_function);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;specSimParameters-&gt;addProtractedParameters(proc_min,<sp/>proc_max);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception<sp/>&amp;e)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeGlobalLogger();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(necsimError,<sp/>e.what());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>pyAddMetacommunityParameters(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject*<sp/>args)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>metacommunity_size;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>speciation_rate;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>metacommunity_option;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>metacommunity_reference;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;kdsk&quot;</highlight><highlight class="normal">,<sp/>&amp;metacommunity_size,<sp/>&amp;speciation_rate,<sp/>&amp;metacommunity_option,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;metacommunity_reference))</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getGlobalLogger(self-&gt;logger,<sp/>self-&gt;log_function);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;specSimParameters-&gt;addMetacommunityParameters(metacommunity_size,<sp/>speciation_rate,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metacommunity_option,<sp/>metacommunity_reference);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception<sp/>&amp;e)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeGlobalLogger();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(necsimError,<sp/>e.what());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>wipeProtractedParameters(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getGlobalLogger(self-&gt;logger,<sp/>self-&gt;log_function);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;specSimParameters-&gt;protracted_parameters.clear();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception<sp/>&amp;e)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeGlobalLogger();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(necsimError,<sp/>e.what());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>apply(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>run<sp/>the<sp/>actual<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getGlobalLogger(self-&gt;logger,<sp/>self-&gt;log_function);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;base_object-&gt;Community::applyNoOutput(self-&gt;specSimParameters);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception<sp/>&amp;e)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeGlobalLogger();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(necsimError,<sp/>e.what());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>output(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>run<sp/>the<sp/>actual<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getGlobalLogger(self-&gt;logger,<sp/>self-&gt;log_function);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;base_object-&gt;output();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception<sp/>&amp;e)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeGlobalLogger();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(necsimError,<sp/>e.what());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>reset(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>run<sp/>the<sp/>actual<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getGlobalLogger(self-&gt;logger,<sp/>self-&gt;log_function);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(self-&gt;base_object<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;base_object.reset();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;base_object<sp/>=<sp/>make_unique&lt;T&gt;();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception<sp/>&amp;e)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeGlobalLogger();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(necsimError,<sp/>e.what());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>pySpeciateRemainingLineages(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject*<sp/>args)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>database_char;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/>&amp;database_char))</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>database_str(database_char);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getGlobalLogger(self-&gt;logger,<sp/>self-&gt;log_function);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;base_object-&gt;speciateRemainingLineages(database_str);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception<sp/>&amp;e)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeGlobalLogger();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(necsimError,<sp/>e.what());</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">PyCommunity_dealloc(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(self-&gt;specSimParameters<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;specSimParameters.reset();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;specSimParameters<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTemplate_dealloc&lt;T&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">PyCommunity_init(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject*<sp/>args,<sp/>PyObject*<sp/>kwds)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;specSimParameters<sp/>=<sp/>make_shared&lt;SpecSimParameters&gt;();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyTemplate_init&lt;T&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>args,<sp/>kwds);</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="341"><highlight class="normal">PyMethodDef*<sp/>genCommunityMethods()</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>CommunityMethods[]<sp/>=</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;setup&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyCFunction)<sp/>setupApplySpeciation&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>METH_VARARGS,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sets<sp/>the<sp/>speciation<sp/>current_metacommunity_parameters<sp/>to<sp/>be<sp/>applied<sp/>to<sp/>the<sp/>tree.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;add_time&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyCFunction)<sp/>addTime&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>METH_VARARGS,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Adds<sp/>a<sp/>time<sp/>to<sp/>apply<sp/>to<sp/>the<sp/>simulation.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;wipe_protracted_parameters&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>(PyCFunction)<sp/>wipeProtractedParameters&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/>METH_NOARGS,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Wipes<sp/>the<sp/>protracted<sp/>current_metacommunity_parameters.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;add_protracted_parameters&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>(PyCFunction)<sp/>addProtractedParameters&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/>METH_VARARGS,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Adds<sp/>protracted<sp/>speciation<sp/>current_metacommunity_parameters<sp/>to<sp/>apply<sp/>to<sp/>the<sp/>simulation.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;add_metacommunity_parameters&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)<sp/>pyAddMetacommunityParameters&lt;T&gt;,<sp/>METH_VARARGS,<sp/></highlight><highlight class="stringliteral">&quot;Adds<sp/>metacommunity<sp/>current_metacommunity_parameters<sp/>to<sp/>be<sp/>applied&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;apply&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyCFunction)<sp/>apply&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>METH_NOARGS,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Applies<sp/>the<sp/>new<sp/>speciation<sp/>rate(s)<sp/>to<sp/>the<sp/>coalescence<sp/>tree.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;output&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyCFunction)<sp/>output&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>METH_NOARGS,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Outputs<sp/>the<sp/>database<sp/>to<sp/>file.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;reset&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyCFunction)<sp/>reset&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>METH_NOARGS,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Resets<sp/>the<sp/>internal<sp/>object.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;speciate_remaining_lineages&quot;</highlight><highlight class="normal">,<sp/><sp/>(PyCFunction)<sp/>pySpeciateRemainingLineages&lt;T&gt;,<sp/><sp/>METH_VARARGS,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Speciates<sp/>the<sp/>remaining<sp/>lineages<sp/>in<sp/>a<sp/>paused<sp/>simulation<sp/>to<sp/>force<sp/>it<sp/>to<sp/>appear<sp/>complete&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CommunityMethods;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>genCommunityType(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tp_name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tp_doc)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject<sp/>ret_Community_Type<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyVarObject_HEAD_INIT(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_name<sp/>=<sp/>tp_name;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_doc<sp/>=<sp/>tp_doc;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_basicsize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_py_community_template" kindref="compound">PyCommunityTemplate&lt;T&gt;</ref>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_itemsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_flags<sp/>=<sp/>Py_TPFLAGS_DEFAULT<sp/>|<sp/>Py_TPFLAGS_BASETYPE<sp/>|<sp/>Py_TPFLAGS_HAVE_GC;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_new<sp/>=<sp/>PyTemplate_new&lt;T&gt;;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_init<sp/>=<sp/>(initproc)<sp/>PyCommunity_init&lt;T&gt;;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_dealloc<sp/>=<sp/>(destructor)<sp/>PyCommunity_dealloc&lt;T&gt;;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_traverse<sp/>=<sp/>(traverseproc)<sp/>PyTemplate_traverse&lt;T&gt;;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>.tp_members<sp/>=<sp/>PyTemplate_members&lt;T&gt;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_methods<sp/>=<sp/>genCommunityMethods&lt;T&gt;();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_Community_Type.tp_getset<sp/>=<sp/>PyTemplate_gen_getsetters&lt;T&gt;();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>static<sp/>PyTypeObject<sp/>outType<sp/>=<sp/>ret_Community_Type;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret_Community_Type;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>genCommunityType(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>tp_name,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>tp_doc)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>genCommunityType&lt;T&gt;(const_cast&lt;char*&gt;(tp_name.c_str()),<sp/>const_cast&lt;char*&gt;(tp_doc.c_str()));</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_CommunityType<sp/>=<sp/>genCommunityType&lt;Community&gt;((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;libnecsim.CCommunity&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;C<sp/>class<sp/>for<sp/>generating<sp/>communities<sp/>from<sp/>neutral<sp/>simulations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>C_MetacommunityType<sp/>=<sp/>genCommunityType&lt;Metacommunity&gt;((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;libnecsim.CMetacommunity&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;C<sp/>class<sp/>for<sp/>generating<sp/>communities<sp/>from<sp/>neutral<sp/>simulations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//NECSIM_C_COMMUNITY_H</highlight></codeline>
    </programlisting>
    <location file="CCommunity.h"/>
  </compounddef>
</doxygen>
