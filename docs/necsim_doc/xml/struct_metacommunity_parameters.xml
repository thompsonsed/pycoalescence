<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="struct_metacommunity_parameters" kind="struct" language="C++" prot="public">
    <compoundname>MetacommunityParameters</compoundname>
    <includes refid="parameters_8h" local="no">parameters.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_metacommunity_parameters_1af6c04331c114ae95467ff2301789a67b" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long MetacommunityParameters::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="205" column="1" bodyfile="necsim/parameters.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_metacommunity_parameters_1a92d44abb439daab624572ed7f9199ab4" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long MetacommunityParameters::metacommunity_size</definition>
        <argsstring></argsstring>
        <name>metacommunity_size</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="206" column="1" bodyfile="necsim/parameters.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_metacommunity_parameters_1a6ad494c076296c0eac963facca209430" prot="public" static="no" mutable="no">
        <type>long double</type>
        <definition>long double MetacommunityParameters::speciation_rate</definition>
        <argsstring></argsstring>
        <name>speciation_rate</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="207" column="1" bodyfile="necsim/parameters.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_metacommunity_parameters_1a26315e37aafdc4031bb3ba10d3a1c30c" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string MetacommunityParameters::option</definition>
        <argsstring></argsstring>
        <name>option</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="208" column="1" bodyfile="necsim/parameters.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_metacommunity_parameters_1a921f76a25b723959f7b019ac80afc670" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long MetacommunityParameters::external_reference</definition>
        <argsstring></argsstring>
        <name>external_reference</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="209" column="1" bodyfile="necsim/parameters.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_metacommunity_parameters_1a32d0649a8da47daab2a0743e2febf6ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MetacommunityParameters::MetacommunityParameters</definition>
        <argsstring>()</argsstring>
        <name>MetacommunityParameters</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="214" column="1" bodyfile="necsim/parameters.cpp" bodystart="146" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunity_parameters_1acc6a3f79a1b21bd670c32914dc33339f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MetacommunityParameters::~MetacommunityParameters</definition>
        <argsstring>()=default</argsstring>
        <name>~MetacommunityParameters</name>
        <briefdescription>
<para>Trivial destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunity_parameters_1a104b77bbfa104aac5eaa6f45292cac7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MetacommunityParameters::MetacommunityParameters</definition>
        <argsstring>(const unsigned long &amp;reference_in, const unsigned long &amp;metacommunity_size_in, const long double &amp;speciation_rate_in, const string &amp;option_in, const unsigned long &amp;external_reference_in)</argsstring>
        <name>MetacommunityParameters</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>reference_in</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>metacommunity_size_in</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate_in</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option_in</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>external_reference_in</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref>, storing a previously applied metacommunity. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity reference number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate used for metacommunity generation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_rate_in</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the tested metacommunity </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="229" column="1" bodyfile="necsim/parameters.cpp" bodystart="155" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunity_parameters_1a92e6d9292308fdd5aeceda97c20554ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MetacommunityParameters::compare</definition>
        <argsstring>(unsigned long metacommunity_size_in, long double speciation_rate_in, const string &amp;option_in, const unsigned long &amp;ext_reference_in)</argsstring>
        <name>compare</name>
        <param>
          <type>unsigned long</type>
          <declname>metacommunity_size_in</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>speciation_rate_in</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option_in</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>ext_reference_in</declname>
        </param>
        <briefdescription>
<para>Compare these set of parameters with the input set. If they match, return true, otherwise return false. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate_in</parametername>
</parameternamelist>
<parameterdescription>
<para>speciation rate to compare with stored community parameter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size_in</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the tested metacommunity </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the two parameter sets are identical </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="241" column="1" bodyfile="necsim/parameters.cpp" bodystart="167" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunity_parameters_1a9aaabd56315e4efa98466eb7ddecab06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MetacommunityParameters::compare</definition>
        <argsstring>(const MetacommunityParameters &amp;metacomm_in)</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>metacomm_in</declname>
        </param>
        <briefdescription>
<para>Compare these set of parameters with the input set. If they match, return true, otherwise return false. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metacomm_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the two parameter sets are identical </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="249" column="1" bodyfile="necsim/parameters.cpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunity_parameters_1a5b8597643984dd783a4275d93ce0b7cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MetacommunityParameters::compare</definition>
        <argsstring>(unsigned long reference_in)</argsstring>
        <name>compare</name>
        <param>
          <type>unsigned long</type>
          <declname>reference_in</declname>
        </param>
        <briefdescription>
<para>Checks if the supplied reference is the same in the metacommunity reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to check against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="256" column="1" bodyfile="necsim/parameters.cpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunity_parameters_1a01d2874885c2bc6622d46c519156c7e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MetacommunityParameters::isMetacommunityOption</definition>
        <argsstring>() const </argsstring>
        <name>isMetacommunityOption</name>
        <briefdescription>
<para>Checks if this combination of metacommunity parameters is not a null option. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the combination is valid (i.e. not null) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="262" column="1" bodyfile="necsim/parameters.cpp" bodystart="192" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunity_parameters_1a6f74de64524f1e07ec001f11d21cf1f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MetacommunityParameters::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Wipes the metacommunity parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="267" column="1" bodyfile="necsim/parameters.cpp" bodystart="214" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunity_parameters_1a198c799e7f0d1ae1a6a1ebd7ebcf42cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
        <definition>MetacommunityParameters &amp; MetacommunityParameters::operator=</definition>
        <argsstring>(const MetacommunityParameters &amp;parameters)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="269" column="1" bodyfile="necsim/parameters.cpp" bodystart="223" bodyend="231"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains a set of metacommunity parameters that have been applied, or are to be applied, to the coalescence tree. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="566">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="564">
        <label>MetacommunityParameters</label>
        <link refid="struct_metacommunity_parameters"/>
        <childnode refid="565" relation="usage">
          <edgelabel>option</edgelabel>
        </childnode>
      </node>
      <node id="565">
        <label>std::string</label>
        <childnode refid="566" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/parameters.h" line="204" column="1" bodyfile="necsim/parameters.h" bodystart="203" bodyend="270"/>
    <listofallmembers>
      <member refid="struct_metacommunity_parameters_1a6f74de64524f1e07ec001f11d21cf1f5" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>clear</name></member>
      <member refid="struct_metacommunity_parameters_1a92e6d9292308fdd5aeceda97c20554ab" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>compare</name></member>
      <member refid="struct_metacommunity_parameters_1a9aaabd56315e4efa98466eb7ddecab06" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>compare</name></member>
      <member refid="struct_metacommunity_parameters_1a5b8597643984dd783a4275d93ce0b7cb" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>compare</name></member>
      <member refid="struct_metacommunity_parameters_1a921f76a25b723959f7b019ac80afc670" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>external_reference</name></member>
      <member refid="struct_metacommunity_parameters_1a01d2874885c2bc6622d46c519156c7e3" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>isMetacommunityOption</name></member>
      <member refid="struct_metacommunity_parameters_1a92d44abb439daab624572ed7f9199ab4" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>metacommunity_size</name></member>
      <member refid="struct_metacommunity_parameters_1a32d0649a8da47daab2a0743e2febf6ca" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>MetacommunityParameters</name></member>
      <member refid="struct_metacommunity_parameters_1a104b77bbfa104aac5eaa6f45292cac7c" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>MetacommunityParameters</name></member>
      <member refid="struct_metacommunity_parameters_1a198c799e7f0d1ae1a6a1ebd7ebcf42cb" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>operator=</name></member>
      <member refid="struct_metacommunity_parameters_1a26315e37aafdc4031bb3ba10d3a1c30c" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>option</name></member>
      <member refid="struct_metacommunity_parameters_1af6c04331c114ae95467ff2301789a67b" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>reference</name></member>
      <member refid="struct_metacommunity_parameters_1a6ad494c076296c0eac963facca209430" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>speciation_rate</name></member>
      <member refid="struct_metacommunity_parameters_1acc6a3f79a1b21bd670c32914dc33339f" prot="public" virt="non-virtual"><scope>MetacommunityParameters</scope><name>~MetacommunityParameters</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
