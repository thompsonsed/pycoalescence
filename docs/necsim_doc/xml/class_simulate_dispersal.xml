<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_simulate_dispersal" kind="class" language="C++" prot="public">
    <compoundname>SimulateDispersal</compoundname>
    <includes refid="_simulate_dispersal_8h" local="no">SimulateDispersal.h</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="class_simulate_dispersal_1a33cf29f05f05fbf3cd70f759e62f57f0" prot="protected" static="no">
        <type>bool(SimulateDispersal::*</type>
        <definition>typedef bool(SimulateDispersal::* SimulateDispersal::landscape_fptr) (const double &amp;dist, const double &amp;angle, const Cell &amp;this_cell, Cell &amp;end_cell)</definition>
        <argsstring>)(const double &amp;dist, const double &amp;angle, const Cell &amp;this_cell, Cell &amp;end_cell)</argsstring>
        <name>landscape_fptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="98" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_simulate_dispersal_1a238dcc03606fc99a0e1cd80ff229c0bd" prot="protected" static="no" mutable="no">
        <type>Map&lt; uint32_t &gt;</type>
        <definition>Map&lt;uint32_t&gt; SimulateDispersal::density_map</definition>
        <argsstring></argsstring>
        <name>density_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="62" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1aff72c923e8454470b2d4c8935061fb21" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SimulateDispersal::has_set_size</definition>
        <argsstring></argsstring>
        <name>has_set_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="64" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1a5f6389fc4116b52622a900c55532f86b" prot="protected" static="no" mutable="no">
        <type><ref refid="class_n_rrand" kindref="compound">NRrand</ref></type>
        <definition>NRrand SimulateDispersal::random</definition>
        <argsstring></argsstring>
        <name>random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="66" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1af1dc4cf60a69aafc2be4c80b0e9228c2" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string SimulateDispersal::map_name</definition>
        <argsstring></argsstring>
        <name>map_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="68" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1af9ab2fa8b2c3e1bb1ba49b31679ae0d7" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long SimulateDispersal::seed</definition>
        <argsstring></argsstring>
        <name>seed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="70" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1aedabf3440f475bc15d4b95f9e8500d94" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string SimulateDispersal::dispersal_method</definition>
        <argsstring></argsstring>
        <name>dispersal_method</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="72" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1ad6d6ae35911ed2bd045bf8e5bb30b628" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double SimulateDispersal::sigma</definition>
        <argsstring></argsstring>
        <name>sigma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="74" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1aa195b7e1b697c93e85a923eea5fabccc" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double SimulateDispersal::tau</definition>
        <argsstring></argsstring>
        <name>tau</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="76" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1ae4b679b39467170abf45845d4591e6db" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double SimulateDispersal::m_prob</definition>
        <argsstring></argsstring>
        <name>m_prob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="78" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1a532f1c5ba22d681c5761dcce4fc8555d" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double SimulateDispersal::cutoff</definition>
        <argsstring></argsstring>
        <name>cutoff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="80" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1afd3f96f169715aacbcc2939614a6a910" prot="protected" static="no" mutable="no">
        <type>sqlite3 *</type>
        <definition>sqlite3* SimulateDispersal::database</definition>
        <argsstring></argsstring>
        <name>database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="82" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1a616354e9527a71396a428bb63f444a15" prot="protected" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; SimulateDispersal::distances</definition>
        <argsstring></argsstring>
        <name>distances</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="84" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1abcb3ce61b835cbd007d09726302d692a" prot="protected" static="no" mutable="no">
        <type>vector&lt; <ref refid="struct_cell" kindref="compound">Cell</ref> &gt;</type>
        <definition>vector&lt;Cell&gt; SimulateDispersal::cells</definition>
        <argsstring></argsstring>
        <name>cells</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="86" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1a36ca3df92a79e284cdeb84ea0dfb3c9a" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long SimulateDispersal::num_repeats</definition>
        <argsstring></argsstring>
        <name>num_repeats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="88" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1a7f3401f3a7f1ec48635973d94e3470e8" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long SimulateDispersal::num_steps</definition>
        <argsstring></argsstring>
        <name>num_steps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="90" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1a0edc9ca52d14b3ea78c99c33b200447e" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long SimulateDispersal::max_density</definition>
        <argsstring></argsstring>
        <name>max_density</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="92" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1a72f4b5ec8d52f080f2c9df991fb546ef" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SimulateDispersal::is_sequential</definition>
        <argsstring></argsstring>
        <name>is_sequential</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="94" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1a2d15ba06c50a249328f867a105848f72" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long SimulateDispersal::parameter_reference</definition>
        <argsstring></argsstring>
        <name>parameter_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="96" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simulate_dispersal_1ae1f3a40b1805f024e41ec8df9c38c01e" prot="protected" static="no" mutable="no">
        <type>landscape_fptr</type>
        <definition>landscape_fptr SimulateDispersal::getValFptr</definition>
        <argsstring></argsstring>
        <name>getValFptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="100" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_simulate_dispersal_1ad05135d21e5bf28a5b905455a764829c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SimulateDispersal::SimulateDispersal</definition>
        <argsstring>()</argsstring>
        <name>SimulateDispersal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="102" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="102" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a99a7ef1d8e1e917512848f0123f4b834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SimulateDispersal::~SimulateDispersal</definition>
        <argsstring>()</argsstring>
        <name>~SimulateDispersal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="118" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a3da09319132db8c7ad035290be6590ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::setSequential</definition>
        <argsstring>(bool bSequential)</argsstring>
        <name>setSequential</name>
        <param>
          <type>bool</type>
          <declname>bSequential</declname>
        </param>
        <briefdescription>
<para>Sets the is_sequential flag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bSequential</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, dispersal events are selected using the end point of the last dispersal distance for the start of the next move event </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="128" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1ade30de5c9c7daebb6ccc4168fec3e813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::setSizes</definition>
        <argsstring>(unsigned long x, unsigned long y)</argsstring>
        <name>setSizes</name>
        <param>
          <type>unsigned long</type>
          <declname>x</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Sets the sizes of the density map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x dimension (number of columns) in the density map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y dimension (number of rows) in the density map </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="135" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="29" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a8c7c65b4788010f02213fba5c985f49a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::importMaps</definition>
        <argsstring>(string map_file)</argsstring>
        <name>importMaps</name>
        <param>
          <type>string</type>
          <declname>map_file</declname>
        </param>
        <briefdescription>
<para>Import the map from the prescribed file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>map_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the map file to import from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="141" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="42" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a46f2cd557ac9b21c107eac75e7c916af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::setSeed</definition>
        <argsstring>(unsigned long s)</argsstring>
        <name>setSeed</name>
        <param>
          <type>unsigned long</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Sets the seed for the random number generator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the seed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="147" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a93b3d450679b00c015f5e18d91f3a426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::setDispersalParameters</definition>
        <argsstring>(string dispersal_method_in, double sigma_in, double tau_in, double m_prob_in, double cutoff_in, string landscape_type)</argsstring>
        <name>setDispersalParameters</name>
        <param>
          <type>string</type>
          <declname>dispersal_method_in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma_in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tau_in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m_prob_in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff_in</declname>
        </param>
        <param>
          <type>string</type>
          <declname>landscape_type</declname>
        </param>
        <briefdescription>
<para>Sets the dispersal parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispersal_method_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the dispersal method (e.g. &quot;normal&quot;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the sigma value for normal and fat-tailed dispersals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the nu value for fat-tailed dispersals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m_prob_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the m_prob for norm-uniform dispersals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cutoff_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum dispersal distance for norm-uniform dispersal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>landscape_type</parametername>
</parameternamelist>
<parameterdescription>
<para>string containing the landscape type (one of &quot;closed&quot;, &quot;tiled&quot; or &quot;infinite&quot;). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="162" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="85" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a627bcb0be7e7d6b0ef1dbd44b32a1909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::setLandscapeType</definition>
        <argsstring>(string landscape_type)</argsstring>
        <name>setLandscapeType</name>
        <param>
          <type>string</type>
          <declname>landscape_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="165" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="99" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1acae5067045d5989df6d7dce80bcfe276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::setOutputDatabase</definition>
        <argsstring>(string out_database)</argsstring>
        <name>setOutputDatabase</name>
        <param>
          <type>string</type>
          <declname>out_database</declname>
        </param>
        <briefdescription>
<para>Sets the output database for writing results to. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_database</parametername>
</parameternamelist>
<parameterdescription>
<para>path to the output database </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="171" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="119" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a29c7cf41d8b5610109d61f302fb32e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::setNumberRepeats</definition>
        <argsstring>(unsigned long n)</argsstring>
        <name>setNumberRepeats</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Sets the number of repeats to run the dispersal kernel for. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of repeats </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="177" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="134" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a4a38f61284426daa4d968bbab91d3608" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::setNumberSteps</definition>
        <argsstring>(unsigned long s)</argsstring>
        <name>setNumberSteps</name>
        <param>
          <type>unsigned long</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Sets the number of steps to run each repeat of the dispersal kernel for when recording mean distance travelled. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of steps </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="184" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a85d8ee68e5f4962429571c835aa028b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::storeCellList</definition>
        <argsstring>()</argsstring>
        <name>storeCellList</name>
        <briefdescription>
<para>Calculates the list of cells to choose randomly from. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="188" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="145" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a7d0a2b28dd8d45f1b8a74dbcd82290e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
        <definition>const Cell &amp; SimulateDispersal::getRandomCell</definition>
        <argsstring>()</argsstring>
        <name>getRandomCell</name>
        <briefdescription>
<para>Gets a random cell from the list of cells. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="struct_cell" kindref="compound">Cell</ref> object reference containing the x and y positions to choose from </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="194" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a75eeedf1627eb25945a2d8f5dd0a2379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::calculateNewPosition</definition>
        <argsstring>(const double &amp;dist, const double &amp;angle, const Cell &amp;start_cell, Cell &amp;end_cell)</argsstring>
        <name>calculateNewPosition</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>start_cell</declname>
        </param>
        <param>
          <type><ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>end_cell</declname>
        </param>
        <briefdescription>
<para>Calculates the new position from the start cell based on the distance and angle moved. Stores the new x and y location in the end cell. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance to move </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction from the start cell to move </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_cell</parametername>
</parameternamelist>
<parameterdescription>
<para>the cell containing the start x and y position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_cell</parametername>
</parameternamelist>
<parameterdescription>
<para>the cell to contain the end x and y position </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="204" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="178" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1acb12b6b2f113e58c62636b2b4456f4da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SimulateDispersal::getEndPointInfinite</definition>
        <argsstring>(const double &amp;dist, const double &amp;angle, const Cell &amp;this_cell, Cell &amp;end_cell)</argsstring>
        <name>getEndPointInfinite</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>this_cell</declname>
        </param>
        <param>
          <type><ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>end_cell</declname>
        </param>
        <briefdescription>
<para>Checks the density is greater than 0 a given distance from the start point on an infinite null landscape. </para>        </briefdescription>
        <detaileddescription>
<para>This also takes into account the rejection sampling of density based on the maximal density value from the map.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance of dispersal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle of dispersal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>this_cell</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_cell" kindref="compound">Cell</ref> containing the x and y coordinates of the starting position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_cell</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_cell" kindref="compound">Cell</ref> to store the end point in </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the point has a density &gt; 0, otherwise generates a random number between 0 and the max size and if it is &gt; the density, return true, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="218" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="185" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a9694673493b261697020f42aa2fdf9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SimulateDispersal::getEndPointTiled</definition>
        <argsstring>(const double &amp;dist, const double &amp;angle, const Cell &amp;this_cell, Cell &amp;end_cell)</argsstring>
        <name>getEndPointTiled</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>this_cell</declname>
        </param>
        <param>
          <type><ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>end_cell</declname>
        </param>
        <briefdescription>
<para>Checks the density is greater than 0 a given distance from the start point on an infinite tiled landscape. </para>        </briefdescription>
        <detaileddescription>
<para>This also takes into account the rejection sampling of density based on the maximal density value from the map.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance of dispersal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle of dispersal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>this_cell</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_cell" kindref="compound">Cell</ref> containing the x and y coordinates of the starting position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_cell</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_cell" kindref="compound">Cell</ref> to store the end point in</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the point has a density &gt; 0, otherwise generates a random number between 0 and the max size and if it is &gt; the density, return true, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="233" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="196" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1ab7fa3b37534cdd35871b30c7bb511351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SimulateDispersal::getEndPointClosed</definition>
        <argsstring>(const double &amp;dist, const double &amp;angle, const Cell &amp;this_cell, Cell &amp;end_cell)</argsstring>
        <name>getEndPointClosed</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>this_cell</declname>
        </param>
        <param>
          <type><ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>end_cell</declname>
        </param>
        <briefdescription>
<para>Checks the density a given distance from the start point on an closed landscape. </para>        </briefdescription>
        <detaileddescription>
<para>This also takes into account the rejection sampling of density based on the maximal density value from the map.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance of dispersal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle of dispersal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>this_cell</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_cell" kindref="compound">Cell</ref> containing the x and y coordinates of the starting position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_cell</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_cell" kindref="compound">Cell</ref> to store the end point in</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the point has a density &gt; 0, otherwise generates a random number between 0 and the max size and if it is &gt; the density, return true, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="248" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="204" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a10a1dd769e993d018e7c7ae9208240ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SimulateDispersal::getEndPoint</definition>
        <argsstring>(const double &amp;dist, const double &amp;angle, const Cell &amp;this_cell, Cell &amp;end_cell)</argsstring>
        <name>getEndPoint</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>this_cell</declname>
        </param>
        <param>
          <type><ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>end_cell</declname>
        </param>
        <briefdescription>
<para>Checks the density a given distance from the start point, calling the relevant landscape function. </para>        </briefdescription>
        <detaileddescription>
<para>This also takes into account the rejection sampling of density based on the maximal density value from the map.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance of dispersal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle of dispersal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>this_cell</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_cell" kindref="compound">Cell</ref> containing the x and y coordinates of the starting position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_cell</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_cell" kindref="compound">Cell</ref> to store the end point in</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the point has a density &gt; 0, otherwise generates a random number between 0 and the max size and if it is &gt; the density, return true, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="263" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a4a759f6bb3b8288345eaf7c0d66ad29e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::runMeanDispersalDistance</definition>
        <argsstring>()</argsstring>
        <name>runMeanDispersalDistance</name>
        <briefdescription>
<para>Simulates the dispersal kernel for the set parameters, storing the mean dispersal distance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="268" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="218" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a406514e917874907cfb7a8d6c7889098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::runMeanDistanceTravelled</definition>
        <argsstring>()</argsstring>
        <name>runMeanDistanceTravelled</name>
        <briefdescription>
<para>Simulates the dispersal kernel for the set parameters, storing the mean distance travelled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="273" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="250" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1af7d0a726cb3724c159ca46f4586a8bd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::writeDatabase</definition>
        <argsstring>(string table_name)</argsstring>
        <name>writeDatabase</name>
        <param>
          <type>string</type>
          <declname>table_name</declname>
        </param>
        <briefdescription>
<para>Writes out the distances to the SQL database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the table to output to, either &apos;DISPERSAL_DISTANCE&apos; or &apos;DISTANCES_TRAVELLED&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="279" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="277" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1ae0afed6eeb06f5bae4ee13a24850c8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::writeParameters</definition>
        <argsstring>(string table_name)</argsstring>
        <name>writeParameters</name>
        <param>
          <type>string</type>
          <declname>table_name</declname>
        </param>
        <briefdescription>
<para>Writes the simulation parameters to the output SQL database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the table to output to, either &apos;DISPERSAL_DISTANCE&apos; or &apos;DISTANCES_TRAVELLED&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="285" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="360" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1a0dee5d1529bd7ee6f382f7cd1b5393e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimulateDispersal::checkMaxParameterReference</definition>
        <argsstring>()</argsstring>
        <name>checkMaxParameterReference</name>
        <briefdescription>
<para>Gets the maximum parameter reference from the output SQL database and saves val + 1 to parameter_reference Assumes that the database exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="292" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="390" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="class_simulate_dispersal_1abafd3fc30df157d12e462c4b1907d8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long SimulateDispersal::checkMaxIdNumber</definition>
        <argsstring>(string table_name)</argsstring>
        <name>checkMaxIdNumber</name>
        <param>
          <type>string</type>
          <declname>table_name</declname>
        </param>
        <briefdescription>
<para>Gets the maximum id number from the output SQL database and returns val + 1 Assumes that the database exists. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>this function does not check for SQL injection attacks and should not be used with variable function names. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the table to check for max(id) in </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the maximum id + 1 from the given table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulateDispersal.h" line="301" column="1" bodyfile="necsim/SimulateDispersal.cpp" bodystart="406" bodyend="421"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains routines for importing a density map file, running a dispersal kernel n times on a landscape and record the dispersal distances. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="962">
        <label>SimulateDispersal</label>
        <link refid="class_simulate_dispersal"/>
        <childnode refid="963" relation="usage">
          <edgelabel>getValFptr</edgelabel>
        </childnode>
        <childnode refid="964" relation="usage">
          <edgelabel>cells</edgelabel>
        </childnode>
        <childnode refid="965" relation="usage">
          <edgelabel>dispersal_method</edgelabel>
          <edgelabel>map_name</edgelabel>
        </childnode>
        <childnode refid="967" relation="usage">
          <edgelabel>random</edgelabel>
        </childnode>
        <childnode refid="968" relation="usage">
          <edgelabel>distances</edgelabel>
        </childnode>
      </node>
      <node id="968">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="963">
        <label>Cell</label>
        <link refid="struct_cell"/>
      </node>
      <node id="966">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="967">
        <label>NRrand</label>
        <link refid="class_n_rrand"/>
      </node>
      <node id="964">
        <label>std::vector&lt; Cell &gt;</label>
        <childnode refid="963" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="965">
        <label>std::string</label>
        <childnode refid="966" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/SimulateDispersal.h" line="59" column="1" bodyfile="necsim/SimulateDispersal.h" bodystart="58" bodyend="302"/>
    <listofallmembers>
      <member refid="class_simulate_dispersal_1a75eeedf1627eb25945a2d8f5dd0a2379" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>calculateNewPosition</name></member>
      <member refid="class_simulate_dispersal_1abcb3ce61b835cbd007d09726302d692a" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>cells</name></member>
      <member refid="class_simulate_dispersal_1abafd3fc30df157d12e462c4b1907d8fa" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>checkMaxIdNumber</name></member>
      <member refid="class_simulate_dispersal_1a0dee5d1529bd7ee6f382f7cd1b5393e5" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>checkMaxParameterReference</name></member>
      <member refid="class_simulate_dispersal_1a532f1c5ba22d681c5761dcce4fc8555d" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>cutoff</name></member>
      <member refid="class_simulate_dispersal_1afd3f96f169715aacbcc2939614a6a910" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>database</name></member>
      <member refid="class_simulate_dispersal_1a238dcc03606fc99a0e1cd80ff229c0bd" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>density_map</name></member>
      <member refid="class_simulate_dispersal_1aedabf3440f475bc15d4b95f9e8500d94" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>dispersal_method</name></member>
      <member refid="class_simulate_dispersal_1a616354e9527a71396a428bb63f444a15" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>distances</name></member>
      <member refid="class_simulate_dispersal_1a10a1dd769e993d018e7c7ae9208240ab" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>getEndPoint</name></member>
      <member refid="class_simulate_dispersal_1ab7fa3b37534cdd35871b30c7bb511351" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>getEndPointClosed</name></member>
      <member refid="class_simulate_dispersal_1acb12b6b2f113e58c62636b2b4456f4da" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>getEndPointInfinite</name></member>
      <member refid="class_simulate_dispersal_1a9694673493b261697020f42aa2fdf9e7" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>getEndPointTiled</name></member>
      <member refid="class_simulate_dispersal_1a7d0a2b28dd8d45f1b8a74dbcd82290e7" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>getRandomCell</name></member>
      <member refid="class_simulate_dispersal_1ae1f3a40b1805f024e41ec8df9c38c01e" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>getValFptr</name></member>
      <member refid="class_simulate_dispersal_1aff72c923e8454470b2d4c8935061fb21" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>has_set_size</name></member>
      <member refid="class_simulate_dispersal_1a8c7c65b4788010f02213fba5c985f49a" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>importMaps</name></member>
      <member refid="class_simulate_dispersal_1a72f4b5ec8d52f080f2c9df991fb546ef" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>is_sequential</name></member>
      <member refid="class_simulate_dispersal_1a33cf29f05f05fbf3cd70f759e62f57f0" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>landscape_fptr</name></member>
      <member refid="class_simulate_dispersal_1ae4b679b39467170abf45845d4591e6db" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>m_prob</name></member>
      <member refid="class_simulate_dispersal_1af1dc4cf60a69aafc2be4c80b0e9228c2" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>map_name</name></member>
      <member refid="class_simulate_dispersal_1a0edc9ca52d14b3ea78c99c33b200447e" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>max_density</name></member>
      <member refid="class_simulate_dispersal_1a36ca3df92a79e284cdeb84ea0dfb3c9a" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>num_repeats</name></member>
      <member refid="class_simulate_dispersal_1a7f3401f3a7f1ec48635973d94e3470e8" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>num_steps</name></member>
      <member refid="class_simulate_dispersal_1a2d15ba06c50a249328f867a105848f72" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>parameter_reference</name></member>
      <member refid="class_simulate_dispersal_1a5f6389fc4116b52622a900c55532f86b" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>random</name></member>
      <member refid="class_simulate_dispersal_1a4a759f6bb3b8288345eaf7c0d66ad29e" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>runMeanDispersalDistance</name></member>
      <member refid="class_simulate_dispersal_1a406514e917874907cfb7a8d6c7889098" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>runMeanDistanceTravelled</name></member>
      <member refid="class_simulate_dispersal_1af9ab2fa8b2c3e1bb1ba49b31679ae0d7" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>seed</name></member>
      <member refid="class_simulate_dispersal_1a93b3d450679b00c015f5e18d91f3a426" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>setDispersalParameters</name></member>
      <member refid="class_simulate_dispersal_1a627bcb0be7e7d6b0ef1dbd44b32a1909" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>setLandscapeType</name></member>
      <member refid="class_simulate_dispersal_1a29c7cf41d8b5610109d61f302fb32e73" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>setNumberRepeats</name></member>
      <member refid="class_simulate_dispersal_1a4a38f61284426daa4d968bbab91d3608" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>setNumberSteps</name></member>
      <member refid="class_simulate_dispersal_1acae5067045d5989df6d7dce80bcfe276" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>setOutputDatabase</name></member>
      <member refid="class_simulate_dispersal_1a46f2cd557ac9b21c107eac75e7c916af" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>setSeed</name></member>
      <member refid="class_simulate_dispersal_1a3da09319132db8c7ad035290be6590ef" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>setSequential</name></member>
      <member refid="class_simulate_dispersal_1ade30de5c9c7daebb6ccc4168fec3e813" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>setSizes</name></member>
      <member refid="class_simulate_dispersal_1ad6d6ae35911ed2bd045bf8e5bb30b628" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>sigma</name></member>
      <member refid="class_simulate_dispersal_1ad05135d21e5bf28a5b905455a764829c" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>SimulateDispersal</name></member>
      <member refid="class_simulate_dispersal_1a85d8ee68e5f4962429571c835aa028b4" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>storeCellList</name></member>
      <member refid="class_simulate_dispersal_1aa195b7e1b697c93e85a923eea5fabccc" prot="protected" virt="non-virtual"><scope>SimulateDispersal</scope><name>tau</name></member>
      <member refid="class_simulate_dispersal_1af7d0a726cb3724c159ca46f4586a8bd3" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>writeDatabase</name></member>
      <member refid="class_simulate_dispersal_1ae0afed6eeb06f5bae4ee13a24850c8c5" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>writeParameters</name></member>
      <member refid="class_simulate_dispersal_1a99a7ef1d8e1e917512848f0123f4b834" prot="public" virt="non-virtual"><scope>SimulateDispersal</scope><name>~SimulateDispersal</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
