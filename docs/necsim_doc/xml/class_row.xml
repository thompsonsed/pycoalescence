<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_row" kind="class" language="C++" prot="public">
    <compoundname>Row</compoundname>
    <includes refid="_matrix_8h" local="no">Matrix.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_row_1ab70f7acd43212be13b5b9f5b7a979611" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Row&lt; T &gt;::numCols</definition>
        <argsstring></argsstring>
        <name>numCols</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="57" column="1" bodyfile="necsim/Matrix.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_row_1a76906ed1430eeaa38f694dbb3a841442" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* Row&lt; T &gt;::row</definition>
        <argsstring></argsstring>
        <name>row</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="59" column="1" bodyfile="necsim/Matrix.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_row_1a32774cba0d7cdb6f0d7100c395ece9e5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Row&lt; T &gt;::Row</definition>
        <argsstring>(unsigned long cols=0)</argsstring>
        <name>Row</name>
        <param>
          <type>unsigned long</type>
          <declname>cols</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Standard constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>optionally provide the number of rows to initiate with. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="66" column="1" bodyfile="necsim/Matrix.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_row_1a8e888a33060156cd2e3757a95e9feee1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Row&lt; T &gt;::~Row</definition>
        <argsstring>()</argsstring>
        <name>~Row</name>
        <briefdescription>
<para>Standard destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="74" column="1" bodyfile="necsim/Matrix.h" bodystart="74" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_row_1a3c76905ddd4522c92da0d8a9e24a22a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Row&lt; T &gt;::Row</definition>
        <argsstring>(const Row &amp;r)</argsstring>
        <name>Row</name>
        <param>
          <type>const <ref refid="class_row" kindref="compound">Row</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_row" kindref="compound">Row</ref> object to copy from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="86" column="1" bodyfile="necsim/Matrix.h" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_row_1a4015d3cc7a22a4a4ad31ae410ab8fce4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Row&lt; T &gt;::setSize</definition>
        <argsstring>(unsigned long n)</argsstring>
        <name>setSize</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Setter for the row size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows to initiate with. SetRowSize() deletes any old data, and allocates space for new data, unless we set the number of columns to 0, in which case it merely deletes the data. This lets us use this function for construction, destruction, and dynamic modification in one method. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="100" column="1" bodyfile="necsim/Matrix.h" bodystart="100" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_row_1aac3e65388e6ce2a003be1a1b460fab53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Row&lt; T &gt;::resize</definition>
        <argsstring>(unsigned long n)</argsstring>
        <name>resize</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Changes the size of the array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the new size to change to. Note that no checks are performed that the new row size is larger than the old row size. Thus is this function is used to shrink the row size, a bad_alloc error will likely be thrown. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="123" column="1" bodyfile="necsim/Matrix.h" bodystart="123" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_row_1a5fdbcb2478b0ff00d12b8b109b0eb89a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Row&lt; T &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Getter for the size of the array. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of columns. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="139" column="1" bodyfile="necsim/Matrix.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_row_1aecb642c8ceffbb7d6c69bc13d9de4bb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; Row&lt; T &gt;::operator[]</definition>
        <argsstring>(unsigned long column)</argsstring>
        <name>operator[]</name>
        <param>
          <type>unsigned long</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Overloading the [] operator to allow for simple referencing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>the column to get the value from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value in the specified column. Note that different versions deal with values outside of (0,numCols) in different ways. </para></simplesect>
<simplesect kind="note"><para>updated to throw an out_of_range exception if the column is out of the row range. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="151" column="1" bodyfile="necsim/Matrix.h" bodystart="151" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_row_1a877484e061eef2a179cc28d30b3ec542" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_row" kindref="compound">Row</ref> &amp;</type>
        <definition>Row&amp; Row&lt; T &gt;::operator=</definition>
        <argsstring>(const Row &amp;r)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_row" kindref="compound">Row</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Overloading the = operator to allow for copying data across. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_row" kindref="compound">Row</ref> object to copy data from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="172" column="1" bodyfile="necsim/Matrix.h" bodystart="172" bodyend="180"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_row_1a8aaaee73ace04bfd4dda937bc311a16e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Row &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_row" kindref="compound">Row</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Overloading the &lt;&lt; operator for outputting to the output stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_row" kindref="compound">Row</ref> object to output from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>os the output stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="188" column="1" bodyfile="necsim/Matrix.h" bodystart="188" bodyend="196"/>
      </memberdef>
      <memberdef kind="friend" id="class_row_1adaa9bd295e9b13a99d9205911763468c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Row &amp;r)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="class_row" kindref="compound">Row</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Overloading the &lt;&lt; operator for inputting from an input stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_row" kindref="compound">Row</ref> object to input to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="204" column="1" bodyfile="necsim/Matrix.h" bodystart="204" bodyend="217"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains a template <ref refid="class_row" kindref="compound">Row</ref> class and basic operations. Uses an array to store the row. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="necsim/Matrix.h" line="54" column="1" bodyfile="necsim/Matrix.h" bodystart="53" bodyend="218"/>
    <listofallmembers>
      <member refid="class_row_1ab70f7acd43212be13b5b9f5b7a979611" prot="private" virt="non-virtual"><scope>Row</scope><name>numCols</name></member>
      <member refid="class_row_1a8aaaee73ace04bfd4dda937bc311a16e" prot="public" virt="non-virtual"><scope>Row</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_row_1a877484e061eef2a179cc28d30b3ec542" prot="public" virt="non-virtual"><scope>Row</scope><name>operator=</name></member>
      <member refid="class_row_1adaa9bd295e9b13a99d9205911763468c" prot="public" virt="non-virtual"><scope>Row</scope><name>operator&gt;&gt;</name></member>
      <member refid="class_row_1aecb642c8ceffbb7d6c69bc13d9de4bb0" prot="public" virt="non-virtual"><scope>Row</scope><name>operator[]</name></member>
      <member refid="class_row_1aac3e65388e6ce2a003be1a1b460fab53" prot="public" virt="non-virtual"><scope>Row</scope><name>resize</name></member>
      <member refid="class_row_1a76906ed1430eeaa38f694dbb3a841442" prot="private" virt="non-virtual"><scope>Row</scope><name>row</name></member>
      <member refid="class_row_1a32774cba0d7cdb6f0d7100c395ece9e5" prot="public" virt="non-virtual"><scope>Row</scope><name>Row</name></member>
      <member refid="class_row_1a3c76905ddd4522c92da0d8a9e24a22a1" prot="public" virt="non-virtual"><scope>Row</scope><name>Row</name></member>
      <member refid="class_row_1a4015d3cc7a22a4a4ad31ae410ab8fce4" prot="public" virt="non-virtual"><scope>Row</scope><name>setSize</name></member>
      <member refid="class_row_1a5fdbcb2478b0ff00d12b8b109b0eb89a" prot="public" virt="non-virtual"><scope>Row</scope><name>size</name></member>
      <member refid="class_row_1a8e888a33060156cd2e3757a95e9feee1" prot="public" virt="non-virtual"><scope>Row</scope><name>~Row</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
