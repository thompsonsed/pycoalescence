<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="namespacenecsim" kind="namespace" language="C++">
    <compoundname>necsim</compoundname>
    <innerclass refid="classnecsim_1_1_activity_map" prot="public">necsim::ActivityMap</innerclass>
    <innerclass refid="classnecsim_1_1_analytical_species_abundances_handler" prot="public">necsim::AnalyticalSpeciesAbundancesHandler</innerclass>
    <innerclass refid="structnecsim_1_1_cell" prot="public">necsim::Cell</innerclass>
    <innerclass refid="structnecsim_1_1_communities_array" prot="public">necsim::CommunitiesArray</innerclass>
    <innerclass refid="classnecsim_1_1_community" prot="public">necsim::Community</innerclass>
    <innerclass refid="structnecsim_1_1_community_parameters" prot="public">necsim::CommunityParameters</innerclass>
    <innerclass refid="structnecsim_1_1_config_exception" prot="public">necsim::ConfigException</innerclass>
    <innerclass refid="classnecsim_1_1_config_parser" prot="public">necsim::ConfigParser</innerclass>
    <innerclass refid="classnecsim_1_1_data_mask" prot="public">necsim::DataMask</innerclass>
    <innerclass refid="classnecsim_1_1_data_point" prot="public">necsim::DataPoint</innerclass>
    <innerclass refid="classnecsim_1_1_dispersal_coordinator" prot="public">necsim::DispersalCoordinator</innerclass>
    <innerclass refid="structnecsim_1_1_fatal_exception" prot="public">necsim::FatalException</innerclass>
    <innerclass refid="structnecsim_1_1_fragment" prot="public">necsim::Fragment</innerclass>
    <innerclass refid="classnecsim_1_1_gillespie_heap_node" prot="public">necsim::GillespieHeapNode</innerclass>
    <innerclass refid="classnecsim_1_1_gillespie_probability" prot="public">necsim::GillespieProbability</innerclass>
    <innerclass refid="structnecsim_1_1_historical_map_parameters" prot="public">necsim::HistoricalMapParameters</innerclass>
    <innerclass refid="classnecsim_1_1_landscape" prot="public">necsim::Landscape</innerclass>
    <innerclass refid="classnecsim_1_1_log_file" prot="public">necsim::LogFile</innerclass>
    <innerclass refid="classnecsim_1_1_logger" prot="public">necsim::Logger</innerclass>
    <innerclass refid="classnecsim_1_1_map" prot="public">necsim::Map</innerclass>
    <innerclass refid="structnecsim_1_1_map_location" prot="public">necsim::MapLocation</innerclass>
    <innerclass refid="classnecsim_1_1_matrix" prot="public">necsim::Matrix</innerclass>
    <innerclass refid="structnecsim_1_1_metacommunities_array" prot="public">necsim::MetacommunitiesArray</innerclass>
    <innerclass refid="classnecsim_1_1_metacommunity" prot="public">necsim::Metacommunity</innerclass>
    <innerclass refid="structnecsim_1_1_metacommunity_parameters" prot="public">necsim::MetacommunityParameters</innerclass>
    <innerclass refid="classnecsim_1_1_protracted_spatial_tree" prot="public">necsim::ProtractedSpatialTree</innerclass>
    <innerclass refid="structnecsim_1_1_protracted_speciation_parameters" prot="public">necsim::ProtractedSpeciationParameters</innerclass>
    <innerclass refid="classnecsim_1_1_protracted_tree" prot="public">necsim::ProtractedTree</innerclass>
    <innerclass refid="classnecsim_1_1_py_logger" prot="public">necsim::PyLogger</innerclass>
    <innerclass refid="classnecsim_1_1_samplematrix" prot="public">necsim::Samplematrix</innerclass>
    <innerclass refid="structnecsim_1_1_section_option" prot="public">necsim::SectionOption</innerclass>
    <innerclass refid="structnecsim_1_1_sim_parameters" prot="public">necsim::SimParameters</innerclass>
    <innerclass refid="classnecsim_1_1_simulate_dispersal" prot="public">necsim::SimulateDispersal</innerclass>
    <innerclass refid="classnecsim_1_1_simulated_species_abundances_handler" prot="public">necsim::SimulatedSpeciesAbundancesHandler</innerclass>
    <innerclass refid="classnecsim_1_1_spatial_tree" prot="public">necsim::SpatialTree</innerclass>
    <innerclass refid="classnecsim_1_1_speciation_commands" prot="public">necsim::SpeciationCommands</innerclass>
    <innerclass refid="classnecsim_1_1_species_abundances_handler" prot="public">necsim::SpeciesAbundancesHandler</innerclass>
    <innerclass refid="classnecsim_1_1_species_list" prot="public">necsim::SpeciesList</innerclass>
    <innerclass refid="structnecsim_1_1_spec_sim_parameters" prot="public">necsim::SpecSimParameters</innerclass>
    <innerclass refid="classnecsim_1_1_s_q_lite_handler" prot="public">necsim::SQLiteHandler</innerclass>
    <innerclass refid="structnecsim_1_1_s_q_l_statement" prot="public">necsim::SQLStatement</innerclass>
    <innerclass refid="structnecsim_1_1_step" prot="public">necsim::Step</innerclass>
    <innerclass refid="classnecsim_1_1_tree" prot="public">necsim::Tree</innerclass>
    <innerclass refid="classnecsim_1_1_tree_node" prot="public">necsim::TreeNode</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_gillespie_calculator_8h_1a964d4a0e3bd43e929d25273ccecc64bb" prot="public" static="no" strong="yes">
        <type></type>
        <name>EventType</name>
        <enumvalue id="_gillespie_calculator_8h_1a964d4a0e3bd43e929d25273ccecc64bba5e543256c480ac577d30f76f9120eb74" prot="public">
          <name>undefined</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_gillespie_calculator_8h_1a964d4a0e3bd43e929d25273ccecc64bbaee6c6945a380acb3780205a0b1092f6b" prot="public">
          <name>cell_event</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_gillespie_calculator_8h_1a964d4a0e3bd43e929d25273ccecc64bbac01ca3dff2958fe8790d97e621fe4a79" prot="public">
          <name>map_event</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_gillespie_calculator_8h_1a964d4a0e3bd43e929d25273ccecc64bba38c76655db96b2756e393f2b7fb262eb" prot="public">
          <name>sample_event</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Container for the different event types that can occur during the Gillespie Algorithm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/GillespieCalculator.h" line="25" column="1" bodyfile="necsim/GillespieCalculator.h" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="_gillespie_calculator_8h_1a7a7e9e6e42a1503fe76cb1077369f08f" prot="public" static="no" strong="yes">
        <type></type>
        <name>CellEventType</name>
        <enumvalue id="_gillespie_calculator_8h_1a7a7e9e6e42a1503fe76cb1077369f08fa5e543256c480ac577d30f76f9120eb74" prot="public">
          <name>undefined</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_gillespie_calculator_8h_1a7a7e9e6e42a1503fe76cb1077369f08faf4d7dc1f2b5125a21acfc56c8feaf94d" prot="public">
          <name>dispersal_event</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_gillespie_calculator_8h_1a7a7e9e6e42a1503fe76cb1077369f08fa5036debfc9925a6191ae58918eec2486" prot="public">
          <name>coalescence_event</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_gillespie_calculator_8h_1a7a7e9e6e42a1503fe76cb1077369f08fa68a6a0c446ddf7a2daff3c6ef11303eb" prot="public">
          <name>speciation_event</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/GillespieCalculator.h" line="30" column="1" bodyfile="necsim/GillespieCalculator.h" bodystart="29" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_logger_8cpp_1a6985abed3772b4ca89b2f1d3ab621514" prot="public" static="no" mutable="no">
        <type><ref refid="classnecsim_1_1_logger" kindref="compound">Logger</ref> *</type>
        <definition>Logger * necsim::logger</definition>
        <argsstring></argsstring>
        <name>logger</name>
        <briefdescription>
<para>Global object for logging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Logger.cpp" line="16" column="1" bodyfile="necsim/Logger.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8h_1a7d499f35b2cab7750c3d9effb25377eb" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int necsim::gdal_data_sizes[]</definition>
        <argsstring>[]</argsstring>
        <name>gdal_data_sizes</name>
        <initializer>= {0, 8, 16, 16, 32, 32, 32, 64}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="44" column="1" bodyfile="necsim/Matrix.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="setup_8h_1a9f81763cdbde17fe5ab1c03c3e540513" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string necsim::log_name</definition>
        <argsstring></argsstring>
        <name>log_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/setup.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="setup_8h_1ac53e063269901a69734d45d0ecc722db" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int necsim::saved_stdout</definition>
        <argsstring></argsstring>
        <name>saved_stdout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/setup.h" line="40" column="1" bodyfile="necsim/setup.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_py_logger_8cpp_1a63a04d25de53f5fa18a6af02d7c5c77d" prot="public" static="no" mutable="no">
        <type><ref refid="classnecsim_1_1_py_logger" kindref="compound">PyLogger</ref> *</type>
        <definition>PyLogger * necsim::pyLogger</definition>
        <argsstring></argsstring>
        <name>pyLogger</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogger.cpp" line="16" column="1" bodyfile="PyLogging.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_activity_map_8cpp_1a99dbb6685e457c95ec9d84d83117c17c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; necsim::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, ActivityMap &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_activity_map" kindref="compound">ActivityMap</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the ostream to output to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_activity_map" kindref="compound">ActivityMap</ref> to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the os object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ActivityMap.cpp" line="148" column="1" bodyfile="necsim/ActivityMap.cpp" bodystart="148" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="_activity_map_8cpp_1ad1c0caed744816354e290165ba80cbac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; necsim::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, ActivityMap &amp;r)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_activity_map" kindref="compound">ActivityMap</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the istream to input from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_activity_map" kindref="compound">ActivityMap</ref> to input to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the is object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ActivityMap.cpp" line="160" column="1" bodyfile="necsim/ActivityMap.cpp" bodystart="160" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="_cell_8cpp_1ad7c1049c256986e606e3b19cbbf7fe21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double necsim::distanceBetweenCells</definition>
        <argsstring>(const Cell &amp;c1, const Cell &amp;c2)</argsstring>
        <name>distanceBetweenCells</name>
        <param>
          <type>const <ref refid="structnecsim_1_1_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="structnecsim_1_1_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>Calculates the distance between two cells. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structnecsim_1_1_cell" kindref="compound">Cell</ref> containing one point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c2</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structnecsim_1_1_cell" kindref="compound">Cell</ref> containing second point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the distance between the two points </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Cell.cpp" line="15" column="1" bodyfile="necsim/Cell.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="_community_8cpp_1ac1e5a51a4b0f95c39b36ae5f1db8e48b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::checkSpeciation</definition>
        <argsstring>(const long double &amp;random_number, const long double &amp;speciation_rate, const unsigned long &amp;no_generations)</argsstring>
        <name>checkSpeciation</name>
        <param>
          <type>const long double &amp;</type>
          <declname>random_number</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>no_generations</declname>
        </param>
        <briefdescription>
<para>Checks whether speciation has occured for the provided parameters. Provided here for ease of use when bug-fixing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>random_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the random number associated with a lineage </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the global speciation rate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_generations</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of generations the lineage has existed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool the speciation state of the lineage </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.cpp" line="19" column="1" bodyfile="necsim/Community.cpp" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="_community_8cpp_1a7f1fb3d57ed380c832ed1fe0d7df9076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double necsim::inverseSpeciation</definition>
        <argsstring>(const long double &amp;speciation_rate, const unsigned long &amp;no_generations)</argsstring>
        <name>inverseSpeciation</name>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>no_generations</declname>
        </param>
        <briefdescription>
<para>Calculates the random number required for speciation to occur in exactly n generations This is equivalent to calculating 1 - the probability that speciation does not occur in n generations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>no_generations</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of generations speciation can occur over </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.cpp" line="27" column="1" bodyfile="necsim/Community.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="_config_parser_8cpp_1adb4e49fae940d4d9fb634c2ab5cc8125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::importArgs</definition>
        <argsstring>(const unsigned int &amp;argc, char *argv[], vector&lt; string &gt; &amp;comargs)</argsstring>
        <name>importArgs</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>comargs</declname>
        </param>
        <briefdescription>
<para>Import the command line arguments in to the vector for future processing. Arguments will be placed in the vector comargs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>a point to the array of arguments in raw character form. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comargs</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of the command-line arguments to be filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ConfigParser.cpp" line="21" column="1" bodyfile="necsim/ConfigParser.cpp" bodystart="21" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="_config_parser_8cpp_1a0dfb12754afdc42c6ae3244113715bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; necsim::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const SectionOption &amp;k)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structnecsim_1_1_section_option" kindref="compound">SectionOption</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>the KeyOption object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>os the output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ConfigParser.cpp" line="51" column="1" bodyfile="necsim/ConfigParser.cpp" bodystart="51" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="_config_parser_8cpp_1a4c917daca45d2f29299058ff7291ffe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; necsim::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, SectionOption &amp;k)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="structnecsim_1_1_section_option" kindref="compound">SectionOption</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>the KeyOption object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>is the input stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ConfigParser.cpp" line="65" column="1" bodyfile="necsim/ConfigParser.cpp" bodystart="65" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="_config_parser_8cpp_1aaa855dd1b0ce723905f48b02175552ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; necsim::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const ConfigParser &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnecsim_1_1_config_parser" kindref="compound">ConfigParser</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the ConfigOption object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>os the output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ConfigParser.cpp" line="384" column="1" bodyfile="necsim/ConfigParser.cpp" bodystart="384" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="_config_parser_8cpp_1a22e5e783bf2862819a566480edc7a277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; necsim::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, ConfigParser &amp;c)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_config_parser" kindref="compound">ConfigParser</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the ConfigOption object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>is the input stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ConfigParser.cpp" line="395" column="1" bodyfile="necsim/ConfigParser.cpp" bodystart="395" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="cpl__custom__handler_8cpp_1a74a3226988152cc438a25d78606db81c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::cplNecsimCustomErrorHandler</definition>
        <argsstring>(CPLErr eErrClass, int err_no, const char *msg)</argsstring>
        <name>cplNecsimCustomErrorHandler</name>
        <param>
          <type>CPLErr</type>
          <declname>eErrClass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>err_no</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Contains a custom CPLErrorHandler for reporting errors from GDAL imports. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eErrClass</parametername>
</parameternamelist>
<parameterdescription>
<para>the error class (CE_None, CE_Debug, CE_Warning, CE_Failure or CE_Fatal) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_no</parametername>
</parameternamelist>
<parameterdescription>
<para>the error number to report </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to report </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/cpl_custom_handler.cpp" line="16" column="1" bodyfile="necsim/cpl_custom_handler.cpp" bodystart="16" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="_data_point_8cpp_1a0a64d6d416d50082f18da3ad17d249be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; necsim::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const DataPoint &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnecsim_1_1_data_point" kindref="compound">DataPoint</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the Datapoint object to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>returns the output stream at the end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/DataPoint.cpp" line="133" column="1" bodyfile="necsim/DataPoint.cpp" bodystart="133" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="_data_point_8cpp_1a4d2ab43cf95c18dc59498919b17136e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; necsim::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, DataPoint &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_data_point" kindref="compound">DataPoint</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the Datapoint object to input to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>returns the input stream at the end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/DataPoint.cpp" line="141" column="1" bodyfile="necsim/DataPoint.cpp" bodystart="141" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="double__comparison_8cpp_1abc3ad273045760b962557d0e43a5df53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::doubleCompare</definition>
        <argsstring>(double d1, double d2, double epsilon)</argsstring>
        <name>doubleCompare</name>
        <param>
          <type>double</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Compares two doubles and returns a boolean of whether they are equal, within the epsilon deviation. This is useful for floating point errors in saving and reading doubles from file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the deviation within which the values are assumed to be equal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the doubles are within epsilon of each other </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/double_comparison.cpp" line="18" column="1" bodyfile="necsim/double_comparison.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="double__comparison_8cpp_1afb162ab69633d6e886ef01d0649033fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::doubleCompare</definition>
        <argsstring>(long double d1, long double d2, long double epsilon)</argsstring>
        <name>doubleCompare</name>
        <param>
          <type>long double</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Compares two doubles and returns a boolean of whether they are equal, within the epsilon deviation. This is useful for floating point errors in saving and reading doubles from file. Overloaded version for long doubles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the deviation within which the values are assumed to be equal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the doubles are within epsilon of each other </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/double_comparison.cpp" line="23" column="1" bodyfile="necsim/double_comparison.cpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="double__comparison_8cpp_1a409774cc6dcf5947fa931b55ee35f45d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::doubleCompare</definition>
        <argsstring>(long double d1, long double d2, double epsilon)</argsstring>
        <name>doubleCompare</name>
        <param>
          <type>long double</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Compares two doubles and returns a boolean of whether they are equal, within the epsilon deviation. This is useful for floating point errors in saving and reading doubles from file. Overloaded version for long doubles and double epsilon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the deviation within which the values are assumed to be equal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the doubles are within epsilon of each other </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/double_comparison.cpp" line="28" column="1" bodyfile="necsim/double_comparison.cpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8cpp_1af0305d0d545d116b6554acdabaa4bccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::openSQLiteDatabase</definition>
        <argsstring>(const string &amp;database_name, sqlite3 *&amp;database)</argsstring>
        <name>openSQLiteDatabase</name>
        <param>
          <type>const string &amp;</type>
          <declname>database_name</declname>
        </param>
        <param>
          <type>sqlite3 *&amp;</type>
          <declname>database</declname>
        </param>
        <briefdescription>
<para>Safely opens a connection to the provided SQLite database. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds type safety for usage on different filesystems. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>database_name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>database</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.cpp" line="30" column="1" bodyfile="necsim/file_system.cpp" bodystart="30" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8cpp_1aaabad1bf36ef7cc36acba1116a8181d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::createParent</definition>
        <argsstring>(string file)</argsstring>
        <name>createParent</name>
        <param>
          <type>string</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Checks that parent folder to the supplied file exists, and if it doesn&apos;t creates it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>the file path to check for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.cpp" line="80" column="1" bodyfile="necsim/file_system.cpp" bodystart="80" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8cpp_1a38c532b2d674068d34ad1d4ac06ed192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::doesExist</definition>
        <argsstring>(string testfile)</argsstring>
        <name>doesExist</name>
        <param>
          <type>string</type>
          <declname>testfile</declname>
        </param>
        <briefdescription>
<para>Checks the existance of a file on the hard drive. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>testfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to examine </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>should always return true, or raise an error (if the file doesn&apos;t exist) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.cpp" line="106" column="1" bodyfile="necsim/file_system.cpp" bodystart="106" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8cpp_1a8a0b9b8f9a4176f11ccc2e8d73952524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::doesExistNull</definition>
        <argsstring>(string testfile)</argsstring>
        <name>doesExistNull</name>
        <param>
          <type>string</type>
          <declname>testfile</declname>
        </param>
        <briefdescription>
<para>Checks for the existance of a file, but returns true if the file name is &apos;null&apos;. Note: this function just calls doesExist(). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>testfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to examine </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if true, file exists (or is null). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.cpp" line="122" column="1" bodyfile="necsim/file_system.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8cpp_1acf920a4c68dfdcb900258a340c0d3462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::cantorPairing</definition>
        <argsstring>(const unsigned long &amp;x1, const unsigned long &amp;x2)</argsstring>
        <name>cantorPairing</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
<para>Generates a unique ID for the pair of provided parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Maps ZxZ -&gt; N, so only relevant for positive numbers. For any A and B, generates C such that no D and E produce C unless D=A and B=E.</para>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Should not be used for large integers, or of unknown size, as integer overflows are likely. Cantor pairing explodes in size of return value.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first integer reference </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second integer reference </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a unique reference for the two provided integers </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.cpp" line="127" column="1" bodyfile="necsim/file_system.cpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8cpp_1af19d28efb4b3fcc54a284e4bf253d2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::elegantPairing</definition>
        <argsstring>(const unsigned long &amp;x1, const unsigned long &amp;x2)</argsstring>
        <name>elegantPairing</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
<para>A more elegant version of cantor pairing, which allows for storing of a greater number of digits without experiencing integer overflow issues. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For scenarios when performance is critical, and the integers are known to be small, cantorPairing provides equivalent functionality.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first integer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.cpp" line="132" column="1" bodyfile="necsim/file_system.cpp" bodystart="132" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8cpp_1a5c6966a61b69f545273342985bc402c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; string &gt;</type>
        <definition>vector&lt; string &gt; necsim::getCsvLineAndSplitIntoTokens</definition>
        <argsstring>(istream &amp;str)</argsstring>
        <name>getCsvLineAndSplitIntoTokens</name>
        <param>
          <type>istream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Gets the next line from a csv filestream and splits the row into a vector of strings, where each string is the value from the csv file, delimited by a comma (i.e. each column of the row). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream from the csv file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector where each element corresponds to the respective row from the csv. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.cpp" line="141" column="1" bodyfile="necsim/file_system.cpp" bodystart="141" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8h_1a60fcecbc2483c5a5d681ad5cc75c9183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>ostream &amp;</type>
        <definition>ostream&amp; necsim::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Overload the output operator for vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the template type of the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to write out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the modified output operator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="104" column="1" bodyfile="necsim/file_system.h" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8h_1ac3e3623eb40582f1624e7376a3bfd182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>istream &amp;</type>
        <definition>istream&amp; necsim::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Overloaded input stream operator for a vector of objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the objects stored in a vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of objects to read in to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="121" column="1" bodyfile="necsim/file_system.h" bodystart="121" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="_gillespie_calculator_8cpp_1a4a7c78915861042684b0fed3ee7f0b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; necsim::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const GillespieProbability &amp;gp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnecsim_1_1_gillespie_probability" kindref="compound">GillespieProbability</ref> &amp;</type>
          <declname>gp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/GillespieCalculator.cpp" line="112" column="1" bodyfile="necsim/GillespieCalculator.cpp" bodystart="112" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="_gillespie_calculator_8cpp_1adfa9f24d0be0ba83debe3eb72fe9b389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; necsim::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, GillespieProbability &amp;gp)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_gillespie_probability" kindref="compound">GillespieProbability</ref> &amp;</type>
          <declname>gp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/GillespieCalculator.cpp" line="119" column="1" bodyfile="necsim/GillespieCalculator.cpp" bodystart="119" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="_landscape_8cpp_1a877748371ce58d1c4712947025d88417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t necsim::importToMapAndRound</definition>
        <argsstring>(string map_file, Map&lt; uint32_t &gt; &amp;map_in, unsigned long map_x, unsigned long map_y, double scalar)</argsstring>
        <name>importToMapAndRound</name>
        <param>
          <type>string</type>
          <declname>map_file</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_map" kindref="compound">Map</ref>&lt; uint32_t &gt; &amp;</type>
          <declname>map_in</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>map_x</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>map_y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Imports the provided given file to the provided matrix, given the x and y dimensions. The integer value in the final matrix is multiplied by the scalar to generate the final matrix. Note that this doubles the memory usage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>map_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the map file to import </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to change the values of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x dimension of the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y dimension of the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>the scalar to multiply all values in the final matrix by (before rounding to integer) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the maximum value from the imported matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.cpp" line="19" column="1" bodyfile="necsim/Landscape.cpp" bodystart="19" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="_landscape_8cpp_1a8723ed00c7366423e06f9a920878c9dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::archimedesSpiralX</definition>
        <argsstring>(const double &amp;centre_x, const double &amp;centre_y, const double &amp;radius, const double &amp;theta)</argsstring>
        <name>archimedesSpiralX</name>
        <param>
          <type>const double &amp;</type>
          <declname>centre_x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>centre_y</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>Gets the x coordinate of the archimedes spiral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>centre_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the spiral centre </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centre_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the spiral centre </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the spiral </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>the theta of rotation of the spiral </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.cpp" line="78" column="1" bodyfile="necsim/Landscape.cpp" bodystart="78" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="_landscape_8cpp_1a32a929e38ec8700539b97d2728c5e9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::archimedesSpiralY</definition>
        <argsstring>(const double &amp;centre_x, const double &amp;centre_y, const double &amp;radius, const double &amp;theta)</argsstring>
        <name>archimedesSpiralY</name>
        <param>
          <type>const double &amp;</type>
          <declname>centre_x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>centre_y</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>Gets the y coordinate of the archimedes spiral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>centre_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the spiral centre </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centre_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the spiral centre </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the spiral </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>the theta of rotation of the spiral </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.cpp" line="86" column="1" bodyfile="necsim/Landscape.cpp" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="_landscape_8cpp_1ad21ce499b448ebd1b5522d364151f344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double necsim::calculateDistance</definition>
        <argsstring>(const double &amp;start_x, const double &amp;start_y, const double &amp;end_x, const double &amp;end_y)</argsstring>
        <name>calculateDistance</name>
        <param>
          <type>const double &amp;</type>
          <declname>start_x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>start_y</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>end_x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>end_y</declname>
        </param>
        <briefdescription>
<para>Calculates the distance between two points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the start x coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the start y coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the end x coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the end y coodinate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the distance between the points </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.cpp" line="94" column="1" bodyfile="necsim/Landscape.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="_log_file_8cpp_1a5e0dd994d7b2548caeb79aa1e1d63175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string necsim::getTime</definition>
        <argsstring>()</argsstring>
        <name>getTime</name>
        <briefdescription>
<para>Gets the current system time in string form. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the system time in string form </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/LogFile.cpp" line="18" column="1" bodyfile="necsim/LogFile.cpp" bodystart="18" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_log_file_8cpp_1a024da6121b771f444bce6ec6aaa6eeec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string necsim::getDefaultLogFile</definition>
        <argsstring>()</argsstring>
        <name>getDefaultLogFile</name>
        <briefdescription>
<para>Gets the default log file path. Stored at log/DDMMYYYY_HHMMSS.log where DDMMYYYY_HHMMSS are replaced by the current date and time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>location of the default logging position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/LogFile.cpp" line="30" column="1" bodyfile="necsim/LogFile.cpp" bodystart="30" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="_log_file_8cpp_1a98792339a000ae8c1dd53fdb91dd556f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::getUniqueFileName</definition>
        <argsstring>(string &amp;basic_string)</argsstring>
        <name>getUniqueFileName</name>
        <param>
          <type>string &amp;</type>
          <declname>basic_string</declname>
        </param>
        <briefdescription>
<para>Modifies the file name so that it doesn&apos;t point to an existing file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>basic_string</parametername>
</parameternamelist>
<parameterdescription>
<para>the file name to modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/LogFile.cpp" line="40" column="1" bodyfile="necsim/LogFile.cpp" bodystart="40" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8cpp_1a4a05d021a08e46687e2ccb5bd6480cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::loggerIsSetup</definition>
        <argsstring>()</argsstring>
        <name>loggerIsSetup</name>
        <briefdescription>
<para>Checks if the global logger object has been set up. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Logging.cpp" line="15" column="1" bodyfile="necsim/Logging.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8cpp_1ab460cd8c269a19c12b1d3174a46be7c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::writeInfo</definition>
        <argsstring>(string message)</argsstring>
        <name>writeInfo</name>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Writes to cout, or to info in logging module if being compiled with python. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to write out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Logging.cpp" line="20" column="1" bodyfile="necsim/Logging.cpp" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8cpp_1ad3ba224c65ff27fad7471f3af16eb6f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::writeWarning</definition>
        <argsstring>(string message)</argsstring>
        <name>writeWarning</name>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Writes to cerr, or to warning in logging module if being compiled with python. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to write out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Logging.cpp" line="25" column="1" bodyfile="necsim/Logging.cpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8cpp_1ab4667d38630e4e3f114e00572af55b6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::writeError</definition>
        <argsstring>(string message)</argsstring>
        <name>writeError</name>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Writes to cerr, or to error in logging module if being compiled with python. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to write out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Logging.cpp" line="30" column="1" bodyfile="necsim/Logging.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8cpp_1a87e6a81fcccf94d70ce81850e331deb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::writeCritical</definition>
        <argsstring>(string message)</argsstring>
        <name>writeCritical</name>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Writes to cerr, or to critical in logging module if being compiled with python. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to write out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Logging.cpp" line="35" column="1" bodyfile="necsim/Logging.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a251d250e60a63ca0dc4a5f909525c06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int necsim::main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Main function containing program structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of command-line arguments provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a program exit code, 0 if successful, -1 (generally) indicates an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/main.cpp" line="66" column="1" bodyfile="necsim/main.cpp" bodystart="66" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="_map_location_8cpp_1ac7c63fb42883ed21cdc419a9a259328f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; necsim::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const MapLocation &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structnecsim_1_1_map_location" kindref="compound">MapLocation</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the object to write out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/MapLocation.cpp" line="23" column="1" bodyfile="necsim/MapLocation.cpp" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="_map_location_8cpp_1a31cd446125fea64ca0b37e82738a36ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; necsim::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, MapLocation &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="structnecsim_1_1_map_location" kindref="compound">MapLocation</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the object to read to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/MapLocation.cpp" line="29" column="1" bodyfile="necsim/MapLocation.cpp" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1ab02ed33839a950862670fc1514eebb89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const unsigned long</type>
        <definition>const unsigned long necsim::findMinCols</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;matrix1, const Matrix&lt; T &gt; &amp;matrix2)</argsstring>
        <name>findMinCols</name>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>matrix1</declname>
        </param>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>matrix2</declname>
        </param>
        <briefdescription>
<para>Find the minimum columns of the two objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> class </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matrix2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the minimum number of columns between the two matrices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="765" column="1" bodyfile="necsim/Matrix.h" bodystart="765" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1aa25a2d7c4ff618f55491d6b41c931339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const unsigned long</type>
        <definition>const unsigned long necsim::findMinRows</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;matrix1, const Matrix&lt; T &gt; &amp;matrix2)</argsstring>
        <name>findMinRows</name>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>matrix1</declname>
        </param>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>matrix2</declname>
        </param>
        <briefdescription>
<para>Find the minimum rows of the two objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> class </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matrix2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the minimum number of rows between the two matrices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="781" column="1" bodyfile="necsim/Matrix.h" bodystart="781" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="setup_8cpp_1a007a15b61dac0e9b20336d66ff7d38d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::runAsDefault</definition>
        <argsstring>(vector&lt; string &gt; &amp;comargs)</argsstring>
        <name>runAsDefault</name>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>comargs</declname>
        </param>
        <briefdescription>
<para>Sets up the command-line arguments for default parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for testing purposes only. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comargs</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of command-line arguments for putting the parameters into. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/setup.cpp" line="49" column="1" bodyfile="necsim/setup.cpp" bodystart="49" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="setup_8cpp_1a5e5157213fad5ea9f9fa0ea2cf0bca3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::runLarge</definition>
        <argsstring>(vector&lt; string &gt; &amp;comargs)</argsstring>
        <name>runLarge</name>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>comargs</declname>
        </param>
        <briefdescription>
<para>Sets up the command-line arguments for larger-scale default parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for testing purposes only. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comargs</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of command-line arguments for putting the parameters into. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/setup.cpp" line="86" column="1" bodyfile="necsim/setup.cpp" bodystart="86" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="setup_8cpp_1a1bd339049f4fd9c1542b2b9ded03eca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::runXL</definition>
        <argsstring>(vector&lt; string &gt; &amp;comargs)</argsstring>
        <name>runXL</name>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>comargs</declname>
        </param>
        <briefdescription>
<para>Sets up the command-line arguments for default very large scale parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for testing purposes only. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comargs</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of command-line arguments for putting the parameters into. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/setup.cpp" line="123" column="1" bodyfile="necsim/setup.cpp" bodystart="123" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="setup_8cpp_1a88e4566c2590f48af8c004d269c2a803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::removeComOption</definition>
        <argsstring>(unsigned long &amp;argc, vector&lt; string &gt; &amp;comargs)</argsstring>
        <name>removeComOption</name>
        <param>
          <type>unsigned long &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>comargs</declname>
        </param>
        <briefdescription>
<para>Removes the command line options supplied, leaving just a clean vector with the correct data in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/setup.cpp" line="160" column="1" bodyfile="necsim/setup.cpp" bodystart="160" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="_simulation_templates_8h_1a78e8b7b2064e4ed34c7f75d7116955b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const string &amp;</type>
        <definition>const string&amp; necsim::getConfigFileFromCmdArgs</definition>
        <argsstring>(const vector&lt; string &gt; &amp;com_args)</argsstring>
        <name>getConfigFileFromCmdArgs</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>com_args</declname>
        </param>
        <briefdescription>
<para>Gets the [2] element from the vector (which should contain the config file from command-line arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>com_args</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of command-line arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the string at the [2] position containing the path to the config file </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulationTemplates.h" line="29" column="1" bodyfile="necsim/SimulationTemplates.h" bodystart="29" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="_simulation_templates_8h_1aad5a835f245c9b92a8b886cf8e8c4286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void necsim::runMain</definition>
        <argsstring>(const string &amp;config_file)</argsstring>
        <name>runMain</name>
        <param>
          <type>const string &amp;</type>
          <declname>config_file</declname>
        </param>
        <briefdescription>
<para>Template class for running simulations from all <ref refid="classnecsim_1_1_tree" kindref="compound">Tree</ref> types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the class (either <ref refid="classnecsim_1_1_tree" kindref="compound">Tree</ref>, or a child of <ref refid="classnecsim_1_1_tree" kindref="compound">Tree</ref>) of the simulation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the config file to read simulation parameters from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulationTemplates.h" line="48" column="1" bodyfile="necsim/SimulationTemplates.h" bodystart="48" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="_species_list_8cpp_1a89820d28f2bf45493d0c19c67d6f6360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; necsim::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const SpeciesList &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnecsim_1_1_species_list" kindref="compound">SpeciesList</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_species_list" kindref="compound">SpeciesList</ref> object to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpeciesList.cpp" line="244" column="1" bodyfile="necsim/SpeciesList.cpp" bodystart="244" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="_species_list_8cpp_1a936dfe5fe5a1214b50ec75042bc64f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; necsim::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, SpeciesList &amp;r)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_species_list" kindref="compound">SpeciesList</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_species_list" kindref="compound">SpeciesList</ref> object to input to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpeciesList.cpp" line="250" column="1" bodyfile="necsim/SpeciesList.cpp" bodystart="250" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="_tree_node_8cpp_1a6d8e8bcd1a830c26cdcafdda4765cd66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; necsim::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const TreeNode &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnecsim_1_1_tree_node" kindref="compound">TreeNode</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>a Treenode object to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/TreeNode.cpp" line="186" column="1" bodyfile="necsim/TreeNode.cpp" bodystart="186" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="_tree_node_8cpp_1af45f6159d16c5fd139bc2c2cc55706a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; necsim::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, TreeNode &amp;t)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_tree_node" kindref="compound">TreeNode</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>a Treenode object to input to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/TreeNode.cpp" line="196" column="1" bodyfile="necsim/TreeNode.cpp" bodystart="196" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="_py_logging_8cpp_1ad185d30eb20800d396e06f8dbb877378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_py_logger" kindref="compound">PyLogger</ref> *</type>
        <definition>PyLogger * necsim::getGlobalLogger</definition>
        <argsstring>(PyObject *logger, PyObject *log_function)</argsstring>
        <name>getGlobalLogger</name>
        <param>
          <type>PyObject *</type>
          <declname>logger</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>log_function</declname>
        </param>
        <briefdescription>
<para>Generates the global logger object and adds the logger and log functions to the Python logger. </para>
        </briefdescription>
        <detaileddescription>
<para>Each call to getGlobalLogger should be matched by a call to removeGlobalLogger <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>logger</parametername>
</parameternamelist>
<parameterdescription>
<para>the Python logger object to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_function</parametername>
</parameternamelist>
<parameterdescription>
<para>the Python logging function to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the global logger object as a pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogging.cpp" line="23" column="1" bodyfile="PyLogging.cpp" bodystart="23" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="_py_logging_8cpp_1adb549c03cea2b32edf32f1e906b3f7ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::removeGlobalLogger</definition>
        <argsstring>()</argsstring>
        <name>removeGlobalLogger</name>
        <briefdescription>
<para>Safely deletes the global logger object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyLogging.cpp" line="42" column="1" bodyfile="PyLogging.cpp" bodystart="42" bodyend="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="necsim/ActivityMap.cpp" line="21" column="1"/>
  </compounddef>
</doxygen>
