<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="structnecsim_1_1_metacommunities_array" kind="struct" language="C++" prot="public">
    <compoundname>necsim::MetacommunitiesArray</compoundname>
    <includes refid="parameters_8h" local="no">parameters.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structnecsim_1_1_metacommunities_array_1a59c856a3b57a619d2991a9cc2a804f1e" prot="public" static="no" mutable="no">
        <type>vector&lt; shared_ptr&lt; <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt; &gt;</type>
        <definition>vector&lt;shared_ptr&lt;MetacommunityParameters&gt; &gt; necsim::MetacommunitiesArray::metacomm_parameters</definition>
        <argsstring></argsstring>
        <name>metacomm_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="280" column="1" bodyfile="necsim/parameters.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a93f5ddee636e82ff6322bb4de94f06cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>necsim::MetacommunitiesArray::MetacommunitiesArray</definition>
        <argsstring>()</argsstring>
        <name>MetacommunitiesArray</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="285" column="1" bodyfile="necsim/parameters.cpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1af27b3b8f1f967817304df30e3d9fe126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>necsim::MetacommunitiesArray::~MetacommunitiesArray</definition>
        <argsstring>()=default</argsstring>
        <name>~MetacommunitiesArray</name>
        <briefdescription>
<para>Trivial destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a1d57b90a40ea1959969143377f10462d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; shared_ptr&lt; <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt; &gt;::iterator</type>
        <definition>vector&lt; shared_ptr&lt; MetacommunityParameters &gt; &gt;::iterator necsim::MetacommunitiesArray::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Support for range-based for loop iteration over metacomm_parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the start of the parameters vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="296" column="1" bodyfile="necsim/parameters.cpp" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1ae52d2f22a388c2afb71e67d32dcd39c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; shared_ptr&lt; <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt; &gt;::iterator</type>
        <definition>vector&lt; shared_ptr&lt; MetacommunityParameters &gt; &gt;::iterator necsim::MetacommunitiesArray::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Support for range-based for loop iteration over metacomm_parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the end of the parameters vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="302" column="1" bodyfile="necsim/parameters.cpp" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a50772bf6d267b8b4ef1c10552f8fe8f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; shared_ptr&lt; <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt; &gt;::const_iterator</type>
        <definition>vector&lt; shared_ptr&lt; MetacommunityParameters &gt; &gt;::const_iterator necsim::MetacommunitiesArray::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Support for range-based for loop iteration over metacomm_parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the start of the parameters vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="308" column="1" bodyfile="necsim/parameters.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a1967a631929573e35841ffe6b89de505" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; shared_ptr&lt; <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt; &gt;::const_iterator</type>
        <definition>vector&lt; shared_ptr&lt; MetacommunityParameters &gt; &gt;::const_iterator necsim::MetacommunitiesArray::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Support for range-based for loop iteration over metacomm_parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the end of the parameters vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="314" column="1" bodyfile="necsim/parameters.cpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1aea4fc2b49958348a0fdc2c7272376e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::MetacommunitiesArray::pushBack</definition>
        <argsstring>(const unsigned long &amp;reference, const unsigned long &amp;metacommunity_size, const long double &amp;speciation_rate, const string &amp;option, const unsigned long &amp;external_reference)</argsstring>
        <name>pushBack</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>reference</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>metacommunity_size</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>external_reference</declname>
        </param>
        <briefdescription>
<para>Adds an extra <ref refid="structnecsim_1_1_community_parameters" kindref="compound">CommunityParameters</ref> object to the calc_array vector with the supplied variables. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for this set of metacommunity parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate used in generation of the metacommunity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the metacommunity used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="324" column="1" bodyfile="necsim/parameters.cpp" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1aba6fa57862c117093fd137d90556b1c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::MetacommunitiesArray::pushBack</definition>
        <argsstring>(shared_ptr&lt; MetacommunityParameters &gt; tmp_param)</argsstring>
        <name>pushBack</name>
        <param>
          <type>shared_ptr&lt; <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt;</type>
          <declname>tmp_param</declname>
        </param>
        <briefdescription>
<para>Adds the provided PastMetacommunityParameters object to the calc_array vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmp_param</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of metacommunity parameters to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="332" column="1" bodyfile="necsim/parameters.cpp" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1ac87db8785762d5a63e558c5deb0146f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::MetacommunitiesArray::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Wipes the internal vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="337" column="1" bodyfile="necsim/parameters.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1af41e17c37a1faf1ffd1c820dae4687b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::MetacommunitiesArray::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Gets the size of the array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of metacommunity parameters that have been added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="343" column="1" bodyfile="necsim/parameters.cpp" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a02005a2b93ccf2d270df5b8f39820465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunitiesArray::empty</definition>
        <argsstring>()</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Check if the array is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the array has no elements in </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="349" column="1" bodyfile="necsim/parameters.cpp" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a58cfe9ef61fdc155063cc325da7a3551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::MetacommunitiesArray::addNew</definition>
        <argsstring>(const unsigned long &amp;metacommunity_size, const long double &amp;speciation_rate, const string &amp;option, const unsigned long &amp;external_reference)</argsstring>
        <name>addNew</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>metacommunity_size</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>external_reference</declname>
        </param>
        <briefdescription>
<para>Adds a new metacommunities calculation paremeters reference, with a new unique reference. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate of the new calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the metacommunity in the new calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new reference number, which should be unique </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="359" column="1" bodyfile="necsim/parameters.cpp" bodystart="303" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1ae7d244723f521a693eca349fcf41d153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::MetacommunitiesArray::addNew</definition>
        <argsstring>(const MetacommunityParameters &amp;metacomm_in)</argsstring>
        <name>addNew</name>
        <param>
          <type>const <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>metacomm_in</declname>
        </param>
        <briefdescription>
<para>Adds a new set of metacommunity parameters to the array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metacomm_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the new metacommunity parameters to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new reference number, which should be unique </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="367" column="1" bodyfile="necsim/parameters.cpp" bodystart="336" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1af4e072a3def0a4baf003b52fec97ecad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunitiesArray::hasOption</definition>
        <argsstring>(const unsigned long &amp;metacommunity_size, const long double &amp;speciation_rate, const string &amp;option, const unsigned long &amp;external_reference)</argsstring>
        <name>hasOption</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>metacommunity_size</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>external_reference</declname>
        </param>
        <briefdescription>
<para>Checks whether the calculation with the supplied variables has already been performed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to check for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of metacommunity to check for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the reference exists in past metacommunity parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="377" column="1" bodyfile="necsim/parameters.cpp" bodystart="342" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1ada257d181d22aabf8e83af97e2581989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunitiesArray::hasOption</definition>
        <argsstring>(unsigned long reference)</argsstring>
        <name>hasOption</name>
        <param>
          <type>unsigned long</type>
          <declname>reference</declname>
        </param>
        <briefdescription>
<para>Checks whether the calculation with the supplied reference has already been performed. Overloaded version for checking references. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to check for in past metacommunity parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the reference exists in past metacommunity parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="386" column="1" bodyfile="necsim/parameters.cpp" bodystart="355" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a0bed52318ae45bea7ed451ee3d916e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunitiesArray::hasOption</definition>
        <argsstring>(const MetacommunityParameters &amp;metacomm_in)</argsstring>
        <name>hasOption</name>
        <param>
          <type>const <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>metacomm_in</declname>
        </param>
        <briefdescription>
<para>Checks whether the calculation with the supplied reference has already been performed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metacomm_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity parameters to check for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the metacommunity already exists in past metacommunity parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="393" column="1" bodyfile="necsim/parameters.cpp" bodystart="367" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a9a17ee90a54b7535f786c298ab299043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::MetacommunitiesArray::getReference</definition>
        <argsstring>(const unsigned long &amp;metacommunity_size, const long double &amp;speciation_rate, const string &amp;option, const unsigned long &amp;external_reference)</argsstring>
        <name>getReference</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>metacommunity_size</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>external_reference</declname>
        </param>
        <briefdescription>
<para>Gets the metacommunity reference for the provided parameters, or returns 0 if it doesn&apos;t exist. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity speciation rate to obtain for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity size to apply for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>bool for checking if fragments were used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the metacommunity reference number, or 0 if it doesn&apos;t exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="404" column="1" bodyfile="necsim/parameters.cpp" bodystart="373" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a91e26f0cc731e80b876ea1b5f993a0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::MetacommunitiesArray::getReference</definition>
        <argsstring>(const MetacommunityParameters &amp;metacomm_parameters)</argsstring>
        <name>getReference</name>
        <param>
          <type>const <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>metacomm_parameters</declname>
        </param>
        <briefdescription>
<para>Gets the metacommunity reference for the provided parameters, or returns 0 if it doesn&apos;t exist. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metacomm_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameters to check for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the metacommunity reference number, or 0 if it doesn&apos;t exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="412" column="1" bodyfile="necsim/parameters.cpp" bodystart="401" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a166309d2d7f06e0955d39fc60fc2c8fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::MetacommunitiesArray::addNull</definition>
        <argsstring>()</argsstring>
        <name>addNull</name>
        <briefdescription>
<para>Adds an empty metacommunity parameters option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="417" column="1" bodyfile="necsim/parameters.cpp" bodystart="407" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunities_array_1a1f6fb6d6e2811f6aa71999a9dc890e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunitiesArray::hasMetacommunityOption</definition>
        <argsstring>()</argsstring>
        <name>hasMetacommunityOption</name>
        <briefdescription>
<para>Determines if the array has any <ref refid="classnecsim_1_1_metacommunity" kindref="compound">Metacommunity</ref> options (other than a null option). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="423" column="1" bodyfile="necsim/parameters.cpp" bodystart="413" bodyend="424"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains an array of <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> that have been applied to the coalescence tree. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="188">
        <label>std::vector&lt; shared_ptr&lt; necsim::MetacommunityParameters &gt; &gt;</label>
        <childnode refid="189" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="192">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="187">
        <label>necsim::MetacommunitiesArray</label>
        <link refid="structnecsim_1_1_metacommunities_array"/>
        <childnode refid="188" relation="usage">
          <edgelabel>metacomm_parameters</edgelabel>
        </childnode>
      </node>
      <node id="190">
        <label>necsim::MetacommunityParameters</label>
        <link refid="structnecsim_1_1_metacommunity_parameters"/>
        <childnode refid="191" relation="usage">
          <edgelabel>option</edgelabel>
        </childnode>
      </node>
      <node id="189">
        <label>std::shared_ptr&lt; necsim::MetacommunityParameters &gt;</label>
        <childnode refid="190" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="191">
        <label>std::string</label>
        <childnode refid="192" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/parameters.h" line="279" column="1" bodyfile="necsim/parameters.h" bodystart="278" bodyend="424"/>
    <listofallmembers>
      <member refid="structnecsim_1_1_metacommunities_array_1a58cfe9ef61fdc155063cc325da7a3551" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>addNew</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1ae7d244723f521a693eca349fcf41d153" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>addNew</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a166309d2d7f06e0955d39fc60fc2c8fd" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>addNull</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a1d57b90a40ea1959969143377f10462d" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>begin</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a50772bf6d267b8b4ef1c10552f8fe8f5" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>begin</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1ac87db8785762d5a63e558c5deb0146f7" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>clear</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a02005a2b93ccf2d270df5b8f39820465" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>empty</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1ae52d2f22a388c2afb71e67d32dcd39c5" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>end</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a1967a631929573e35841ffe6b89de505" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>end</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a9a17ee90a54b7535f786c298ab299043" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>getReference</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a91e26f0cc731e80b876ea1b5f993a0ab" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>getReference</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a1f6fb6d6e2811f6aa71999a9dc890e73" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>hasMetacommunityOption</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1af4e072a3def0a4baf003b52fec97ecad" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>hasOption</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1ada257d181d22aabf8e83af97e2581989" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>hasOption</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a0bed52318ae45bea7ed451ee3d916e4e" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>hasOption</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a59c856a3b57a619d2991a9cc2a804f1e" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>metacomm_parameters</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1a93f5ddee636e82ff6322bb4de94f06cb" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>MetacommunitiesArray</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1aea4fc2b49958348a0fdc2c7272376e12" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>pushBack</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1aba6fa57862c117093fd137d90556b1c5" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>pushBack</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1af41e17c37a1faf1ffd1c820dae4687b5" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>size</name></member>
      <member refid="structnecsim_1_1_metacommunities_array_1af27b3b8f1f967817304df30e3d9fe126" prot="public" virt="non-virtual"><scope>necsim::MetacommunitiesArray</scope><name>~MetacommunitiesArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
