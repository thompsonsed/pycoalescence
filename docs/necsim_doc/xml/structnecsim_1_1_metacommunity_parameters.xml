<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="structnecsim_1_1_metacommunity_parameters" kind="struct" language="C++" prot="public">
    <compoundname>necsim::MetacommunityParameters</compoundname>
    <includes refid="parameters_8h" local="no">parameters.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structnecsim_1_1_metacommunity_parameters_1a4d1e34bfc2448fb56076e4ce10f1b5f5" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::MetacommunityParameters::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="204" column="1" bodyfile="necsim/parameters.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnecsim_1_1_metacommunity_parameters_1a10537381c0398c5c4660459fecf19ad5" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::MetacommunityParameters::metacommunity_size</definition>
        <argsstring></argsstring>
        <name>metacommunity_size</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="205" column="1" bodyfile="necsim/parameters.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnecsim_1_1_metacommunity_parameters_1a95b34d3e11585c66d32ed8a56f46d1fd" prot="public" static="no" mutable="no">
        <type>long double</type>
        <definition>long double necsim::MetacommunityParameters::speciation_rate</definition>
        <argsstring></argsstring>
        <name>speciation_rate</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="206" column="1" bodyfile="necsim/parameters.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnecsim_1_1_metacommunity_parameters_1a7dc81c506dd3face645919d6adc6ae18" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string necsim::MetacommunityParameters::option</definition>
        <argsstring></argsstring>
        <name>option</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="207" column="1" bodyfile="necsim/parameters.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnecsim_1_1_metacommunity_parameters_1ac7a5c138a88dfc1ee24f9719df90f27e" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::MetacommunityParameters::external_reference</definition>
        <argsstring></argsstring>
        <name>external_reference</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="208" column="1" bodyfile="necsim/parameters.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1a41a6da3060a2f9d8c77acc045c4ffb2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>necsim::MetacommunityParameters::MetacommunityParameters</definition>
        <argsstring>()</argsstring>
        <name>MetacommunityParameters</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="213" column="1" bodyfile="necsim/parameters.cpp" bodystart="146" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1a1042bc586603ab17d1cc0bb9965e5626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>necsim::MetacommunityParameters::~MetacommunityParameters</definition>
        <argsstring>()=default</argsstring>
        <name>~MetacommunityParameters</name>
        <briefdescription>
<para>Trivial destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1ac24439ca703a87df87bd3acfe9ab3970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>necsim::MetacommunityParameters::MetacommunityParameters</definition>
        <argsstring>(const unsigned long &amp;reference_in, const unsigned long &amp;metacommunity_size_in, const long double &amp;speciation_rate_in, const string &amp;option_in, const unsigned long &amp;external_reference_in)</argsstring>
        <name>MetacommunityParameters</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>reference_in</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>metacommunity_size_in</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate_in</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option_in</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>external_reference_in</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref>, storing a previously applied metacommunity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity reference number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate used for metacommunity generation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_rate_in</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the tested metacommunity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="228" column="1" bodyfile="necsim/parameters.cpp" bodystart="155" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1acf219468d5f2e11223f7443d14ef5f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunityParameters::compare</definition>
        <argsstring>(unsigned long metacommunity_size_in, long double speciation_rate_in, const string &amp;option_in, const unsigned long &amp;ext_reference_in)</argsstring>
        <name>compare</name>
        <param>
          <type>unsigned long</type>
          <declname>metacommunity_size_in</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>speciation_rate_in</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option_in</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>ext_reference_in</declname>
        </param>
        <briefdescription>
<para>Compare these set of parameters with the input set. If they match, return true, otherwise return false. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate_in</parametername>
</parameternamelist>
<parameterdescription>
<para>speciation rate to compare with stored community parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size_in</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the tested metacommunity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the two parameter sets are identical </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="240" column="1" bodyfile="necsim/parameters.cpp" bodystart="167" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1a9aa195b52e0c37182555467a08ecc219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunityParameters::compare</definition>
        <argsstring>(const MetacommunityParameters &amp;metacomm_in)</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>metacomm_in</declname>
        </param>
        <briefdescription>
<para>Compare these set of parameters with the input set. If they match, return true, otherwise return false. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metacomm_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the two parameter sets are identical </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="248" column="1" bodyfile="necsim/parameters.cpp" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1adee24e6e6537a159f56e127c36900255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunityParameters::compare</definition>
        <argsstring>(unsigned long reference_in)</argsstring>
        <name>compare</name>
        <param>
          <type>unsigned long</type>
          <declname>reference_in</declname>
        </param>
        <briefdescription>
<para>Checks if the supplied reference is the same in the metacommunity reference. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to check against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="255" column="1" bodyfile="necsim/parameters.cpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1acbea8d62f08c39b6882ace9c208e4108" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunityParameters::isMetacommunityOption</definition>
        <argsstring>() const</argsstring>
        <name>isMetacommunityOption</name>
        <briefdescription>
<para>Checks if this combination of metacommunity parameters is not a null option. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the combination is valid (i.e. not null) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="261" column="1" bodyfile="necsim/parameters.cpp" bodystart="196" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1ab6e60778ae830a2b99075f4926eb85d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::MetacommunityParameters::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Wipes the metacommunity parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="266" column="1" bodyfile="necsim/parameters.cpp" bodystart="220" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1ac24d776cf173da2297caa2b51b488e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
        <definition>MetacommunityParameters &amp; necsim::MetacommunityParameters::operator=</definition>
        <argsstring>(const MetacommunityParameters &amp;parameters)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="268" column="1" bodyfile="necsim/parameters.cpp" bodystart="229" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1a6de3e0e7f825514f4db7fccdc178dff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunityParameters::operator==</definition>
        <argsstring>(const MetacommunityParameters &amp;parameters)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="270" column="1" bodyfile="necsim/parameters.cpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="structnecsim_1_1_metacommunity_parameters_1a317d64d726bc555402a5be8f51a8b67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::MetacommunityParameters::operator!=</definition>
        <argsstring>(const MetacommunityParameters &amp;parameters)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structnecsim_1_1_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="272" column="1" bodyfile="necsim/parameters.cpp" bodystart="244" bodyend="247"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains a set of metacommunity parameters that have been applied, or are to be applied, to the coalescence tree. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="251">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="249">
        <label>necsim::MetacommunityParameters</label>
        <link refid="structnecsim_1_1_metacommunity_parameters"/>
        <childnode refid="250" relation="usage">
          <edgelabel>option</edgelabel>
        </childnode>
      </node>
      <node id="250">
        <label>std::string</label>
        <childnode refid="251" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/parameters.h" line="203" column="1" bodyfile="necsim/parameters.h" bodystart="202" bodyend="273"/>
    <listofallmembers>
      <member refid="structnecsim_1_1_metacommunity_parameters_1ab6e60778ae830a2b99075f4926eb85d3" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>clear</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1acf219468d5f2e11223f7443d14ef5f4e" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>compare</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1a9aa195b52e0c37182555467a08ecc219" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>compare</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1adee24e6e6537a159f56e127c36900255" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>compare</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1ac7a5c138a88dfc1ee24f9719df90f27e" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>external_reference</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1acbea8d62f08c39b6882ace9c208e4108" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>isMetacommunityOption</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1a10537381c0398c5c4660459fecf19ad5" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>metacommunity_size</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1a41a6da3060a2f9d8c77acc045c4ffb2b" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>MetacommunityParameters</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1ac24439ca703a87df87bd3acfe9ab3970" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>MetacommunityParameters</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1a317d64d726bc555402a5be8f51a8b67a" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>operator!=</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1ac24d776cf173da2297caa2b51b488e93" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>operator=</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1a6de3e0e7f825514f4db7fccdc178dff3" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>operator==</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1a7dc81c506dd3face645919d6adc6ae18" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>option</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1a4d1e34bfc2448fb56076e4ce10f1b5f5" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>reference</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1a95b34d3e11585c66d32ed8a56f46d1fd" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>speciation_rate</name></member>
      <member refid="structnecsim_1_1_metacommunity_parameters_1a1042bc586603ab17d1cc0bb9965e5626" prot="public" virt="non-virtual"><scope>necsim::MetacommunityParameters</scope><name>~MetacommunityParameters</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
