<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_landscape_metrics_calculator" kind="class" language="C++" prot="public">
    <compoundname>LandscapeMetricsCalculator</compoundname>
    <basecompoundref refid="class_map" prot="public" virt="non-virtual">Map&lt; double &gt;</basecompoundref>
    <includes refid="_landscape_metrics_calculator_8h" local="no">LandscapeMetricsCalculator.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_landscape_metrics_calculator_1af663b7cd7f64e71a6c7a6fed6c7bd695" prot="private" static="no" mutable="no">
        <type>vector&lt; <ref refid="struct_cell" kindref="compound">Cell</ref> &gt;</type>
        <definition>vector&lt;Cell&gt; LandscapeMetricsCalculator::all_cells</definition>
        <argsstring></argsstring>
        <name>all_cells</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LandscapeMetricsCalculator.h" line="26" column="1" bodyfile="LandscapeMetricsCalculator.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_landscape_metrics_calculator_1a8b6c65f14753803f023c078cd615a25d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>LandscapeMetricsCalculator::LandscapeMetricsCalculator</definition>
        <argsstring>()</argsstring>
        <name>LandscapeMetricsCalculator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LandscapeMetricsCalculator.h" line="29" column="1" bodyfile="LandscapeMetricsCalculator.h" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_metrics_calculator_1a49ca32335b116b9c5291039334551410" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual LandscapeMetricsCalculator::~LandscapeMetricsCalculator</definition>
        <argsstring>()</argsstring>
        <name>~LandscapeMetricsCalculator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LandscapeMetricsCalculator.h" line="31" column="1" bodyfile="LandscapeMetricsCalculator.h" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_metrics_calculator_1a34f344e3282eead2091fe8ccb32e6d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double LandscapeMetricsCalculator::calculateMNN</definition>
        <argsstring>()</argsstring>
        <name>calculateMNN</name>
        <briefdescription>
<para>Calculates the mean distance between nearest neighbours on a <ref refid="class_map" kindref="compound">Map</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the mean distance between every cell and its nearest neighbour </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LandscapeMetricsCalculator.h" line="37" column="1" bodyfile="LandscapeMetricsCalculator.cpp" bodystart="14" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_metrics_calculator_1a16bde8469f437abc21602eedb979e5e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LandscapeMetricsCalculator::checkMinDistance</definition>
        <argsstring>(Cell &amp;home_cell, const long &amp;x, const long &amp;y, double &amp;min_distance)</argsstring>
        <name>checkMinDistance</name>
        <param>
          <type><ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>home_cell</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>min_distance</declname>
        </param>
        <briefdescription>
<para>Checks if the minimum distance between cells is a new minimum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home_cell</parametername>
</parameternamelist>
<parameterdescription>
<para>the cell to check the distance from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the new location </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the new location </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_distance</parametername>
</parameternamelist>
<parameterdescription>
<para>the previous minimum distance </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LandscapeMetricsCalculator.h" line="46" column="1" bodyfile="LandscapeMetricsCalculator.cpp" bodystart="34" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_metrics_calculator_1a9dd4cde4aad066b3b204553718a63a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double LandscapeMetricsCalculator::findNearestNeighbourDistance</definition>
        <argsstring>(const long &amp;row, const long &amp;col)</argsstring>
        <name>findNearestNeighbourDistance</name>
        <param>
          <type>const long &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Determines the distance to the nearest neighbour of a cell. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LandscapeMetricsCalculator.h" line="54" column="1" bodyfile="LandscapeMetricsCalculator.cpp" bodystart="49" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_metrics_calculator_1a084eea2435b7d15049873ae4613b0307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LandscapeMetricsCalculator::createCellList</definition>
        <argsstring>()</argsstring>
        <name>createCellList</name>
        <briefdescription>
<para>Creates a list containing all habitat cells in the landscape. List is stored in all_cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LandscapeMetricsCalculator.h" line="60" column="1" bodyfile="LandscapeMetricsCalculator.cpp" bodystart="124" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_metrics_calculator_1aff48704d3a9e02da4914ac2b08c5f79b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double LandscapeMetricsCalculator::calculateClumpiness</definition>
        <argsstring>()</argsstring>
        <name>calculateClumpiness</name>
        <briefdescription>
<para>Calculates the clumpiness metric, which measures the degree to which the focal habitat is aggregated or clumped given its total area. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the clumpiness metric </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LandscapeMetricsCalculator.h" line="67" column="1" bodyfile="LandscapeMetricsCalculator.cpp" bodystart="144" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_metrics_calculator_1ae477e368c4f13042cf2f9a47e62d60ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long LandscapeMetricsCalculator::calculateNoAdjacencies</definition>
        <argsstring>()</argsstring>
        <name>calculateNoAdjacencies</name>
        <briefdescription>
<para>Calculates the number of adjacencies in the landscape. </para>        </briefdescription>
        <detaileddescription>
<para>Adjacencies are habitat cells that are directly next to each other. Note that this uses the &quot;double=count&quot; method. <simplesect kind="return"><para>the number of adjacent cells in the landscape. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LandscapeMetricsCalculator.h" line="76" column="1" bodyfile="LandscapeMetricsCalculator.cpp" bodystart="166" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_metrics_calculator_1a1ba606d6fb687aceaf4a8e31e8f17273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double LandscapeMetricsCalculator::calculateMinPerimeter</definition>
        <argsstring>()</argsstring>
        <name>calculateMinPerimeter</name>
        <briefdescription>
<para>Calculates the minimum bounding perimeter for square cells on a landscape. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the minimum bounding perimeter for cells on a landscape </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LandscapeMetricsCalculator.h" line="82" column="1" bodyfile="LandscapeMetricsCalculator.cpp" bodystart="195" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1aa2764c9ae1c54c1821fa4f63b88fe0f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::open</definition>
        <argsstring>(const string &amp;filename_in)</argsstring>
        <name>open</name>
        <param>
          <type>const string &amp;</type>
          <declname>filename_in</declname>
        </param>
        <briefdescription>
<para>Opens the provided filename to the poDataset object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>file to open in read-only mode. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="80" column="1" bodyfile="necsim/Map.h" bodystart="80" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a2389e09950706ef49640976837186c79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::open</definition>
        <argsstring>()</argsstring>
        <name>open</name>
        <briefdescription>
<para>Overloaded open for using the preset file name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="101" column="1" bodyfile="necsim/Map.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a19f6874b008fcbfac213341d05c2f443" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Map&lt; double  &gt;::isOpen</definition>
        <argsstring>()</argsstring>
        <name>isOpen</name>
        <briefdescription>
<para>Checks if the connection to the map file has already been opened. </para>        </briefdescription>
        <detaileddescription>
<para>All this does is check if poDataset is a null pointer. <simplesect kind="return"><para>true if poDataset is a null pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="112" column="1" bodyfile="necsim/Map.h" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ad73fafd17ff95872e9b63945584ae81f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Destroys the connection to the dataset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="120" column="1" bodyfile="necsim/Map.h" bodystart="120" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ade2338d7a8d598c343208b633f8a3a93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::getRasterBand</definition>
        <argsstring>()</argsstring>
        <name>getRasterBand</name>
        <briefdescription>
<para>Sets the raster band to the first raster. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="137" column="1" bodyfile="necsim/Map.h" bodystart="137" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a4e441dcda33d78bef193b1ad1265b5e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::getBlockSizes</definition>
        <argsstring>()</argsstring>
        <name>getBlockSizes</name>
        <briefdescription>
<para>Obtains the x and y dimensions from the tif file for reading in blocks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="157" column="1" bodyfile="necsim/Map.h" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a180284cfba3442eb3d62fc41d0d8f546" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::getMetaData</definition>
        <argsstring>()</argsstring>
        <name>getMetaData</name>
        <briefdescription>
<para>Sets the no data, data type and data type name values from the tif file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="166" column="1" bodyfile="necsim/Map.h" bodystart="166" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1afd32790ea28d0c5aa99b582b2d474933" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Map&lt; double  &gt;::getUpperLeftX</definition>
        <argsstring>()</argsstring>
        <name>getUpperLeftX</name>
        <briefdescription>
<para>Gets the upper left x (longitude) coordinate. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>upper left x of the map </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="251" column="1" bodyfile="necsim/Map.h" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a2d7b63836d06b2710192e7c8afd38641" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Map&lt; double  &gt;::getUpperLeftY</definition>
        <argsstring>()</argsstring>
        <name>getUpperLeftY</name>
        <briefdescription>
<para>Gets the upper left y (latitude) coordinate. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>upper left y of the map </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="260" column="1" bodyfile="necsim/Map.h" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ad1a25204dce37addc3453e091552b014" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::import</definition>
        <argsstring>(const string &amp;filename) override</argsstring>
        <name>import</name>
        <reimplements refid="class_matrix_1a2476517be70c810ad586d0f0cf4ec121">import</reimplements>
        <param>
          <type>const string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Imports the matrix from a csv file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if type detection for the filename fails. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to import. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="271" column="1" bodyfile="necsim/Map.h" bodystart="271" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a2306683b0b3b4ddb7d776d1ff60d4491" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Map&lt; double  &gt;::importTif</definition>
        <argsstring>(const string &amp;filename)</argsstring>
        <name>importTif</name>
        <param>
          <type>const string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Imports the matrix from a tif file using the gdal library functions. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Opens a connection to the file object, which should be closed. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the file to import. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="284" column="1" bodyfile="necsim/Map.h" bodystart="284" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ade20cc1876ba2774f0f8274d432d89c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Map&lt; double  &gt;::openOffsetMap</definition>
        <argsstring>(Map &amp;offset_map)</argsstring>
        <name>openOffsetMap</name>
        <param>
          <type><ref refid="class_map" kindref="compound">Map</ref> &amp;</type>
          <declname>offset_map</declname>
        </param>
        <briefdescription>
<para>Opens the offset map and fetches the metadata. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset map to open (should be the larger map). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the offset map is opened within this function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="343" column="1" bodyfile="necsim/Map.h" bodystart="343" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a39d76e341e0f817d65ddf0100cfe5f26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::closeOffsetMap</definition>
        <argsstring>(Map &amp;offset_map, const bool &amp;opened_here)</argsstring>
        <name>closeOffsetMap</name>
        <param>
          <type><ref refid="class_map" kindref="compound">Map</ref> &amp;</type>
          <declname>offset_map</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>opened_here</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="356" column="1" bodyfile="necsim/Map.h" bodystart="356" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a200701b23560dd38238801522b234e78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::calculateOffset</definition>
        <argsstring>(Map &amp;offset_map, long &amp;offset_x, long &amp;offset_y)</argsstring>
        <name>calculateOffset</name>
        <param>
          <type><ref refid="class_map" kindref="compound">Map</ref> &amp;</type>
          <declname>offset_map</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>offset_x</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>offset_y</declname>
        </param>
        <briefdescription>
<para>Calculates the offset between the two maps. </para>        </briefdescription>
        <detaileddescription>
<para>The offset_map should be larger and contain this map, otherwise returned values will be negative</para><para><simplesect kind="note"><para>Opens a connection to the tif file (if it has not already been opened), which is then closed. If the connection is already open, then it will not be closed and it is assumed logic elsewhere achieves this.</para></simplesect>
<simplesect kind="note"><para>Offsets are returned as rounded integers at the resolution of the smaller map.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset map to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x offset variable to fill </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y offset variable to fill </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="378" column="1" bodyfile="necsim/Map.h" bodystart="378" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a9862291ea99fe1718d758213b3687bd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map&lt; double  &gt;::roundedScale</definition>
        <argsstring>(Map &amp;offset_map)</argsstring>
        <name>roundedScale</name>
        <param>
          <type><ref refid="class_map" kindref="compound">Map</ref> &amp;</type>
          <declname>offset_map</declname>
        </param>
        <briefdescription>
<para>Calculates the relative scale of this map compared to the offset map. </para>        </briefdescription>
        <detaileddescription>
<para>The offset map should be larger and contain this map.</para><para><simplesect kind="note"><para>Only the x resolution is checked, it is assumed the x and y resolutions of both maps is the same (i.e. each cell on the map is a square.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset map object to read from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the relative scale of the offset map </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="397" column="1" bodyfile="necsim/Map.h" bodystart="397" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a0c17360ca7fa935d59f2169fd0007630" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double &gt;::internalImport</definition>
        <argsstring>()</argsstring>
        <name>internalImport</name>
        <briefdescription>
<para>Default importer when we rely on the default gdal method of converting between values. Note that importing doubles to ints results in the values being rounded down. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if a tif file exists and can be imported, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="409" column="1" bodyfile="necsim/Map.h" bodystart="409" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a414e6bc9305ab830836cf817cb4a0d60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::defaultImport</definition>
        <argsstring>()</argsstring>
        <name>defaultImport</name>
        <briefdescription>
<para>Default import routine for any type. Provided as a separate function so implementation can be called from any template class type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="420" column="1" bodyfile="necsim/Map.h" bodystart="420" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1aaefe833ab35a68ce54e7eec996c48971" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::importFromDoubleAndMakeBool</definition>
        <argsstring>()</argsstring>
        <name>importFromDoubleAndMakeBool</name>
        <briefdescription>
<para>Imports from the supplied filename into the GeoTiff object, converting doubles to booleans. The threshold for conversion is x&gt;0.5 -&gt; true, false otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="444" column="1" bodyfile="necsim/Map.h" bodystart="444" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ae88574927ad3a38fc0a9bc253a9e4a7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::importUsingBuffer</definition>
        <argsstring>(GDALDataType dt_buff)</argsstring>
        <name>importUsingBuffer</name>
        <param>
          <type>GDALDataType</type>
          <declname>dt_buff</declname>
        </param>
        <briefdescription>
<para>Imports from the supplied filename into the GeoTiff object, converting doubles to booleans. The threshold for conversion is x&gt;0.5 -&gt; true, false otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dt_buff</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer type for the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T2</parametername>
</parameternamelist>
<parameterdescription>
<para>the template type for data reading. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="482" column="1" bodyfile="necsim/Map.h" bodystart="482" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a03e0486e704090765d253b18a9dde0f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::printNumberComplete</definition>
        <argsstring>(const uint32_t &amp;j, unsigned int &amp;number_printed)</argsstring>
        <name>printNumberComplete</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>number_printed</declname>
        </param>
        <briefdescription>
<para>Print the percentage complete during import. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the counter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_printed</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of previously printed lines </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="554" column="1" bodyfile="necsim/Map.h" bodystart="554" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a6387185da6dc3063cd2311ffab0a5fba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map&lt; double  &gt;::checkTifImportFailure</definition>
        <argsstring>()</argsstring>
        <name>checkTifImportFailure</name>
        <briefdescription>
<para>Checks the error code of the CPLErr object and formats the error. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="575" column="1" bodyfile="necsim/Map.h" bodystart="575" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1aa393296d4132d7aafc4e236ddfe59f06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; double  &gt;::setSize</definition>
        <argsstring>(unsigned long rows, unsigned long cols)</argsstring>
        <name>setSize</name>
        <param>
          <type>unsigned long</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
<para>Sets the matrix size. Similar concept to that for Rows. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="273" column="1" bodyfile="necsim/Matrix.h" bodystart="273" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a9b4ce445c65dcea66c66dda875cc39d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Matrix&lt; double  &gt;::getCols</definition>
        <argsstring>() const</argsstring>
        <name>getCols</name>
        <briefdescription>
<para>Getter for the number of columns. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of columns. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="299" column="1" bodyfile="necsim/Matrix.h" bodystart="299" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a442879db6473eeab202928dc47992206" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Matrix&lt; double  &gt;::getRows</definition>
        <argsstring>() const</argsstring>
        <name>getRows</name>
        <briefdescription>
<para>Getter for the number of rows. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of rows. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="308" column="1" bodyfile="necsim/Matrix.h" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1ae7e14b4bd8bb570260a4e578e4a601b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; double &gt; &amp;</type>
        <definition>Row&lt;double &gt;&amp; Matrix&lt; double  &gt;::operator[]</definition>
        <argsstring>(unsigned long index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>unsigned long</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Overoads the [] operator for <ref refid="class_matrix" kindref="compound">Matrix</ref>. Allows referencing of a value i,j using <ref refid="class_matrix" kindref="compound">Matrix</ref>[i][j]. Includes error checking for if the indices are out of range of the matrix. Note that this functionality has been altered since the original file generation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the row number to get the value from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the matrix row object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="321" column="1" bodyfile="necsim/Matrix.h" bodystart="321" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1abdbd1bbdae2f6926cdc2b58faa304826" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix Matrix&lt; double  &gt;::operator+</definition>
        <argsstring>(const Matrix &amp;m) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the + operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to add to this matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the matrix object which is the sum of the two matrices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="355" column="1" bodyfile="necsim/Matrix.h" bodystart="355" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a73b8da7142ea2593ba7d097651a3ce5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix Matrix&lt; double  &gt;::operator-</definition>
        <argsstring>(const Matrix &amp;m) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the - operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to subtract from this matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the matrix object which is the subtraction of the two matrices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="392" column="1" bodyfile="necsim/Matrix.h" bodystart="392" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a480a72298ae1fc8443b0edfaa66d7c46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; Matrix&lt; double  &gt;::operator+=</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the += operator so that the new object is written to the current object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_matrix" kindref="compound">Matrix</ref> object to add to this matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="426" column="1" bodyfile="necsim/Matrix.h" bodystart="426" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a0e459fd035b2435ea016dc93c55ccac0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; Matrix&lt; double  &gt;::operator-=</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the -= operator so that the new object is written to the current object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_matrix" kindref="compound">Matrix</ref> object to subtract from this matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="459" column="1" bodyfile="necsim/Matrix.h" bodystart="459" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a7285ecf2cfdfdcf3a3e19b4cde235528" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix Matrix&lt; double  &gt;::operator*</definition>
        <argsstring>(const double s) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Overloading the * operator for scaling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the constant to scale the matrix by. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the scaled matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="493" column="1" bodyfile="necsim/Matrix.h" bodystart="493" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a965f8987b92cfdbf8f17d3cf1bf0fa9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix Matrix&lt; double  &gt;::operator*</definition>
        <argsstring>(Matrix &amp;m) const</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the * operator for matrix multiplication. Multiplies each value in the matrix with its corresponding value in the other matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to multiply with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the product of each ith,jth value of the matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="512" column="1" bodyfile="necsim/Matrix.h" bodystart="512" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1ae511e2f5874e7602fc968541efeefca1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; double  &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;x, const unsigned long &amp;y, const char *value)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value at the specified indices, including handling type conversion from char to the template class. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="608" column="1" bodyfile="necsim/Matrix.h" bodystart="608" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a0a5d9135e9807b81ddc3cf05e777a902" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Matrix&lt; double  &gt;::importCsv</definition>
        <argsstring>(const string &amp;filename)</argsstring>
        <name>importCsv</name>
        <param>
          <type>const string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Imports the matrix from a csv file using the fast-csv-parser method. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the file to import. Imports the matrix from a csv file using the standard, slower method. </para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>this function should not be used any more as it is much slower. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the file to import. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the csv can be imported. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="712" column="1" bodyfile="necsim/Matrix.h" bodystart="712" bodyend="754"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_map_1a8fa67c9571db64bfa942ede60a405da4" prot="protected" static="no" mutable="no">
        <type>GDALDataset *</type>
        <definition>GDALDataset* Map&lt; double  &gt;::po_dataset</definition>
        <argsstring></argsstring>
        <name>po_dataset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="39" column="1" bodyfile="necsim/Map.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a7a6134c8835e44f937df4269e6f49709" prot="protected" static="no" mutable="no">
        <type>GDALRasterBand *</type>
        <definition>GDALRasterBand* Map&lt; double  &gt;::po_band</definition>
        <argsstring></argsstring>
        <name>po_band</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="40" column="1" bodyfile="necsim/Map.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1ace1fcda890de19bd60858b4ecef596a7" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Map&lt; double  &gt;::block_x_size</definition>
        <argsstring></argsstring>
        <name>block_x_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="41" column="1" bodyfile="necsim/Map.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a14c78d058dc5d4305b044680d4d8a329" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Map&lt; double  &gt;::block_y_size</definition>
        <argsstring></argsstring>
        <name>block_y_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="41" column="1" bodyfile="necsim/Map.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a3d86c1408c3ae26bb5bec201e05786fb" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Map&lt; double  &gt;::no_data_value</definition>
        <argsstring></argsstring>
        <name>no_data_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="42" column="1" bodyfile="necsim/Map.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a5a355405b8c42d660bc726b6bbfcf636" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Map&lt; double  &gt;::file_name</definition>
        <argsstring></argsstring>
        <name>file_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="43" column="1" bodyfile="necsim/Map.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a08856fb3ac67963db0bb1dbb6cdc5f0e" prot="protected" static="no" mutable="no">
        <type>GDALDataType</type>
        <definition>GDALDataType Map&lt; double  &gt;::gdal_data_type</definition>
        <argsstring></argsstring>
        <name>gdal_data_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="44" column="1" bodyfile="necsim/Map.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a6ba075bc9deb93e306f74179c57fec59" prot="protected" static="no" mutable="no">
        <type>CPLErr</type>
        <definition>CPLErr Map&lt; double  &gt;::cpl_error</definition>
        <argsstring></argsstring>
        <name>cpl_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="46" column="1" bodyfile="necsim/Map.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1ae3b72e22a19277aa531ae90f47c461b2" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Map&lt; double  &gt;::upper_left_x</definition>
        <argsstring></argsstring>
        <name>upper_left_x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="47" column="1" bodyfile="necsim/Map.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a37d531f2f186f90d3f4563e91f2623cb" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Map&lt; double  &gt;::upper_left_y</definition>
        <argsstring></argsstring>
        <name>upper_left_y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="47" column="1" bodyfile="necsim/Map.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1ad385ffe20fb2ae2dc5fa1c6edf72649f" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Map&lt; double  &gt;::x_res</definition>
        <argsstring></argsstring>
        <name>x_res</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="47" column="1" bodyfile="necsim/Map.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1aea5d0fe583fdc11aa94fb5eae6766644" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Map&lt; double  &gt;::y_res</definition>
        <argsstring></argsstring>
        <name>y_res</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Map.h" line="47" column="1" bodyfile="necsim/Map.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_matrix_1a35f2cdc4de7477a491b86a13c80d12ff" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Matrix&lt; double  &gt;::num_cols</definition>
        <argsstring></argsstring>
        <name>num_cols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="230" column="1" bodyfile="necsim/Matrix.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_matrix_1a58b3f04e4cab488f0286f89f89fbb26c" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Matrix&lt; double  &gt;::num_rows</definition>
        <argsstring></argsstring>
        <name>num_rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="231" column="1" bodyfile="necsim/Matrix.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_matrix_1a7a143ae112112155c9622ba17dc434c7" prot="protected" static="no" mutable="no">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; double &gt; *</type>
        <definition>Row&lt;double &gt;* Matrix&lt; double  &gt;::matrix</definition>
        <argsstring></argsstring>
        <name>matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="233" column="1" bodyfile="necsim/Matrix.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Calculates a variety of landscape metrics from an imported tif file. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="499">
        <label>LandscapeMetricsCalculator</label>
        <link refid="class_landscape_metrics_calculator"/>
        <childnode refid="500" relation="public-inheritance">
        </childnode>
      </node>
      <node id="500">
        <label>Map&lt; double &gt;</label>
        <link refid="class_map"/>
        <childnode refid="501" relation="public-inheritance">
        </childnode>
      </node>
      <node id="501">
        <label>Matrix&lt; double &gt;</label>
        <link refid="class_matrix"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="505">
        <label>Row&lt; double &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="507">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="502">
        <label>LandscapeMetricsCalculator</label>
        <link refid="class_landscape_metrics_calculator"/>
        <childnode refid="503" relation="public-inheritance">
        </childnode>
      </node>
      <node id="503">
        <label>Map&lt; double &gt;</label>
        <link refid="class_map"/>
        <childnode refid="504" relation="public-inheritance">
        </childnode>
        <childnode refid="506" relation="usage">
          <edgelabel>file_name</edgelabel>
        </childnode>
      </node>
      <node id="504">
        <label>Matrix&lt; double &gt;</label>
        <link refid="class_matrix"/>
        <childnode refid="505" relation="usage">
          <edgelabel>matrix</edgelabel>
        </childnode>
      </node>
      <node id="506">
        <label>std::string</label>
        <childnode refid="507" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="LandscapeMetricsCalculator.h" line="25" column="1" bodyfile="LandscapeMetricsCalculator.h" bodystart="24" bodyend="84"/>
    <listofallmembers>
      <member refid="class_landscape_metrics_calculator_1af663b7cd7f64e71a6c7a6fed6c7bd695" prot="private" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>all_cells</name></member>
      <member refid="class_map_1ace1fcda890de19bd60858b4ecef596a7" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>block_x_size</name></member>
      <member refid="class_map_1a14c78d058dc5d4305b044680d4d8a329" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>block_y_size</name></member>
      <member refid="class_landscape_metrics_calculator_1aff48704d3a9e02da4914ac2b08c5f79b" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>calculateClumpiness</name></member>
      <member refid="class_landscape_metrics_calculator_1a1ba606d6fb687aceaf4a8e31e8f17273" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>calculateMinPerimeter</name></member>
      <member refid="class_landscape_metrics_calculator_1a34f344e3282eead2091fe8ccb32e6d48" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>calculateMNN</name></member>
      <member refid="class_landscape_metrics_calculator_1ae477e368c4f13042cf2f9a47e62d60ae" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>calculateNoAdjacencies</name></member>
      <member refid="class_map_1a200701b23560dd38238801522b234e78" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>calculateOffset</name></member>
      <member refid="class_landscape_metrics_calculator_1a16bde8469f437abc21602eedb979e5e3" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>checkMinDistance</name></member>
      <member refid="class_map_1a6387185da6dc3063cd2311ffab0a5fba" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>checkTifImportFailure</name></member>
      <member refid="class_map_1ad73fafd17ff95872e9b63945584ae81f" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>close</name></member>
      <member refid="class_map_1a39d76e341e0f817d65ddf0100cfe5f26" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>closeOffsetMap</name></member>
      <member refid="class_map_1a6ba075bc9deb93e306f74179c57fec59" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>cpl_error</name></member>
      <member refid="class_landscape_metrics_calculator_1a084eea2435b7d15049873ae4613b0307" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>createCellList</name></member>
      <member refid="class_map_1a414e6bc9305ab830836cf817cb4a0d60" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>defaultImport</name></member>
      <member refid="class_map_1a5a355405b8c42d660bc726b6bbfcf636" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>file_name</name></member>
      <member refid="class_landscape_metrics_calculator_1a9dd4cde4aad066b3b204553718a63a98" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>findNearestNeighbourDistance</name></member>
      <member refid="class_map_1a08856fb3ac67963db0bb1dbb6cdc5f0e" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>gdal_data_type</name></member>
      <member refid="class_map_1a4e441dcda33d78bef193b1ad1265b5e8" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>getBlockSizes</name></member>
      <member refid="class_matrix_1a9b4ce445c65dcea66c66dda875cc39d8" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>getCols</name></member>
      <member refid="class_map_1a180284cfba3442eb3d62fc41d0d8f546" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>getMetaData</name></member>
      <member refid="class_map_1ade2338d7a8d598c343208b633f8a3a93" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>getRasterBand</name></member>
      <member refid="class_matrix_1a442879db6473eeab202928dc47992206" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>getRows</name></member>
      <member refid="class_map_1afd32790ea28d0c5aa99b582b2d474933" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>getUpperLeftX</name></member>
      <member refid="class_map_1a2d7b63836d06b2710192e7c8afd38641" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>getUpperLeftY</name></member>
      <member refid="class_map_1ad1a25204dce37addc3453e091552b014" prot="public" virt="virtual"><scope>LandscapeMetricsCalculator</scope><name>import</name></member>
      <member refid="class_matrix_1a0a5d9135e9807b81ddc3cf05e777a902" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>importCsv</name></member>
      <member refid="class_map_1aaefe833ab35a68ce54e7eec996c48971" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>importFromDoubleAndMakeBool</name></member>
      <member refid="class_map_1a2306683b0b3b4ddb7d776d1ff60d4491" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>importTif</name></member>
      <member refid="class_map_1ae88574927ad3a38fc0a9bc253a9e4a7a" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>importUsingBuffer</name></member>
      <member refid="class_map_1a0c17360ca7fa935d59f2169fd0007630" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>internalImport</name></member>
      <member refid="class_map_1a19f6874b008fcbfac213341d05c2f443" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>isOpen</name></member>
      <member refid="class_landscape_metrics_calculator_1a8b6c65f14753803f023c078cd615a25d" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>LandscapeMetricsCalculator</name></member>
      <member refid="class_map_1afedbaa14db4c0a1f578e62d658c50e7a" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>Map</name></member>
      <member refid="class_matrix_1a7a143ae112112155c9622ba17dc434c7" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>matrix</name></member>
      <member refid="class_matrix_1a53f60218c002f2bb454695a1fc35c5d3" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>Matrix</name></member>
      <member refid="class_matrix_1a3796b4f32dc8e11f908a90fd3dd39c45" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>Matrix</name></member>
      <member refid="class_map_1a3d86c1408c3ae26bb5bec201e05786fb" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>no_data_value</name></member>
      <member refid="class_matrix_1a35f2cdc4de7477a491b86a13c80d12ff" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>num_cols</name></member>
      <member refid="class_matrix_1a58b3f04e4cab488f0286f89f89fbb26c" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>num_rows</name></member>
      <member refid="class_map_1aa2764c9ae1c54c1821fa4f63b88fe0f3" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>open</name></member>
      <member refid="class_map_1a2389e09950706ef49640976837186c79" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>open</name></member>
      <member refid="class_map_1ade20cc1876ba2774f0f8274d432d89c3" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>openOffsetMap</name></member>
      <member refid="class_matrix_1a7285ecf2cfdfdcf3a3e19b4cde235528" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>operator*</name></member>
      <member refid="class_matrix_1a965f8987b92cfdbf8f17d3cf1bf0fa9b" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>operator*</name></member>
      <member refid="class_matrix_1abdbd1bbdae2f6926cdc2b58faa304826" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>operator+</name></member>
      <member refid="class_matrix_1a480a72298ae1fc8443b0edfaa66d7c46" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>operator+=</name></member>
      <member refid="class_matrix_1a73b8da7142ea2593ba7d097651a3ce5c" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>operator-</name></member>
      <member refid="class_matrix_1a0e459fd035b2435ea016dc93c55ccac0" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>operator-=</name></member>
      <member refid="class_map_1a00f73ad13cb67e3c4836fae9614d6b40" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>operator=</name></member>
      <member refid="class_matrix_1a94508f84ba0d62e81aa8d508aa43f1ec" prot="public" virt="non-virtual" ambiguityscope="Matrix&lt; double &gt;::"><scope>LandscapeMetricsCalculator</scope><name>operator=</name></member>
      <member refid="class_matrix_1ae7e14b4bd8bb570260a4e578e4a601b7" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>operator[]</name></member>
      <member refid="class_map_1a7a6134c8835e44f937df4269e6f49709" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>po_band</name></member>
      <member refid="class_map_1a8fa67c9571db64bfa942ede60a405da4" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>po_dataset</name></member>
      <member refid="class_map_1a03e0486e704090765d253b18a9dde0f5" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>printNumberComplete</name></member>
      <member refid="class_map_1a9862291ea99fe1718d758213b3687bd8" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>roundedScale</name></member>
      <member refid="class_matrix_1aa393296d4132d7aafc4e236ddfe59f06" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>setSize</name></member>
      <member refid="class_matrix_1ae511e2f5874e7602fc968541efeefca1" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>setValue</name></member>
      <member refid="class_map_1ae3b72e22a19277aa531ae90f47c461b2" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>upper_left_x</name></member>
      <member refid="class_map_1a37d531f2f186f90d3f4563e91f2623cb" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>upper_left_y</name></member>
      <member refid="class_map_1ad385ffe20fb2ae2dc5fa1c6edf72649f" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>x_res</name></member>
      <member refid="class_map_1aea5d0fe583fdc11aa94fb5eae6766644" prot="protected" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>y_res</name></member>
      <member refid="class_landscape_metrics_calculator_1a49ca32335b116b9c5291039334551410" prot="public" virt="virtual"><scope>LandscapeMetricsCalculator</scope><name>~LandscapeMetricsCalculator</name></member>
      <member refid="class_map_1a3d863f18372123544a620777fcfceb53" prot="public" virt="non-virtual"><scope>LandscapeMetricsCalculator</scope><name>~Map</name></member>
      <member refid="class_matrix_1ab8cec5fdc5a9d228e19d1d1e5ccac8cf" prot="public" virt="virtual"><scope>LandscapeMetricsCalculator</scope><name>~Matrix</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
