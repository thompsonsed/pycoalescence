<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_simulation_templates_8h" kind="file" language="C++">
    <compoundname>SimulationTemplates.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes refid="_logging_8h" local="yes">Logging.h</includes>
    <includes refid="_custom_exceptions_8h" local="yes">CustomExceptions.h</includes>
    <includedby refid="main_8cpp" local="yes">necsim/main.cpp</includedby>
    <incdepgraph>
      <node id="1109">
        <label>CustomExceptions.h</label>
        <link refid="_custom_exceptions_8h_source"/>
        <childnode refid="1102" relation="include">
        </childnode>
        <childnode refid="1099" relation="include">
        </childnode>
      </node>
      <node id="1099">
        <label>Logging.h</label>
        <link refid="_logging_8h_source"/>
        <childnode refid="1097" relation="include">
        </childnode>
        <childnode refid="1100" relation="include">
        </childnode>
        <childnode refid="1101" relation="include">
        </childnode>
        <childnode refid="1102" relation="include">
        </childnode>
        <childnode refid="1098" relation="include">
        </childnode>
        <childnode refid="1103" relation="include">
        </childnode>
        <childnode refid="1108" relation="include">
        </childnode>
      </node>
      <node id="1108">
        <label>CPLCustomHandler.h</label>
        <link refid="_c_p_l_custom_handler_8h_source"/>
      </node>
      <node id="1102">
        <label>stdexcept</label>
      </node>
      <node id="1096">
        <label>necsim/SimulationTemplates.h</label>
        <link refid="SimulationTemplates.h"/>
        <childnode refid="1097" relation="include">
        </childnode>
        <childnode refid="1098" relation="include">
        </childnode>
        <childnode refid="1099" relation="include">
        </childnode>
        <childnode refid="1109" relation="include">
        </childnode>
      </node>
      <node id="1097">
        <label>string</label>
      </node>
      <node id="1107">
        <label>map</label>
      </node>
      <node id="1105">
        <label>fstream</label>
      </node>
      <node id="1101">
        <label>cstdio</label>
      </node>
      <node id="1106">
        <label>ctime</label>
      </node>
      <node id="1098">
        <label>sstream</label>
      </node>
      <node id="1100">
        <label>iostream</label>
      </node>
      <node id="1103">
        <label>LogFile.h</label>
        <link refid="_log_file_8h_source"/>
        <childnode refid="1104" relation="include">
        </childnode>
        <childnode refid="1105" relation="include">
        </childnode>
        <childnode refid="1106" relation="include">
        </childnode>
        <childnode refid="1107" relation="include">
        </childnode>
      </node>
      <node id="1104">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_simulation_templates_8h_1a5a0913fcc8a0d06bb3543bae060e94d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const string &amp;</type>
        <definition>const string&amp; getConfigFileFromCmdArgs</definition>
        <argsstring>(const vector&lt; string &gt; &amp;com_args)</argsstring>
        <name>getConfigFileFromCmdArgs</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>com_args</declname>
        </param>
        <briefdescription>
<para>Gets the [2] element from the vector (which should contain the config file from command-line arguments. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>com_args</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of command-line arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the string at the [2] position containing the path to the config file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulationTemplates.h" line="27" column="1" bodyfile="necsim/SimulationTemplates.h" bodystart="27" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="_simulation_templates_8h_1a7769b3dcc06a33c0f97a9053ae6d4046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void runMain</definition>
        <argsstring>(const string &amp;config_file)</argsstring>
        <name>runMain</name>
        <param>
          <type>const string &amp;</type>
          <declname>config_file</declname>
        </param>
        <briefdescription>
<para>Template class for running simulations from all <ref refid="class_tree" kindref="compound">Tree</ref> types. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the class (either <ref refid="class_tree" kindref="compound">Tree</ref>, or a child of <ref refid="class_tree" kindref="compound">Tree</ref>) of the simulation </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the config file to read simulation parameters from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SimulationTemplates.h" line="46" column="1" bodyfile="necsim/SimulationTemplates.h" bodystart="46" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains template function for running any class of simulation (including protracted simulations, spatial and non-spatial simulations. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Sam Thompson </para></simplesect>
<simplesect kind="date"><para>02/01/2018</para></simplesect>
Contact: <ulink url="mailto:samuel.thompson14@imperial.ac.uk">samuel.thompson14@imperial.ac.uk</ulink> or <ulink url="mailto:thompsonsed@gmail.com">thompsonsed@gmail.com</ulink> <simplesect kind="copyright"><para><ulink url="https://opensource.org/licenses/MIT">MIT Licence.</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NECSim<sp/>project<sp/>which<sp/>is<sp/>released<sp/>under<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>**LICENSE.txt**<sp/>or<sp/>visit<sp/>https://opensource.org/licenses/MIT)<sp/>for<sp/>full<sp/>license<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight><highlight class="preprocessor">#ifndef<sp/>SIMULATIONTEMPLATES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIMULATIONTEMPLATES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Logging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CustomExceptions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;<sp/>getConfigFileFromCmdArgs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;string&gt;<sp/>&amp;<sp/>com_args)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(com_args.size()<sp/>!=<sp/>3)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>number<sp/>of<sp/>command-line<sp/>arguments<sp/>supplied.<sp/>Should<sp/>be<sp/>3,<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>com_args.size()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="struct_fatal_exception" kindref="compound">FatalException</ref>(ss.str());</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>com_args[2];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>runMain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;config_file)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>our<sp/>tree<sp/>object<sp/>that<sp/>contains<sp/>the<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>tree;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>tree.importSimulationVariables(config_file);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>the<sp/>sim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>tree.setup();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detect<sp/>speciation<sp/>rates<sp/>to<sp/>apply</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isComplete<sp/>=<sp/>tree.runSimulation();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isComplete)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree.applyMultipleRates();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>writeInfo(</highlight><highlight class="stringliteral">&quot;*************************************************\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//SIMULATIONTEMPLATES_H</highlight></codeline>
    </programlisting>
    <location file="necsim/SimulationTemplates.h"/>
  </compounddef>
</doxygen>
