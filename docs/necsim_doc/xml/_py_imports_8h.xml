<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_py_imports_8h" kind="file" language="C++">
    <compoundname>PyImports.h</compoundname>
    <includes local="no">Python.h</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="yes">necsim/Cell.h</includes>
    <includedby refid="_c_community_8h" local="yes">CCommunity.h</includedby>
    <includedby refid="_py_templates_8h" local="yes">PyTemplates.h</includedby>
    <includedby refid="_c_simulate_dispersal_8h" local="yes">CSimulateDispersal.h</includedby>
    <includedby refid="_c_simulation_8h" local="yes">CSimulation.h</includedby>
    <includedby refid="_py_imports_8cpp" local="yes">PyImports.cpp</includedby>
    <incdepgraph>
      <node id="2777">
        <label>string</label>
      </node>
      <node id="2774">
        <label>Python.h</label>
      </node>
      <node id="2776">
        <label>vector</label>
      </node>
      <node id="2775">
        <label>utility</label>
      </node>
      <node id="2778">
        <label>necsim/Cell.h</label>
      </node>
      <node id="2773">
        <label>PyImports.h</label>
        <link refid="_py_imports_8h"/>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2775" relation="include">
        </childnode>
        <childnode refid="2776" relation="include">
        </childnode>
        <childnode refid="2777" relation="include">
        </childnode>
        <childnode refid="2778" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2780">
        <label>CCommunity.h</label>
        <link refid="_c_community_8h_source"/>
      </node>
      <node id="2783">
        <label>CSimulateDispersal.h</label>
        <link refid="_c_simulate_dispersal_8h_source"/>
      </node>
      <node id="2784">
        <label>CSimulation.h</label>
        <link refid="_c_simulation_8h_source"/>
        <childnode refid="2783" relation="include">
        </childnode>
      </node>
      <node id="2782">
        <label>CLandscapeMetricsCalculator.h</label>
        <link refid="_c_landscape_metrics_calculator_8h_source"/>
      </node>
      <node id="2779">
        <label>PyImports.h</label>
        <link refid="_py_imports_8h"/>
        <childnode refid="2780" relation="include">
        </childnode>
        <childnode refid="2781" relation="include">
        </childnode>
        <childnode refid="2783" relation="include">
        </childnode>
        <childnode refid="2784" relation="include">
        </childnode>
      </node>
      <node id="2781">
        <label>PyTemplates.h</label>
        <link refid="_py_templates_8h_source"/>
        <childnode refid="2780" relation="include">
        </childnode>
        <childnode refid="2782" relation="include">
        </childnode>
        <childnode refid="2783" relation="include">
        </childnode>
        <childnode refid="2784" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_py_imports_8h_1a4938eb508ac5b2f1e03a13a3860689ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool importPyListToVectorString</definition>
        <argsstring>(PyObject *list_input, vector&lt; string &gt; &amp;output, const string &amp;err_msg)</argsstring>
        <name>importPyListToVectorString</name>
        <param>
          <type>PyObject *</type>
          <declname>list_input</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Imports the provided input list to the output vector. Sets the Python error message and returns false if one of the list elements is not a string type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_input</parametername>
</parameternamelist>
<parameterdescription>
<para>a Python list object to iterate over </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>the output vector of strings to push to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>error message to through if an element is not of float type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if no error is thrown, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyImports.h" line="31" column="1" bodyfile="PyImports.cpp" bodystart="17" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="_py_imports_8h_1aff3fb1ca36eb470ac911c35916c0d905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool importPyListToVectorULong</definition>
        <argsstring>(PyObject *list_input, vector&lt; unsigned long &gt; &amp;output, const string &amp;err_msg)</argsstring>
        <name>importPyListToVectorULong</name>
        <param>
          <type>PyObject *</type>
          <declname>list_input</declname>
        </param>
        <param>
          <type>vector&lt; unsigned long &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Imports the provided input list to the output vector. Sets the Python error message and returns false if one of the list elements is not of int type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_input</parametername>
</parameternamelist>
<parameterdescription>
<para>a Python list object to iterate over </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>the output vector of int to push to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>error message to through if an element is not of float type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if no error is thrown, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyImports.h" line="41" column="1" bodyfile="PyImports.cpp" bodystart="43" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="_py_imports_8h_1a05fdbfcb6a0ea29a3242b796d654cc91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool importPyListToVectorDouble</definition>
        <argsstring>(PyObject *list_input, vector&lt; double &gt; &amp;output, const string &amp;err_msg)</argsstring>
        <name>importPyListToVectorDouble</name>
        <param>
          <type>PyObject *</type>
          <declname>list_input</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Imports the provided input list to the output vector. Sets the Python error message and returns false if one of the list elements is not a float type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_input</parametername>
</parameternamelist>
<parameterdescription>
<para>a Python list object to iterate over </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>the output vector of doubles to push to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>error message to through if an element is not of float type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if no error is thrown, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyImports.h" line="52" column="1" bodyfile="PyImports.cpp" bodystart="66" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="_py_imports_8h_1ae0dfb112ef7d7d3a97dc69b8dd21cab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool importPyListsToVectorCell</definition>
        <argsstring>(PyObject *x_list_input, PyObject *y_list_input, vector&lt; Cell &gt; &amp;output, const string &amp;err_msg)</argsstring>
        <name>importPyListsToVectorCell</name>
        <param>
          <type>PyObject *</type>
          <declname>x_list_input</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>y_list_input</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structnecsim_1_1_cell" kindref="compound">Cell</ref> &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PyImports.h" line="54" column="1" bodyfile="PyImports.cpp" bodystart="89" bodyend="135"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Routines for importing Python objects to C++ vectors. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Samuel Thompson</para>
</simplesect>
<simplesect kind="copyright"><para><ulink url="https://opensource.org/licenses/MIT">MIT Licence.</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>necsim<sp/>project<sp/>which<sp/>is<sp/>released<sp/>under<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>**LICENSE.txt**<sp/>or<sp/>visit<sp/>https://opensource.org/licenses/MIT)<sp/>for<sp/>full<sp/>license<sp/>details</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#ifndef<sp/>PYIMPORTS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYIMPORTS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Python.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;necsim/Cell.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">necsim;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>importPyListToVectorString(PyObject<sp/>*list_input,<sp/>vector&lt;string&gt;<sp/>&amp;output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;err_msg);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>importPyListToVectorULong(PyObject<sp/>*list_input,<sp/>vector&lt;unsigned<sp/>long&gt;<sp/>&amp;output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;err_msg);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>importPyListToVectorDouble(PyObject<sp/>*list_input,<sp/>vector&lt;double&gt;<sp/>&amp;output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;err_msg);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>importPyListsToVectorCell(PyObject<sp/>*x_list_input,<sp/>PyObject<sp/>*y_list_input,<sp/>vector&lt;Cell&gt;<sp/>&amp;output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;err_msg);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//SPECIATIONCOUNTER_PYIMPORTS_H</highlight></codeline>
    </programlisting>
    <location file="PyImports.h"/>
  </compounddef>
</doxygen>
