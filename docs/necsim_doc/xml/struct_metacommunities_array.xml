<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="struct_metacommunities_array" kind="struct" language="C++" prot="public">
    <compoundname>MetacommunitiesArray</compoundname>
    <includes refid="_community_8h" local="no">Community.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_metacommunities_array_1ae98cbbcca0be5883b0028f4c0a136261" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt;</type>
        <definition>vector&lt;MetacommunityParameters&gt; MetacommunitiesArray::calc_array</definition>
        <argsstring></argsstring>
        <name>calc_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="246" column="1" bodyfile="necsim/Community.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_metacommunities_array_1a581a404fb39d14256419d9ae1118f58b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MetacommunitiesArray::pushBack</definition>
        <argsstring>(unsigned long reference, long double speciation_rate, unsigned long metacommunity_size)</argsstring>
        <name>pushBack</name>
        <param>
          <type>unsigned long</type>
          <declname>reference</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>metacommunity_size</declname>
        </param>
        <briefdescription>
<para>Adds an extra <ref refid="struct_community_parameters" kindref="compound">CommunityParameters</ref> object to the calc_array vector with the supplied variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for this set of metacommunity parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate used in generation of the metacommunity </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the metacommunity used </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="254" column="1" bodyfile="necsim/Community.cpp" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1aafc6f9ba63be4c85d32d86ebfd2137e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MetacommunitiesArray::pushBack</definition>
        <argsstring>(MetacommunityParameters tmp_param)</argsstring>
        <name>pushBack</name>
        <param>
          <type><ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref></type>
          <declname>tmp_param</declname>
        </param>
        <briefdescription>
<para>Adds the provided PastMetacommunityParameters object to the calc_array vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmp_param</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of metacommunity parameters to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="260" column="1" bodyfile="necsim/Community.cpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a2fef78ac6dea9d8297a7fd3b72f3026c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long MetacommunitiesArray::addNew</definition>
        <argsstring>(long double speciation_rate, unsigned long metacommunity_size)</argsstring>
        <name>addNew</name>
        <param>
          <type>long double</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>metacommunity_size</declname>
        </param>
        <briefdescription>
<para>Adds a new metacommunities calculation paremeters reference, with a new unique reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate of the new calculation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the metacommunity in the new calculation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new reference number, which should be unique </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="268" column="1" bodyfile="necsim/Community.cpp" bodystart="184" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a8ef151569615b4091807aa8c50ebf1b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MetacommunitiesArray::hasPair</definition>
        <argsstring>(long double speciation_rate, unsigned long metacommunity_size)</argsstring>
        <name>hasPair</name>
        <param>
          <type>long double</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>metacommunity_size</declname>
        </param>
        <briefdescription>
<para>Checks whether the calculation with the supplied variables has already been performed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to check for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of metacommunity to check for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the reference exists in past metacommunity parameters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="276" column="1" bodyfile="necsim/Community.cpp" bodystart="208" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a98876103779bab91793f6daa513722d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MetacommunitiesArray::hasPair</definition>
        <argsstring>(unsigned long reference)</argsstring>
        <name>hasPair</name>
        <param>
          <type>unsigned long</type>
          <declname>reference</declname>
        </param>
        <briefdescription>
<para>Checks whether the calculation with the supplied reference has already been performed. Overloaded version for checking references. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to check for in past metacommunity parameters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the reference exists in past metacommunity parameters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="284" column="1" bodyfile="necsim/Community.cpp" bodystart="220" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a5c15d164bc32cd2731c9382fe3fbbfbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long MetacommunitiesArray::getReference</definition>
        <argsstring>(long double speciation_rate, unsigned long metacommunity_size)</argsstring>
        <name>getReference</name>
        <param>
          <type>long double</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>metacommunity_size</declname>
        </param>
        <briefdescription>
<para>Gets the metacommunity reference for the provided parameters, or returns 0 if it doesn&apos;t exist. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity speciation rate to obtain for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity size to apply for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>bool for checking if fragments were used </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the metacommunity reference number, or 0 if it doesn&apos;t exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="293" column="1" bodyfile="necsim/Community.cpp" bodystart="232" bodyend="246"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains an array of <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> that have been applied to the coalescence tree. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="797">
        <label>std::vector&lt; MetacommunityParameters &gt;</label>
        <childnode refid="798" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="798">
        <label>MetacommunityParameters</label>
        <link refid="struct_metacommunity_parameters"/>
      </node>
      <node id="796">
        <label>MetacommunitiesArray</label>
        <link refid="struct_metacommunities_array"/>
        <childnode refid="797" relation="usage">
          <edgelabel>calc_array</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/Community.h" line="245" column="1" bodyfile="necsim/Community.h" bodystart="244" bodyend="294"/>
    <listofallmembers>
      <member refid="struct_metacommunities_array_1a2fef78ac6dea9d8297a7fd3b72f3026c" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>addNew</name></member>
      <member refid="struct_metacommunities_array_1ae98cbbcca0be5883b0028f4c0a136261" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>calc_array</name></member>
      <member refid="struct_metacommunities_array_1a5c15d164bc32cd2731c9382fe3fbbfbe" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>getReference</name></member>
      <member refid="struct_metacommunities_array_1a8ef151569615b4091807aa8c50ebf1b2" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>hasPair</name></member>
      <member refid="struct_metacommunities_array_1a98876103779bab91793f6daa513722d6" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>hasPair</name></member>
      <member refid="struct_metacommunities_array_1a581a404fb39d14256419d9ae1118f58b" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>pushBack</name></member>
      <member refid="struct_metacommunities_array_1aafc6f9ba63be4c85d32d86ebfd2137e3" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>pushBack</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
