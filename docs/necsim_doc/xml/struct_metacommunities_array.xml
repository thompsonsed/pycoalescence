<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="struct_metacommunities_array" kind="struct" language="C++" prot="public">
    <compoundname>MetacommunitiesArray</compoundname>
    <includes refid="parameters_8h" local="no">parameters.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_metacommunities_array_1a869cfa9f4c99ed20d8e10d9d4f0a409a" prot="public" static="no" mutable="no">
        <type>vector&lt; shared_ptr&lt; <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt; &gt;</type>
        <definition>vector&lt;shared_ptr&lt;MetacommunityParameters&gt; &gt; MetacommunitiesArray::metacomm_parameters</definition>
        <argsstring></argsstring>
        <name>metacomm_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="277" column="1" bodyfile="necsim/parameters.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_metacommunities_array_1ac06b31ab097315a80514fc03ae99ed27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MetacommunitiesArray::MetacommunitiesArray</definition>
        <argsstring>()</argsstring>
        <name>MetacommunitiesArray</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="282" column="1" bodyfile="necsim/parameters.cpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a9cb06bc75e892e93c1d6b80b3c79569a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MetacommunitiesArray::~MetacommunitiesArray</definition>
        <argsstring>()=default</argsstring>
        <name>~MetacommunitiesArray</name>
        <briefdescription>
<para>Trivial destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a73d6e0fb339af3a27bcbf428d8caf0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; shared_ptr&lt; <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt; &gt;::iterator</type>
        <definition>vector&lt; shared_ptr&lt; MetacommunityParameters &gt; &gt;::iterator MetacommunitiesArray::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Support for range-based for loop iteration over metacomm_parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the start of the parameters vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="293" column="1" bodyfile="necsim/parameters.cpp" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a3a49a550c463078f51c04b5ab32e12cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; shared_ptr&lt; <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt; &gt;::iterator</type>
        <definition>vector&lt; shared_ptr&lt; MetacommunityParameters &gt; &gt;::iterator MetacommunitiesArray::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Support for range-based for loop iteration over metacomm_parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the end of the parameters vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="299" column="1" bodyfile="necsim/parameters.cpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1aafe83642b1b45af29578b0c8a9829a99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; shared_ptr&lt; <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt; &gt;::const_iterator</type>
        <definition>vector&lt; shared_ptr&lt; MetacommunityParameters &gt; &gt;::const_iterator MetacommunitiesArray::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
<para>Support for range-based for loop iteration over metacomm_parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the start of the parameters vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="305" column="1" bodyfile="necsim/parameters.cpp" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a29765f064310ea5bad76d2bfb56f8619" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; shared_ptr&lt; <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt; &gt;::const_iterator</type>
        <definition>vector&lt; shared_ptr&lt; MetacommunityParameters &gt; &gt;::const_iterator MetacommunitiesArray::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>Support for range-based for loop iteration over metacomm_parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the end of the parameters vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="311" column="1" bodyfile="necsim/parameters.cpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a3e5b4d95743b3a28a521ba627fad622a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MetacommunitiesArray::pushBack</definition>
        <argsstring>(const unsigned long &amp;reference, const unsigned long &amp;metacommunity_size, const long double &amp;speciation_rate, const string &amp;option, const unsigned long &amp;external_reference)</argsstring>
        <name>pushBack</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>reference</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>metacommunity_size</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>external_reference</declname>
        </param>
        <briefdescription>
<para>Adds an extra <ref refid="struct_community_parameters" kindref="compound">CommunityParameters</ref> object to the calc_array vector with the supplied variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for this set of metacommunity parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate used in generation of the metacommunity </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the metacommunity used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="321" column="1" bodyfile="necsim/parameters.cpp" bodystart="258" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a8d015063db5528131c96ee6eb2625904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MetacommunitiesArray::pushBack</definition>
        <argsstring>(shared_ptr&lt; MetacommunityParameters &gt; tmp_param)</argsstring>
        <name>pushBack</name>
        <param>
          <type>shared_ptr&lt; <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &gt;</type>
          <declname>tmp_param</declname>
        </param>
        <briefdescription>
<para>Adds the provided PastMetacommunityParameters object to the calc_array vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmp_param</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of metacommunity parameters to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="329" column="1" bodyfile="necsim/parameters.cpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1aeeadf7da4469e93dd62322abe2cd2db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MetacommunitiesArray::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Wipes the internal vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="334" column="1" bodyfile="necsim/parameters.cpp" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1aacd1795a5dcf8a8ba2690d29aa7f76df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long MetacommunitiesArray::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Gets the size of the array. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of metacommunity parameters that have been added </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="340" column="1" bodyfile="necsim/parameters.cpp" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1aa39cf0eccb18b7e8d59d6a84d2dbbf90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MetacommunitiesArray::empty</definition>
        <argsstring>()</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Check if the array is empty. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the array has no elements in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="346" column="1" bodyfile="necsim/parameters.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a6ffe1001285cb2e6892f06d792b8ac06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long MetacommunitiesArray::addNew</definition>
        <argsstring>(const unsigned long &amp;metacommunity_size, const long double &amp;speciation_rate, const string &amp;option, const unsigned long &amp;external_reference)</argsstring>
        <name>addNew</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>metacommunity_size</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>external_reference</declname>
        </param>
        <briefdescription>
<para>Adds a new metacommunities calculation paremeters reference, with a new unique reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate of the new calculation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the metacommunity in the new calculation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new reference number, which should be unique </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="356" column="1" bodyfile="necsim/parameters.cpp" bodystart="287" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a2969e9c50cb7cb9f9bb2f0a84abe89c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long MetacommunitiesArray::addNew</definition>
        <argsstring>(const MetacommunityParameters &amp;metacomm_in)</argsstring>
        <name>addNew</name>
        <param>
          <type>const <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>metacomm_in</declname>
        </param>
        <briefdescription>
<para>Adds a new set of metacommunity parameters to the array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metacomm_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the new metacommunity parameters to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new reference number, which should be unique </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="364" column="1" bodyfile="necsim/parameters.cpp" bodystart="319" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1ad16c2b1df93accb5bffb5a6cfae7c0eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MetacommunitiesArray::hasOption</definition>
        <argsstring>(const unsigned long &amp;metacommunity_size, const long double &amp;speciation_rate, const string &amp;option, const unsigned long &amp;external_reference)</argsstring>
        <name>hasOption</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>metacommunity_size</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>external_reference</declname>
        </param>
        <briefdescription>
<para>Checks whether the calculation with the supplied variables has already been performed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to check for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of metacommunity to check for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the reference exists in past metacommunity parameters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="374" column="1" bodyfile="necsim/parameters.cpp" bodystart="325" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a5b4f3e826d045aac2c7e09d8fb380876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MetacommunitiesArray::hasOption</definition>
        <argsstring>(unsigned long reference)</argsstring>
        <name>hasOption</name>
        <param>
          <type>unsigned long</type>
          <declname>reference</declname>
        </param>
        <briefdescription>
<para>Checks whether the calculation with the supplied reference has already been performed. Overloaded version for checking references. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to check for in past metacommunity parameters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the reference exists in past metacommunity parameters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="383" column="1" bodyfile="necsim/parameters.cpp" bodystart="338" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a3919ab2082db032eb3b1fe1c39201789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MetacommunitiesArray::hasOption</definition>
        <argsstring>(const MetacommunityParameters &amp;metacomm_in)</argsstring>
        <name>hasOption</name>
        <param>
          <type>const <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>metacomm_in</declname>
        </param>
        <briefdescription>
<para>Checks whether the calculation with the supplied reference has already been performed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metacomm_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity parameters to check for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the metacommunity already exists in past metacommunity parameters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="390" column="1" bodyfile="necsim/parameters.cpp" bodystart="350" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1a8c1b6836f052ebb4fe2bb3c8833e3d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long MetacommunitiesArray::getReference</definition>
        <argsstring>(const unsigned long &amp;metacommunity_size, const long double &amp;speciation_rate, const string &amp;option, const unsigned long &amp;external_reference)</argsstring>
        <name>getReference</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>metacommunity_size</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>external_reference</declname>
        </param>
        <briefdescription>
<para>Gets the metacommunity reference for the provided parameters, or returns 0 if it doesn&apos;t exist. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity speciation rate to obtain for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity size to apply for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>bool for checking if fragments were used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity option (&quot;simulated&quot;, &quot;analytical&quot; or a path to a database) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference for the external database </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the metacommunity reference number, or 0 if it doesn&apos;t exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="401" column="1" bodyfile="necsim/parameters.cpp" bodystart="356" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1aeeff79f170f9d4c5198c1b0373843504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long MetacommunitiesArray::getReference</definition>
        <argsstring>(const MetacommunityParameters &amp;metacomm_parameters)</argsstring>
        <name>getReference</name>
        <param>
          <type>const <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> &amp;</type>
          <declname>metacomm_parameters</declname>
        </param>
        <briefdescription>
<para>Gets the metacommunity reference for the provided parameters, or returns 0 if it doesn&apos;t exist. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metacomm_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameters to check for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the metacommunity reference number, or 0 if it doesn&apos;t exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="409" column="1" bodyfile="necsim/parameters.cpp" bodystart="384" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="struct_metacommunities_array_1afea47da3543504b7aac4bd02ba8e290f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MetacommunitiesArray::addNull</definition>
        <argsstring>()</argsstring>
        <name>addNull</name>
        <briefdescription>
<para>Adds an empty metacommunity parameters option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/parameters.h" line="414" column="1" bodyfile="necsim/parameters.cpp" bodystart="390" bodyend="394"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains an array of <ref refid="struct_metacommunity_parameters" kindref="compound">MetacommunityParameters</ref> that have been applied to the coalescence tree. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="532">
        <label>std::vector&lt; shared_ptr&lt; MetacommunityParameters &gt; &gt;</label>
      </node>
      <node id="531">
        <label>MetacommunitiesArray</label>
        <link refid="struct_metacommunities_array"/>
        <childnode refid="532" relation="usage">
          <edgelabel>metacomm_parameters</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/parameters.h" line="276" column="1" bodyfile="necsim/parameters.h" bodystart="275" bodyend="415"/>
    <listofallmembers>
      <member refid="struct_metacommunities_array_1a6ffe1001285cb2e6892f06d792b8ac06" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>addNew</name></member>
      <member refid="struct_metacommunities_array_1a2969e9c50cb7cb9f9bb2f0a84abe89c4" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>addNew</name></member>
      <member refid="struct_metacommunities_array_1afea47da3543504b7aac4bd02ba8e290f" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>addNull</name></member>
      <member refid="struct_metacommunities_array_1a73d6e0fb339af3a27bcbf428d8caf0fc" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>begin</name></member>
      <member refid="struct_metacommunities_array_1aafe83642b1b45af29578b0c8a9829a99" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>begin</name></member>
      <member refid="struct_metacommunities_array_1aeeadf7da4469e93dd62322abe2cd2db8" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>clear</name></member>
      <member refid="struct_metacommunities_array_1aa39cf0eccb18b7e8d59d6a84d2dbbf90" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>empty</name></member>
      <member refid="struct_metacommunities_array_1a3a49a550c463078f51c04b5ab32e12cd" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>end</name></member>
      <member refid="struct_metacommunities_array_1a29765f064310ea5bad76d2bfb56f8619" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>end</name></member>
      <member refid="struct_metacommunities_array_1a8c1b6836f052ebb4fe2bb3c8833e3d6e" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>getReference</name></member>
      <member refid="struct_metacommunities_array_1aeeff79f170f9d4c5198c1b0373843504" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>getReference</name></member>
      <member refid="struct_metacommunities_array_1ad16c2b1df93accb5bffb5a6cfae7c0eb" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>hasOption</name></member>
      <member refid="struct_metacommunities_array_1a5b4f3e826d045aac2c7e09d8fb380876" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>hasOption</name></member>
      <member refid="struct_metacommunities_array_1a3919ab2082db032eb3b1fe1c39201789" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>hasOption</name></member>
      <member refid="struct_metacommunities_array_1a869cfa9f4c99ed20d8e10d9d4f0a409a" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>metacomm_parameters</name></member>
      <member refid="struct_metacommunities_array_1ac06b31ab097315a80514fc03ae99ed27" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>MetacommunitiesArray</name></member>
      <member refid="struct_metacommunities_array_1a3e5b4d95743b3a28a521ba627fad622a" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>pushBack</name></member>
      <member refid="struct_metacommunities_array_1a8d015063db5528131c96ee6eb2625904" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>pushBack</name></member>
      <member refid="struct_metacommunities_array_1aacd1795a5dcf8a8ba2690d29aa7f76df" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>size</name></member>
      <member refid="struct_metacommunities_array_1a9cb06bc75e892e93c1d6b80b3c79569a" prot="public" virt="non-virtual"><scope>MetacommunitiesArray</scope><name>~MetacommunitiesArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
