<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classnecsim_1_1_matrix" kind="class" language="C++" prot="public">
    <compoundname>necsim::Matrix</compoundname>
    <derivedcompoundref refid="classnecsim_1_1_map" prot="public" virt="virtual">necsim::Map&lt; T &gt;</derivedcompoundref>
    <includes refid="_matrix_8h" local="no">Matrix.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnecsim_1_1_matrix_1ad22e95f402d410d965c4d4c9aa61b5f6" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Matrix&lt; T &gt;::num_cols</definition>
        <argsstring></argsstring>
        <name>num_cols</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="58" column="1" bodyfile="necsim/Matrix.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_matrix_1afa8091e7e9ad63dd1aec96955b369fda" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Matrix&lt; T &gt;::num_rows</definition>
        <argsstring></argsstring>
        <name>num_rows</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="59" column="1" bodyfile="necsim/Matrix.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_matrix_1a3448e6eb1becb8b4ae913096b6b5a14d" prot="protected" static="no" mutable="no">
        <type>vector&lt; T &gt;</type>
        <definition>vector&lt;T&gt; necsim::Matrix&lt; T &gt;::matrix</definition>
        <argsstring></argsstring>
        <name>matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="61" column="1" bodyfile="necsim/Matrix.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a213bef5520b5ebbe90e91e3ce2541ba7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>necsim::Matrix&lt; T &gt;::Matrix</definition>
        <argsstring>(unsigned long rows=0, unsigned long cols=0)</argsstring>
        <name>Matrix</name>
        <param>
          <type>unsigned long</type>
          <declname>rows</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>cols</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>The standard constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>optionally provide the number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>optionally provide the number of columns. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="69" column="1" bodyfile="necsim/Matrix.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1ae16eecda8e88ca6aaa6e9873ffc25c6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>necsim::Matrix&lt; T &gt;::Matrix</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> object to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="77" column="1" bodyfile="necsim/Matrix.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a1c00c456ea7c37e06d950b30b5d0262f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual necsim::Matrix&lt; T &gt;::~Matrix</definition>
        <argsstring>()</argsstring>
        <name>~Matrix</name>
        <briefdescription>
<para>The destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="85" column="1" bodyfile="necsim/Matrix.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1ac8d16e95e533a6844633c59bc165c65d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Matrix&lt; T &gt;::setSize</definition>
        <argsstring>(unsigned long rows, unsigned long cols)</argsstring>
        <name>setSize</name>
        <param>
          <type>unsigned long</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
<para>Sets the matrix size. Similar concept to that for Rows. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="96" column="1" bodyfile="necsim/Matrix.h" bodystart="96" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a12d31769465e7c2a3b4798d078e00a47" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Matrix&lt; T &gt;::getCols</definition>
        <argsstring>() const</argsstring>
        <name>getCols</name>
        <briefdescription>
<para>Getter for the number of columns. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of columns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="111" column="1" bodyfile="necsim/Matrix.h" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1afc78538f61f0e68558e345e1425cc1e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Matrix&lt; T &gt;::getRows</definition>
        <argsstring>() const</argsstring>
        <name>getRows</name>
        <briefdescription>
<para>Getter for the number of rows. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of rows. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="120" column="1" bodyfile="necsim/Matrix.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a68936bdfa42e877c791fa74775f38d92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Matrix&lt; T &gt;::fill</definition>
        <argsstring>(T val)</argsstring>
        <name>fill</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Fills the matrix with the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="129" column="1" bodyfile="necsim/Matrix.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1af96d6d558cf9b854c8275b716ab3835c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Matrix&lt; T &gt;::index</definition>
        <argsstring>(const unsigned long &amp;row, const unsigned long &amp;col) const</argsstring>
        <name>index</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Gets the index of a particular row and column in the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the row number to index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>the column number to index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of row and column within the matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="140" column="1" bodyfile="necsim/Matrix.h" bodystart="140" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1af67a3a10dbdcc8d4656ce90104efa8ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; necsim::Matrix&lt; T &gt;::get</definition>
        <argsstring>(const unsigned long &amp;row, const unsigned long &amp;col)</argsstring>
        <name>get</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the row number to get the value at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>the column number to get the value at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value at the specified row and column </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="164" column="1" bodyfile="necsim/Matrix.h" bodystart="164" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a5711966132f3c44abb02623fc2236158" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; necsim::Matrix&lt; T &gt;::get</definition>
        <argsstring>(const unsigned long &amp;row, const unsigned long &amp;col) const</argsstring>
        <name>get</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the row number to get the value at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>the column number to get the value at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value at the specified row and column </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="184" column="1" bodyfile="necsim/Matrix.h" bodystart="184" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a710473cfc0712ec15b55f651c887070c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T necsim::Matrix&lt; T &gt;::getCopy</definition>
        <argsstring>(const unsigned long &amp;row, const unsigned long &amp;col) const</argsstring>
        <name>getCopy</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the row number to get the value at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>the column number to get the value at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value at the specified row and column </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="204" column="1" bodyfile="necsim/Matrix.h" bodystart="204" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a5fee481a8ba9e92592afbc2ff5771966" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; T &gt;::iterator</type>
        <definition>vector&lt;T&gt;::iterator necsim::Matrix&lt; T &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns iterators for range-based for loops. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator to the start of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="222" column="1" bodyfile="necsim/Matrix.h" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1aa6d1861375360cae3241f647972383f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; T &gt;::iterator</type>
        <definition>vector&lt;T&gt;::iterator necsim::Matrix&lt; T &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns end iterators for range-based for loops. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator to the end of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="231" column="1" bodyfile="necsim/Matrix.h" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a729d0525a7a8b3031414d67e4319711a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; T &gt;::const_iterator</type>
        <definition>vector&lt;T&gt;::const_iterator necsim::Matrix&lt; T &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns iterators for range-based for loops. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator to the start of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="240" column="1" bodyfile="necsim/Matrix.h" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a59ae7bb1f814a55b94ef17bd476238c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; T &gt;::const_iterator</type>
        <definition>vector&lt;T&gt;::const_iterator necsim::Matrix&lt; T &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns end iterators for range-based for loops. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator to the end of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="249" column="1" bodyfile="necsim/Matrix.h" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a1f55142f41ccd82bdf85a4210ed73952" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double necsim::Matrix&lt; T &gt;::getMean</definition>
        <argsstring>() const</argsstring>
        <name>getMean</name>
        <briefdescription>
<para>Gets the arithmetic mean of the <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the mean value in the matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="259" column="1" bodyfile="necsim/Matrix.h" bodystart="259" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a5028e8ac425a736e529c1b90c7b99796" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T necsim::Matrix&lt; T &gt;::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="270" column="1" bodyfile="necsim/Matrix.h" bodystart="270" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a9973f911878111de8a659c80ce86ccab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; necsim::Matrix&lt; T &gt;::operator=</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the = operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="291" column="1" bodyfile="necsim/Matrix.h" bodystart="291" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1acba7b8292dfa4af20766a140318282aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix necsim::Matrix&lt; T &gt;::operator+</definition>
        <argsstring>(const Matrix &amp;m) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the + operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to add to this matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the matrix object which is the sum of the two matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="306" column="1" bodyfile="necsim/Matrix.h" bodystart="306" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a59b2969f521f241a5d0fdc7acfc1c311" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix necsim::Matrix&lt; T &gt;::operator-</definition>
        <argsstring>(const Matrix &amp;m) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the - operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to subtract from this matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the matrix object which is the subtraction of the two matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="329" column="1" bodyfile="necsim/Matrix.h" bodystart="329" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1aef31e4e44f771d9b6c102b124443a183" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; necsim::Matrix&lt; T &gt;::operator+=</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the += operator so that the new object is written to the current object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> object to add to this matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="350" column="1" bodyfile="necsim/Matrix.h" bodystart="350" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1accb2b34850a64c4f10c52b24b09f364c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; necsim::Matrix&lt; T &gt;::operator-=</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the -= operator so that the new object is written to the current object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> object to subtract from this matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="370" column="1" bodyfile="necsim/Matrix.h" bodystart="370" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1acf9a9141dc74553c0a3a43a0b66f008d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix necsim::Matrix&lt; T &gt;::operator *</definition>
        <argsstring>(const double s) const</argsstring>
        <name>operator *</name>
        <param>
          <type>const double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Overloading the * operator for scaling. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the constant to scale the matrix by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the scaled matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="391" column="1" bodyfile="necsim/Matrix.h" bodystart="391" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a9fcf04fdd8569f115aa0ccc221b5a449" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix necsim::Matrix&lt; T &gt;::operator *</definition>
        <argsstring>(Matrix &amp;m) const</argsstring>
        <name>operator *</name>
        <param>
          <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the * operator for matrix multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. Multiplies each value in the matrix with its corresponding value in the other matrix. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to multiply with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the product of each ith,jth value of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="412" column="1" bodyfile="necsim/Matrix.h" bodystart="412" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a68762b157397bc31bb013dc8987940d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; necsim::Matrix&lt; T &gt;::operator *=</definition>
        <argsstring>(const double s)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Overloading the *= operator so that the new object is written to the current object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> object to add to this matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="434" column="1" bodyfile="necsim/Matrix.h" bodystart="434" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1ab1aaddf1f14fc29383c873087bc63c7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; necsim::Matrix&lt; T &gt;::operator *=</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the *= operator so that the new object is written to the current object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> object to add to this matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="452" column="1" bodyfile="necsim/Matrix.h" bodystart="452" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a1edc0dac773f9e04e7e495b5dc814899" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix necsim::Matrix&lt; T &gt;::operator/</definition>
        <argsstring>(const double s) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Overloading the / operator for scaling. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the constant to scale the matrix by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the scaled matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="473" column="1" bodyfile="necsim/Matrix.h" bodystart="473" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a186c9f767c0f07f356f24a62dad928c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; necsim::Matrix&lt; T &gt;::operator/=</definition>
        <argsstring>(const double s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Overloading the /= operator so that the new object is written to the current object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> object to add to this matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="492" column="1" bodyfile="necsim/Matrix.h" bodystart="492" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1af704a00731d540637b73f4fee528155a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; necsim::Matrix&lt; T &gt;::operator/=</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the /= operator so that the new object is written to the current object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If matrices are of different sizes, the operation is performed on the 0 to minimum values of each dimension. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> object to add to this matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="510" column="1" bodyfile="necsim/Matrix.h" bodystart="510" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1aa7b71c96c4c33ea80ddc175a2d575418" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Matrix&lt; T &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;row, const unsigned long &amp;col, const char *value)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value at the specified indices, including handling type conversion from char to the template class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>the column index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="595" column="1" bodyfile="necsim/Matrix.h" bodystart="595" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1acfd741c2de6c37ea69b04159e09b9662" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Matrix&lt; T &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;row, const unsigned long &amp;col, const T &amp;value)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value at the specified indices, including handling type conversion from char to the template class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>the column index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="607" column="1" bodyfile="necsim/Matrix.h" bodystart="607" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a378f1358bec37992ba4997f96dcf781f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void necsim::Matrix&lt; T &gt;::import</definition>
        <argsstring>(const string &amp;filename)</argsstring>
        <name>import</name>
        <reimplementedby refid="classnecsim_1_1_map_1a6e753018fee20348447f55cd5ed0f5dd">import</reimplementedby>
        <reimplementedby refid="classnecsim_1_1_map_1a6e753018fee20348447f55cd5ed0f5dd">import</reimplementedby>
        <reimplementedby refid="classnecsim_1_1_map_1a6e753018fee20348447f55cd5ed0f5dd">import</reimplementedby>
        <reimplementedby refid="classnecsim_1_1_map_1a6e753018fee20348447f55cd5ed0f5dd">import</reimplementedby>
        <param>
          <type>const string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Imports the matrix from a csv file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if type detection for the filename fails. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to import. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="618" column="1" bodyfile="necsim/Matrix.h" bodystart="618" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_matrix_1a1d4a5a6210d42338b41daad5112bd3df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Matrix&lt; T &gt;::importCsv</definition>
        <argsstring>(const string &amp;filename)</argsstring>
        <name>importCsv</name>
        <param>
          <type>const string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Imports the matrix from a csv file using the fast-csv-parser method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the file to import.Imports the matrix from a csv file using the standard, slower method. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>this function should not be used any more as it is much slower. </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the file to import. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the csv can be imported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="711" column="1" bodyfile="necsim/Matrix.h" bodystart="711" bodyend="753"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnecsim_1_1_matrix_1ab3d577ddd4221a3da49296c2c4ae4e04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; writeOut</definition>
        <argsstring>(ostream &amp;os, const Matrix &amp;m)</argsstring>
        <name>writeOut</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Writes the object to the output stream. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is done slightly inefficiently to preserve the output taking the correct form. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the object to write out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="531" column="1" bodyfile="necsim/Matrix.h" bodystart="531" bodyend="542"/>
      </memberdef>
      <memberdef kind="friend" id="classnecsim_1_1_matrix_1a7518cae16b9081c23c94b77b6d84e0d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend istream &amp;</type>
        <definition>istream&amp; readIn</definition>
        <argsstring>(istream &amp;is, Matrix &amp;m)</argsstring>
        <name>readIn</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Reads in from the input stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the object to read into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="550" column="1" bodyfile="necsim/Matrix.h" bodystart="550" bodyend="562"/>
      </memberdef>
      <memberdef kind="friend" id="classnecsim_1_1_matrix_1a5ed9a90fd6f010e7e9840a17d92d5361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Matrix &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the &lt;&lt; operator for outputting to an output stream. This can be used for writing to console or storing to file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="571" column="1" bodyfile="necsim/Matrix.h" bodystart="571" bodyend="574"/>
      </memberdef>
      <memberdef kind="friend" id="classnecsim_1_1_matrix_1afcea9fa7d9a5052070fe1fda963ef237" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Matrix &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the &gt;&gt; operator for inputting from an input stream. This can be used for writing to console or storing to file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to input to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Matrix.h" line="583" column="1" bodyfile="necsim/Matrix.h" bodystart="583" bodyend="586"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class containing the <ref refid="classnecsim_1_1_matrix" kindref="compound">Matrix</ref> object, set up as an array of Row objects. Includes basic operations, as well as the <ref refid="classnecsim_1_1_matrix_1a1d4a5a6210d42338b41daad5112bd3df" kindref="member">importCsv()</ref> function for more advanced reading from file. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the values in the matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="184">
        <label>necsim::Map&lt; T &gt;</label>
        <link refid="classnecsim_1_1_map"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="183">
        <label>necsim::Matrix&lt; T &gt;</label>
        <link refid="classnecsim_1_1_matrix"/>
      </node>
    </inheritancegraph>
    <location file="necsim/Matrix.h" line="53" column="1" bodyfile="necsim/Matrix.h" bodystart="52" bodyend="756"/>
    <listofallmembers>
      <member refid="classnecsim_1_1_matrix_1a5fee481a8ba9e92592afbc2ff5771966" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>begin</name></member>
      <member refid="classnecsim_1_1_matrix_1a729d0525a7a8b3031414d67e4319711a" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>begin</name></member>
      <member refid="classnecsim_1_1_matrix_1aa6d1861375360cae3241f647972383f1" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>end</name></member>
      <member refid="classnecsim_1_1_matrix_1a59ae7bb1f814a55b94ef17bd476238c8" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>end</name></member>
      <member refid="classnecsim_1_1_matrix_1a68936bdfa42e877c791fa74775f38d92" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>fill</name></member>
      <member refid="classnecsim_1_1_matrix_1af67a3a10dbdcc8d4656ce90104efa8ba" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>get</name></member>
      <member refid="classnecsim_1_1_matrix_1a5711966132f3c44abb02623fc2236158" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>get</name></member>
      <member refid="classnecsim_1_1_matrix_1a12d31769465e7c2a3b4798d078e00a47" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>getCols</name></member>
      <member refid="classnecsim_1_1_matrix_1a710473cfc0712ec15b55f651c887070c" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>getCopy</name></member>
      <member refid="classnecsim_1_1_matrix_1a1f55142f41ccd82bdf85a4210ed73952" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>getMean</name></member>
      <member refid="classnecsim_1_1_matrix_1afc78538f61f0e68558e345e1425cc1e0" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>getRows</name></member>
      <member refid="classnecsim_1_1_matrix_1a378f1358bec37992ba4997f96dcf781f" prot="public" virt="virtual"><scope>necsim::Matrix</scope><name>import</name></member>
      <member refid="classnecsim_1_1_matrix_1a1d4a5a6210d42338b41daad5112bd3df" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>importCsv</name></member>
      <member refid="classnecsim_1_1_matrix_1af96d6d558cf9b854c8275b716ab3835c" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>index</name></member>
      <member refid="classnecsim_1_1_matrix_1a213bef5520b5ebbe90e91e3ce2541ba7" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>Matrix</name></member>
      <member refid="classnecsim_1_1_matrix_1ae16eecda8e88ca6aaa6e9873ffc25c6f" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>Matrix</name></member>
      <member refid="classnecsim_1_1_matrix_1a3448e6eb1becb8b4ae913096b6b5a14d" prot="protected" virt="non-virtual"><scope>necsim::Matrix</scope><name>matrix</name></member>
      <member refid="classnecsim_1_1_matrix_1ad22e95f402d410d965c4d4c9aa61b5f6" prot="protected" virt="non-virtual"><scope>necsim::Matrix</scope><name>num_cols</name></member>
      <member refid="classnecsim_1_1_matrix_1afa8091e7e9ad63dd1aec96955b369fda" prot="protected" virt="non-virtual"><scope>necsim::Matrix</scope><name>num_rows</name></member>
      <member refid="classnecsim_1_1_matrix_1acf9a9141dc74553c0a3a43a0b66f008d" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator *</name></member>
      <member refid="classnecsim_1_1_matrix_1a9fcf04fdd8569f115aa0ccc221b5a449" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator *</name></member>
      <member refid="classnecsim_1_1_matrix_1a68762b157397bc31bb013dc8987940d8" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator *=</name></member>
      <member refid="classnecsim_1_1_matrix_1ab1aaddf1f14fc29383c873087bc63c7e" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator *=</name></member>
      <member refid="classnecsim_1_1_matrix_1acba7b8292dfa4af20766a140318282aa" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator+</name></member>
      <member refid="classnecsim_1_1_matrix_1aef31e4e44f771d9b6c102b124443a183" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator+=</name></member>
      <member refid="classnecsim_1_1_matrix_1a59b2969f521f241a5d0fdc7acfc1c311" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator-</name></member>
      <member refid="classnecsim_1_1_matrix_1accb2b34850a64c4f10c52b24b09f364c" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator-=</name></member>
      <member refid="classnecsim_1_1_matrix_1a1edc0dac773f9e04e7e495b5dc814899" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator/</name></member>
      <member refid="classnecsim_1_1_matrix_1a186c9f767c0f07f356f24a62dad928c7" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator/=</name></member>
      <member refid="classnecsim_1_1_matrix_1af704a00731d540637b73f4fee528155a" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator/=</name></member>
      <member refid="classnecsim_1_1_matrix_1a5ed9a90fd6f010e7e9840a17d92d5361" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnecsim_1_1_matrix_1a9973f911878111de8a659c80ce86ccab" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator=</name></member>
      <member refid="classnecsim_1_1_matrix_1afcea9fa7d9a5052070fe1fda963ef237" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>operator&gt;&gt;</name></member>
      <member refid="classnecsim_1_1_matrix_1a7518cae16b9081c23c94b77b6d84e0d8" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>readIn</name></member>
      <member refid="classnecsim_1_1_matrix_1ac8d16e95e533a6844633c59bc165c65d" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>setSize</name></member>
      <member refid="classnecsim_1_1_matrix_1aa7b71c96c4c33ea80ddc175a2d575418" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>setValue</name></member>
      <member refid="classnecsim_1_1_matrix_1acfd741c2de6c37ea69b04159e09b9662" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>setValue</name></member>
      <member refid="classnecsim_1_1_matrix_1a5028e8ac425a736e529c1b90c7b99796" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>sum</name></member>
      <member refid="classnecsim_1_1_matrix_1ab3d577ddd4221a3da49296c2c4ae4e04" prot="public" virt="non-virtual"><scope>necsim::Matrix</scope><name>writeOut</name></member>
      <member refid="classnecsim_1_1_matrix_1a1c00c456ea7c37e06d950b30b5d0262f" prot="public" virt="virtual"><scope>necsim::Matrix</scope><name>~Matrix</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
