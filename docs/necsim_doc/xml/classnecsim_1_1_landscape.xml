<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classnecsim_1_1_landscape" kind="class" language="C++" prot="public">
    <compoundname>necsim::Landscape</compoundname>
    <includes refid="_landscape_8h" local="no">Landscape.h</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classnecsim_1_1_landscape_1a4ab2518cdd4356dae7cc7f0081710995" prot="protected" static="no">
        <type>unsigned long(Landscape::*</type>
        <definition>typedef unsigned long(Landscape::* necsim::Landscape::fptr) (const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</definition>
        <argsstring>)(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</argsstring>
        <name>fptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="163" column="1" bodyfile="necsim/Landscape.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a82604454318b75323a42278130533684" prot="protected" static="no" mutable="no">
        <type><ref refid="classnecsim_1_1_map" kindref="compound">Map</ref>&lt; uint32_t &gt;</type>
        <definition>Map&lt;uint32_t&gt; necsim::Landscape::fine_map</definition>
        <argsstring></argsstring>
        <name>fine_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="105" column="1" bodyfile="necsim/Landscape.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a83416693749fad290efdf815d00a2094" prot="protected" static="no" mutable="no">
        <type><ref refid="classnecsim_1_1_map" kindref="compound">Map</ref>&lt; uint32_t &gt;</type>
        <definition>Map&lt;uint32_t&gt; necsim::Landscape::historical_fine_map</definition>
        <argsstring></argsstring>
        <name>historical_fine_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="107" column="1" bodyfile="necsim/Landscape.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a069748f187e7d222f985f7b30bc634cd" prot="protected" static="no" mutable="no">
        <type><ref refid="classnecsim_1_1_map" kindref="compound">Map</ref>&lt; uint32_t &gt;</type>
        <definition>Map&lt;uint32_t&gt; necsim::Landscape::coarse_map</definition>
        <argsstring></argsstring>
        <name>coarse_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="109" column="1" bodyfile="necsim/Landscape.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1ae1bd5e7d818d1fb0a6a2d7bc0d07a49f" prot="protected" static="no" mutable="no">
        <type><ref refid="classnecsim_1_1_map" kindref="compound">Map</ref>&lt; uint32_t &gt;</type>
        <definition>Map&lt;uint32_t&gt; necsim::Landscape::historical_coarse_map</definition>
        <argsstring></argsstring>
        <name>historical_coarse_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="111" column="1" bodyfile="necsim/Landscape.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a2932d861bcbf55ceda09f148bae00530" prot="protected" static="no" mutable="no">
        <type>shared_ptr&lt; <ref refid="structnecsim_1_1_sim_parameters" kindref="compound">SimParameters</ref> &gt;</type>
        <definition>shared_ptr&lt;SimParameters&gt; necsim::Landscape::mapvars</definition>
        <argsstring></argsstring>
        <name>mapvars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="113" column="1" bodyfile="necsim/Landscape.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a7563298def84dbcc7a52ebf0c3951547" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::fine_x_min</definition>
        <argsstring></argsstring>
        <name>fine_x_min</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="115" column="1" bodyfile="necsim/Landscape.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a8c6c43316b326e895bd162fe57eb0ab4" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::fine_y_min</definition>
        <argsstring></argsstring>
        <name>fine_y_min</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="115" column="1" bodyfile="necsim/Landscape.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a55f0560aee51a068c2522800e69305bb" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::coarse_x_min</definition>
        <argsstring></argsstring>
        <name>coarse_x_min</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="115" column="1" bodyfile="necsim/Landscape.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1ac8e93ea96be26466390c99d5d472796c" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::coarse_y_min</definition>
        <argsstring></argsstring>
        <name>coarse_y_min</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="115" column="1" bodyfile="necsim/Landscape.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a3822999b03b64e760a129cdaab829e85" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::fine_x_max</definition>
        <argsstring></argsstring>
        <name>fine_x_max</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="117" column="1" bodyfile="necsim/Landscape.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a4f54de716dd6b105f2156514aa2ea9b3" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::fine_y_max</definition>
        <argsstring></argsstring>
        <name>fine_y_max</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="117" column="1" bodyfile="necsim/Landscape.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a1102068e3ec81c4313cc19bb7128eedb" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::coarse_x_max</definition>
        <argsstring></argsstring>
        <name>coarse_x_max</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="117" column="1" bodyfile="necsim/Landscape.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1aff602331911dfff05e9be5efaf1ce2df" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::coarse_y_max</definition>
        <argsstring></argsstring>
        <name>coarse_y_max</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="117" column="1" bodyfile="necsim/Landscape.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1af70292158464eee5365316c8ebf53f9c" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::fine_x_offset</definition>
        <argsstring></argsstring>
        <name>fine_x_offset</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="119" column="1" bodyfile="necsim/Landscape.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a1824f52e06b669662aa274096f5d39af" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::fine_y_offset</definition>
        <argsstring></argsstring>
        <name>fine_y_offset</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="119" column="1" bodyfile="necsim/Landscape.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1ac5643812cd76fa93a14dd7efe037a2f2" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::coarse_x_offset</definition>
        <argsstring></argsstring>
        <name>coarse_x_offset</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="119" column="1" bodyfile="necsim/Landscape.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a16d6d286f0e4b13bcdd31cccf22facc2" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::coarse_y_offset</definition>
        <argsstring></argsstring>
        <name>coarse_y_offset</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="119" column="1" bodyfile="necsim/Landscape.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1af7b815074d60328ca400d87fa00512ed" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::scale</definition>
        <argsstring></argsstring>
        <name>scale</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="121" column="1" bodyfile="necsim/Landscape.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1add284577c8ae50facb5b4397ef2e1fa0" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::x_dim</definition>
        <argsstring></argsstring>
        <name>x_dim</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="123" column="1" bodyfile="necsim/Landscape.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a53f925460a86f671b72a11aee6a07070" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long necsim::Landscape::y_dim</definition>
        <argsstring></argsstring>
        <name>y_dim</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="125" column="1" bodyfile="necsim/Landscape.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1ada01271b1810fd137e5e5ed9a7dd7320" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double necsim::Landscape::deme</definition>
        <argsstring></argsstring>
        <name>deme</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="126" column="1" bodyfile="necsim/Landscape.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1ad53ae86ff6a5d14790d76896e72c9a3a" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool necsim::Landscape::check_set_dim</definition>
        <argsstring></argsstring>
        <name>check_set_dim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="128" column="1" bodyfile="necsim/Landscape.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a7c579a95eece92830b5cffa10b08e659" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double necsim::Landscape::dispersal_relative_cost</definition>
        <argsstring></argsstring>
        <name>dispersal_relative_cost</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="130" column="1" bodyfile="necsim/Landscape.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a9259a8476f52c67431d846e36cb2d0a4" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double necsim::Landscape::update_time</definition>
        <argsstring></argsstring>
        <name>update_time</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="132" column="1" bodyfile="necsim/Landscape.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1abdbfa39eefd802bf0ca3a3a7c21976d4" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double necsim::Landscape::habitat_change_rate</definition>
        <argsstring></argsstring>
        <name>habitat_change_rate</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="135" column="1" bodyfile="necsim/Landscape.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a536e1b296ae1cb71641b0a3bf4497349" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double necsim::Landscape::gen_since_historical</definition>
        <argsstring></argsstring>
        <name>gen_since_historical</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="137" column="1" bodyfile="necsim/Landscape.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1afa6c181cdbebcd862686168af51a15d6" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double necsim::Landscape::current_map_time</definition>
        <argsstring></argsstring>
        <name>current_map_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="139" column="1" bodyfile="necsim/Landscape.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a54031eb35b9bf4e0234be9fbd2635da2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool necsim::Landscape::is_historical</definition>
        <argsstring></argsstring>
        <name>is_historical</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="141" column="1" bodyfile="necsim/Landscape.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1af9cd3230e082a4c7686a6957bf88e204" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool necsim::Landscape::has_historical</definition>
        <argsstring></argsstring>
        <name>has_historical</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="143" column="1" bodyfile="necsim/Landscape.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1ae2229a51ea096c4916b0fe263256db4c" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::habitat_max</definition>
        <argsstring></argsstring>
        <name>habitat_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="145" column="1" bodyfile="necsim/Landscape.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a15d17990a130df34296b7a32ed847500" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::fine_max</definition>
        <argsstring></argsstring>
        <name>fine_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="147" column="1" bodyfile="necsim/Landscape.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a15a3cab18fa9572c85539f03b3406dc7" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::coarse_max</definition>
        <argsstring></argsstring>
        <name>coarse_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="149" column="1" bodyfile="necsim/Landscape.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a48d4b3455b046f31b94a51aba67192d7" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::historical_fine_max</definition>
        <argsstring></argsstring>
        <name>historical_fine_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="151" column="1" bodyfile="necsim/Landscape.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a5f6592f8d52b3e3c8ad950898f2ca270" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::historical_coarse_max</definition>
        <argsstring></argsstring>
        <name>historical_coarse_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="153" column="1" bodyfile="necsim/Landscape.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a70a698115456243304e4f8900389e6ee" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string necsim::Landscape::landscape_type</definition>
        <argsstring></argsstring>
        <name>landscape_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="155" column="1" bodyfile="necsim/Landscape.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1acd7fbb826b3910d4d7ca1b2f8a1efb30" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool necsim::Landscape::infinite_boundaries</definition>
        <argsstring></argsstring>
        <name>infinite_boundaries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="157" column="1" bodyfile="necsim/Landscape.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a67790478a3239a0e3da16fcb1736c23f" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string necsim::Landscape::NextMap</definition>
        <argsstring></argsstring>
        <name>NextMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="158" column="1" bodyfile="necsim/Landscape.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a33fa2e6ec3e0f79d3f6859abf858093c" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool necsim::Landscape::has_coarse</definition>
        <argsstring></argsstring>
        <name>has_coarse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="160" column="1" bodyfile="necsim/Landscape.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnecsim_1_1_landscape_1a06c7d0b770a076a420be9f1064c55778" prot="protected" static="no" mutable="no">
        <type>fptr</type>
        <definition>fptr necsim::Landscape::getValFunc</definition>
        <argsstring></argsstring>
        <name>getValFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="169" column="1" bodyfile="necsim/Landscape.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a1fb7ef819fb0c97b8dcfdebcd287602a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>necsim::Landscape::Landscape</definition>
        <argsstring>()</argsstring>
        <name>Landscape</name>
        <briefdescription>
<para>The default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="174" column="1" bodyfile="necsim/Landscape.h" bodystart="174" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a3e9f57e90dbcb04a53b2e8b77bd344e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getHabitatMax</definition>
        <argsstring>()</argsstring>
        <name>getHabitatMax</name>
        <briefdescription>
<para>Gets the maximum habitat value from any map. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the maximum habitat value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="195" column="1" bodyfile="necsim/Landscape.cpp" bodystart="1104" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ab46f914eb1cea4b31780cdca0a5852b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::hasHistorical</definition>
        <argsstring>()</argsstring>
        <name>hasHistorical</name>
        <briefdescription>
<para>Returns if the simulation is using historical maps. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if using historical maps </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="201" column="1" bodyfile="necsim/Landscape.cpp" bodystart="1109" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aa9a46e61814cebdbe2799d79df2bc480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_map" kindref="compound">Map</ref>&lt; uint32_t &gt; &amp;</type>
        <definition>Map&lt; uint32_t &gt; &amp; necsim::Landscape::getFineMap</definition>
        <argsstring>()</argsstring>
        <name>getFineMap</name>
        <briefdescription>
<para>Gets the fine map object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the fine map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="207" column="1" bodyfile="necsim/Landscape.cpp" bodystart="1114" bodyend="1117"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a1ec857e39649cceaedb73a94ffe6caa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnecsim_1_1_map" kindref="compound">Map</ref>&lt; uint32_t &gt; &amp;</type>
        <definition>Map&lt; uint32_t &gt; &amp; necsim::Landscape::getCoarseMap</definition>
        <argsstring>()</argsstring>
        <name>getCoarseMap</name>
        <briefdescription>
<para>Gets the coarse map object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the coarse map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="213" column="1" bodyfile="necsim/Landscape.cpp" bodystart="1119" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a53bfd168ec0fd694eafd39cfd677cbb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classnecsim_1_1_map" kindref="compound">Map</ref>&lt; uint32_t &gt; &amp;</type>
        <definition>const Map&lt; uint32_t &gt; &amp; necsim::Landscape::getFineMap</definition>
        <argsstring>() const</argsstring>
        <name>getFineMap</name>
        <briefdescription>
<para>Gets the fine map object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the fine map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="219" column="1" bodyfile="necsim/Landscape.cpp" bodystart="1124" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a586e5a04205812c31d5c726b6d67837a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classnecsim_1_1_map" kindref="compound">Map</ref>&lt; uint32_t &gt; &amp;</type>
        <definition>const Map&lt; uint32_t &gt; &amp; necsim::Landscape::getCoarseMap</definition>
        <argsstring>() const</argsstring>
        <name>getCoarseMap</name>
        <briefdescription>
<para>Gets the coarse map object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the coarse map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="225" column="1" bodyfile="necsim/Landscape.cpp" bodystart="1129" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a66eed32bb4f2c186363816096f0fe451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::setDims</definition>
        <argsstring>(shared_ptr&lt; SimParameters &gt; mapvarsin)</argsstring>
        <name>setDims</name>
        <param>
          <type>shared_ptr&lt; <ref refid="structnecsim_1_1_sim_parameters" kindref="compound">SimParameters</ref> &gt;</type>
          <declname>mapvarsin</declname>
        </param>
        <briefdescription>
<para>Sets the dimensions of the grid, the area where the species are initially sampled from. This function must be run before any of the calc map functions to allow for the correct deme allocation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mapvarsin</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structnecsim_1_1_sim_parameters" kindref="compound">SimParameters</ref> object containing the map variables to import </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="233" column="1" bodyfile="necsim/Landscape.cpp" bodystart="99" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a3a5f6f1413b72ace8f1587a933707a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::checkMapExists</definition>
        <argsstring>()</argsstring>
        <name>checkMapExists</name>
        <briefdescription>
<para>Checks that the map files exist (or are none/null). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all the paths exist in configs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="239" column="1" bodyfile="necsim/Landscape.cpp" bodystart="132" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ab8e2e06835e4b98a994d8b56f926d75a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::calcFineMap</definition>
        <argsstring>()</argsstring>
        <name>calcFineMap</name>
        <briefdescription>
<para>Imports the fine map object from file and calculates the correct values at each point. Without a map to input, the fine map will simply be a matrix of 1s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="245" column="1" bodyfile="necsim/Landscape.cpp" bodystart="145" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ae50403ca9ed6f1dcf40045a515a3d8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::calcHistoricalFineMap</definition>
        <argsstring>()</argsstring>
        <name>calcHistoricalFineMap</name>
        <briefdescription>
<para>Imports the historical fine map object from file and calculates the correct values at each point. Without a map to input, the historical fine map will simply be a matrix of 1s. This has the potential to be changed easily in future versions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="252" column="1" bodyfile="necsim/Landscape.cpp" bodystart="158" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ad009e5f72ba83dcfc54ffb2582a3fec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::calcCoarseMap</definition>
        <argsstring>()</argsstring>
        <name>calcCoarseMap</name>
        <briefdescription>
<para>Imports the coarse map object from file and calculates the correct values at each point. Without a map to input, the coarse map will simply be a matrix of 1s. This has the potential to be changed easily in future versions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="259" column="1" bodyfile="necsim/Landscape.cpp" bodystart="175" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ac69971a3fdd6f779445f050e31804db3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::calcHistoricalCoarseMap</definition>
        <argsstring>()</argsstring>
        <name>calcHistoricalCoarseMap</name>
        <briefdescription>
<para>Imports the historical coarse map object from file and calculates the correct values at each point. Without a map to input, the historical coarse map will simply be a matrix of 1s. This has the potential to be changed easily in future versions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="266" column="1" bodyfile="necsim/Landscape.cpp" bodystart="192" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a446b5ecb9411ffb017952ba64a4272d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::setTimeVars</definition>
        <argsstring>(double gen_since_historical_in, double habitat_change_rate_in)</argsstring>
        <name>setTimeVars</name>
        <param>
          <type>double</type>
          <declname>gen_since_historical_in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>habitat_change_rate_in</declname>
        </param>
        <briefdescription>
<para>Sets the time variables. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gen_since_historical_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the time (in generations) since a historical habitat state was achieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>habitat_change_rate_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the rate of transform of the habitat up until the historical time. A value of 0.2 would mean 20% of the change occurs linearlly up until the historical time and the remaining 80% occurs in a jump to the historical state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="275" column="1" bodyfile="necsim/Landscape.cpp" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a33a2eec8c68c31154c83c7827955e839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::calcOffset</definition>
        <argsstring>()</argsstring>
        <name>calcOffset</name>
        <briefdescription>
<para>Calculates the offset and extremeties of the fine map. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that setting dispersal_relative_cost to a value other than 1 can massively increase simulation time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="283" column="1" bodyfile="necsim/Landscape.cpp" bodystart="223" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ada99cb046489efa9ae668fdcd8d47069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::checkAllDimensionsZero</definition>
        <argsstring>()</argsstring>
        <name>checkAllDimensionsZero</name>
        <briefdescription>
<para>Checks that all dimensions for all maps are zero. </para>
        </briefdescription>
        <detaileddescription>
<para>If this is true, then it means we can calculate actual offsets and dimensions from the maps, otherwise the values from the parameters will be used.</para>
<para><simplesect kind="return"><para>true if all map offsets are zero </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="293" column="1" bodyfile="necsim/Landscape.cpp" bodystart="272" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a0d8a4016ff89a15f43cfe753f9a6375b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::calculateOffsetsFromMaps</definition>
        <argsstring>()</argsstring>
        <name>calculateOffsetsFromMaps</name>
        <briefdescription>
<para>Calculates the offsets from the map files directly. </para>
        </briefdescription>
        <detaileddescription>
<para>Assumes that all required maps have been imported. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="300" column="1" bodyfile="necsim/Landscape.cpp" bodystart="280" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a66ca7ebe93b8952e172b65a70b0c6158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::calculateOffsetsFromParameters</definition>
        <argsstring>()</argsstring>
        <name>calculateOffsetsFromParameters</name>
        <briefdescription>
<para>Uses the inputted parameters to set the offsets for the map files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="305" column="1" bodyfile="necsim/Landscape.cpp" bodystart="358" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a05a36e5acc956ae0903e8d8353ba38f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::validateMaps</definition>
        <argsstring>()</argsstring>
        <name>validateMaps</name>
        <briefdescription>
<para>Checks that the map file sizes are correct and that each value on the fragmented maps is less than the historical maps. This should be disabled in simulations where habitat sizes are expected to shrink as well as grow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="311" column="1" bodyfile="necsim/Landscape.cpp" bodystart="388" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a3217d08f28fee1723089d072fd63c9dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::updateMap</definition>
        <argsstring>(double generation)</argsstring>
        <name>updateMap</name>
        <param>
          <type>double</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Checks if an update needs to be performed to the map configuration, and if it does, performs the update. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation timer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the map has been updated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="318" column="1" bodyfile="necsim/Landscape.cpp" bodystart="477" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ad1e39b5f22abbeb566c698beb0c9057f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::requiresUpdate</definition>
        <argsstring>()</argsstring>
        <name>requiresUpdate</name>
        <briefdescription>
<para>Checks if the map will require another update. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if another update will be performed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="324" column="1" bodyfile="necsim/Landscape.cpp" bodystart="510" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a9a38e186d48bc2f5e09ba20c29327865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::doUpdate</definition>
        <argsstring>()</argsstring>
        <name>doUpdate</name>
        <briefdescription>
<para>Updates the historical map configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="329" column="1" bodyfile="necsim/Landscape.cpp" bodystart="515" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a9ca394f34f441cc7cae6cc572974bcc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::resetHistorical</definition>
        <argsstring>()</argsstring>
        <name>resetHistorical</name>
        <briefdescription>
<para>Resets the historical variables to recalculate historical maps. </para>
        </briefdescription>
        <detaileddescription>
<para>Required for rcoalescence compatability. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="336" column="1" bodyfile="necsim/Landscape.cpp" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a219f680e5f7f1a8d48a46a9735459f47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::isHistorical</definition>
        <argsstring>()</argsstring>
        <name>isHistorical</name>
        <briefdescription>
<para>Gets the historical boolean. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the historical map state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="342" column="1" bodyfile="necsim/Landscape.h" bodystart="342" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1adcf3d35e7bc3af5a4634ac5f018320ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::setHistorical</definition>
        <argsstring>(const bool &amp;historical_in)</argsstring>
        <name>setHistorical</name>
        <param>
          <type>const bool &amp;</type>
          <declname>historical_in</declname>
        </param>
        <briefdescription>
<para>Sets the historical state of the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>historical_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the historical state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="355" column="1" bodyfile="necsim/Landscape.h" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ae813547c2b6c5b9d6119805e68c23efd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double necsim::Landscape::getHistorical</definition>
        <argsstring>()</argsstring>
        <name>getHistorical</name>
        <briefdescription>
<para>Get the historical map time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double the historical map time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="364" column="1" bodyfile="necsim/Landscape.h" bodystart="364" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aa14a8ee9927ae1fc7e1adb94f42846fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string necsim::Landscape::getLandscapeType</definition>
        <argsstring>()</argsstring>
        <name>getLandscapeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="369" column="1" bodyfile="necsim/Landscape.h" bodystart="369" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aefb990fd583342bba7baa40403f629cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::checkHistorical</definition>
        <argsstring>(double generation)</argsstring>
        <name>checkHistorical</name>
        <param>
          <type>double</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Checks if the historical state has been reached. </para>
        </briefdescription>
        <detaileddescription>
<para>If there are no historical maps, this function will do nothing. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to check at. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="380" column="1" bodyfile="necsim/Landscape.h" bodystart="380" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ae515f574a91e7e416bba8e56b190735d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::setLandscape</definition>
        <argsstring>(const string &amp;is_infinite)</argsstring>
        <name>setLandscape</name>
        <param>
          <type>const string &amp;</type>
          <declname>is_infinite</declname>
        </param>
        <briefdescription>
<para>Sets the landscape functions to either infinite or finite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_infinite</parametername>
</parameternamelist>
<parameterdescription>
<para>a string of either closed, infinite, tiled_fine or tiled_coarse, corresponding to the relevant landscape type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="398" column="1" bodyfile="necsim/Landscape.cpp" bodystart="537" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aa7aab655d9a7d507f41c6d38bfa42205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getVal</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getVal</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version involves a call to the function pointer, *getValFunc, so that the correct call to either <ref refid="classnecsim_1_1_landscape_1a5aa7dd5373ca3f305f095d27e6524e3e" kindref="member">getValFinite()</ref> or getValInfinite is made. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="412" column="1" bodyfile="necsim/Landscape.cpp" bodystart="566" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a07784b06a694c4812987e7ebd504df56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getValCoarse</definition>
        <argsstring>(const double &amp;xval, const double &amp;yval, const double &amp;current_generation)</argsstring>
        <name>getValCoarse</name>
        <param>
          <type>const double &amp;</type>
          <declname>xval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value from the coarse maps, including linear interpolating between the historical and present maps. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xval</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yval</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation timer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the map at the given coordinates and time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="425" column="1" bodyfile="necsim/Landscape.cpp" bodystart="665" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ae1c7e957b42b04c4e515a3fdf1c815e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getValFine</definition>
        <argsstring>(const double &amp;xval, const double &amp;yval, const double &amp;current_generation)</argsstring>
        <name>getValFine</name>
        <param>
          <type>const double &amp;</type>
          <declname>xval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value from the fine maps, including linear interpolating between the historical and present maps. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xval</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yval</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation timer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the map at the given coordinates and time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="434" column="1" bodyfile="necsim/Landscape.cpp" bodystart="706" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a5aa7dd5373ca3f305f095d27e6524e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getValFinite</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getValFinite</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes finite landscape. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="446" column="1" bodyfile="necsim/Landscape.cpp" bodystart="753" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aa5326269fbdfe3bab16801c4ae733468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getValInfinite</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getValInfinite</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="462" column="1" bodyfile="necsim/Landscape.cpp" bodystart="575" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1adf16eb03c23ed00b55f5d0410d134eb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getValCoarseTiled</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getValCoarseTiled</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape of tiled coarse maps. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="479" column="1" bodyfile="necsim/Landscape.cpp" bodystart="592" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a7ec6ba7cabd7df1ec3d9fd60523f7e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getValFineTiled</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getValFineTiled</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape of tiled fine maps. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="496" column="1" bodyfile="necsim/Landscape.cpp" bodystart="611" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a672429d8ad817613dfbd6793b70b0ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getValCoarseClamped</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getValCoarseClamped</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape of clamped coarse maps. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="513" column="1" bodyfile="necsim/Landscape.cpp" bodystart="642" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ae290a0030e2b672e5ed8f0439e3aa4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getValFineClamped</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getValFineClamped</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape of clamped fine maps. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="530" column="1" bodyfile="necsim/Landscape.cpp" bodystart="653" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ac3c5e034b7c8e4efdb463fafc3af3230" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::convertSampleXToFineX</definition>
        <argsstring>(const unsigned long &amp;x, const long &amp;xwrap) const</argsstring>
        <name>convertSampleXToFineX</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <briefdescription>
<para>Gets the x position on the fine map, given an x and x wrapping. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this function will not check if the value is actually within bounds of the fine map, and an error will likely be thrown by the matrix referencing if this is the case. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate on the sample mask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the x wrapping of the sample mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the x location on the fine map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="545" column="1" bodyfile="necsim/Landscape.cpp" bodystart="787" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aa0fd73a65507819d19974a26d1807585" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::convertSampleYToFineY</definition>
        <argsstring>(const unsigned long &amp;y, const long &amp;ywrap) const</argsstring>
        <name>convertSampleYToFineY</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Gets the y position on the fine map, given a y and y wrapping. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this function will not check if the value is actually within bounds of the fine map, and an error will likely be thrown by the matrix referencing if this is the case. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate on the sample mask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the y wrapping of the sample mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the y location on the fine map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="556" column="1" bodyfile="necsim/Landscape.cpp" bodystart="792" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aab205b363f5f7ffd5bde7d83334f8872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::convertFineToSample</definition>
        <argsstring>(long &amp;x, long &amp;xwrap, long &amp;y, long &amp;ywrap)</argsstring>
        <name>convertFineToSample</name>
        <param>
          <type>long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Converts the fine map coordinates to the sample grid coordinates. Main conversion is in a call to convertCoordinates, but also makes sure the returned types are long integers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the x wrapping to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the y wrapping to modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="566" column="1" bodyfile="necsim/Landscape.cpp" bodystart="797" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1af99df91ee3e367bcafa6c3ed520f5a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::getInitialCount</definition>
        <argsstring>(double dSample, DataMask &amp;samplemask)</argsstring>
        <name>getInitialCount</name>
        <param>
          <type>double</type>
          <declname>dSample</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_data_mask" kindref="compound">DataMask</ref> &amp;</type>
          <declname>samplemask</declname>
        </param>
        <briefdescription>
<para>Counts the number of spaces available in the initial species space. Requires the samplemask to check the sampling area. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dSample</parametername>
</parameternamelist>
<parameterdescription>
<para>the sample proportion (from 0 to 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samplemask</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_data_mask" kindref="compound">DataMask</ref> object to sample from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the total number of individuals predicted to initially exist on the map. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="574" column="1" bodyfile="necsim/Landscape.cpp" bodystart="806" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a6e1f4bb32532b00e0ad4089594face2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shared_ptr&lt; <ref refid="structnecsim_1_1_sim_parameters" kindref="compound">SimParameters</ref> &gt;</type>
        <definition>shared_ptr&lt; SimParameters &gt; necsim::Landscape::getSimParameters</definition>
        <argsstring>()</argsstring>
        <name>getSimParameters</name>
        <briefdescription>
<para>Gets the mapvars object pointer for referencing simulation parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="580" column="1" bodyfile="necsim/Landscape.cpp" bodystart="840" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a0421dfecc0506f9282856498e30d7f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::checkMap</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;generation)</argsstring>
        <name>checkMap</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Checks whether the point is habitat or non-habitat. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean of whether the map is habitat or non-habitat. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="591" column="1" bodyfile="necsim/Landscape.cpp" bodystart="849" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a8e7f8ca9b35e4a7a8c9fd85b9f5c6cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::isOnFine</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap)</argsstring>
        <name>isOnFine</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Checks whether the point comes from the fine grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean of whether the location is on the fine map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="601" column="1" bodyfile="necsim/Landscape.cpp" bodystart="858" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ac5b6fd2fae09425cd7de62e6b006c1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::isOnCoarse</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap)</argsstring>
        <name>isOnCoarse</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Checks whether the point comes from the coarse grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean of whether the location is on the fine map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="611" column="1" bodyfile="necsim/Landscape.cpp" bodystart="866" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aaeb5e5eb0e589cb3d1d6418a0bd8acf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::isOnMap</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap)</argsstring>
        <name>isOnMap</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Checks that the point supplied is within map limits. If the map is inifite, returns true. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean of whether the location is on the fine map </para>
</simplesect>
<simplesect kind="return"><para>true if the point is within the map limits </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="623" column="1" bodyfile="necsim/Landscape.cpp" bodystart="874" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aa8273613d996876b8e3425274f0058f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::fixGridCoordinates</definition>
        <argsstring>(double &amp;x, double &amp;y, long &amp;xwrap, long &amp;ywrap)</argsstring>
        <name>fixGridCoordinates</name>
        <param>
          <type>double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Fixes the coordinates to be correctly within the original grid, altering the xwrap and ywrap consequently. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="632" column="1" bodyfile="necsim/Landscape.cpp" bodystart="887" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ae3e5b07c55ca8f459971cf5055ab0cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long necsim::Landscape::runDispersal</definition>
        <argsstring>(const double &amp;dist, const double &amp;angle, long &amp;startx, long &amp;starty, long &amp;startxwrap, long &amp;startywrap, bool &amp;disp_comp, const double &amp;generation)</argsstring>
        <name>runDispersal</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>startx</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>starty</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>startxwrap</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>startywrap</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>disp_comp</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>The function that actually performs the dispersal. It is included here for easier programming and efficiency as the function doesn&apos;t need to perform all the checks until the edge of the fine grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance travelled (or &quot;distance energy&quot; if dispersal_relative_cost is not 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle of movement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startx</parametername>
</parameternamelist>
<parameterdescription>
<para>the start x position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>starty</parametername>
</parameternamelist>
<parameterdescription>
<para>the start y position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startxwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the start number of wraps in the x dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the start number of wraps in the y dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>disp_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean of whether the dispersal was complete or not. This value is returned false if dispersal is to habitat, false otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the time in generations since the start of the simulation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the density value at the end dispersal point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="649" column="1" bodyfile="necsim/Landscape.cpp" bodystart="895" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1ac0328cb36ac6af5530313c14337fb093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double necsim::Landscape::distanceToNearestHabitat</definition>
        <argsstring>(const long &amp;start_x, const long &amp;start_y, const long &amp;start_x_wrap, const long &amp;start_y_wrap, const double &amp;generation)</argsstring>
        <name>distanceToNearestHabitat</name>
        <param>
          <type>const long &amp;</type>
          <declname>start_x</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>start_y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>start_x_wrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>start_y_wrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Calculates the distance from the start position to the nearest habitat cell. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the start x coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the start y coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_x_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting x wrapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_y_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting y wrapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the generation timer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the distance from the start position to the nearest habitat cell </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="667" column="1" bodyfile="necsim/Landscape.cpp" bodystart="954" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aaa30bd3227b8b3d3897302b8d23136e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::findNearestHabitatCell</definition>
        <argsstring>(const long &amp;start_x, const long &amp;start_y, const long &amp;start_x_wrap, const long &amp;start_y_wrap, double &amp;end_x, double &amp;end_y, const double &amp;generation)</argsstring>
        <name>findNearestHabitatCell</name>
        <param>
          <type>const long &amp;</type>
          <declname>start_x</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>start_y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>start_x_wrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>start_y_wrap</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>end_x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>end_y</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Gets the nearest habitat cells from a particular point, spiraling outwards. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the start x coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the start y coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_x_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting x wrapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_y_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting y wrapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the end x coordinate value to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the end y coordinate value to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the generation timer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="683" column="1" bodyfile="necsim/Landscape.cpp" bodystart="966" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1aba470c634e1862a387591fc03c136ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool necsim::Landscape::findAnyHabitatCell</definition>
        <argsstring>(const long &amp;start_x, const long &amp;start_y, const long &amp;start_x_wrap, const long &amp;start_y_wrap, double &amp;end_x, double &amp;end_y, const double &amp;generation)</argsstring>
        <name>findAnyHabitatCell</name>
        <param>
          <type>const long &amp;</type>
          <declname>start_x</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>start_y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>start_x_wrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>start_y_wrap</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>end_x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>end_y</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Finds the nearest habitat cell using a much slower method (scanning the entire map for cells. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the start x coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the start y coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_x_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting x wrapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_y_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting y wrapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the end x coordinate value to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the end y coordinate value to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the generation timer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if a habitat cell is found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="702" column="1" bodyfile="necsim/Landscape.cpp" bodystart="1018" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a201ec35b7bdad3abdb617cc6b02c0fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string necsim::Landscape::printVars</definition>
        <argsstring>()</argsstring>
        <name>printVars</name>
        <briefdescription>
<para>Prints some selected <ref refid="classnecsim_1_1_map" kindref="compound">Map</ref> variables to the terminal. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string containing the map variables to print </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="769" column="1" bodyfile="necsim/Landscape.cpp" bodystart="1092" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a24389d46fc7cab33a6d1285763aaa734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::clearMap</definition>
        <argsstring>()</argsstring>
        <name>clearMap</name>
        <briefdescription>
<para>Wipes the map of all variables. Only really useful for testing purposes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="774" column="1" bodyfile="necsim/Landscape.cpp" bodystart="1085" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="classnecsim_1_1_landscape_1a3415764c1965165b8d974279578068a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void necsim::Landscape::recalculateHabitatMax</definition>
        <argsstring>()</argsstring>
        <name>recalculateHabitatMax</name>
        <briefdescription>
<para>Recalculates the habitat map maximum by checking the maximums for each of the relevant map files (fine, coarse and historicals). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="780" column="1" bodyfile="necsim/Landscape.cpp" bodystart="1134" bodyend="1176"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnecsim_1_1_landscape_1a1c309185f0c3a601f27c932f1f2fa886" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Landscape &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnecsim_1_1_landscape" kindref="compound">Landscape</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Operator for outputting the <ref refid="classnecsim_1_1_map" kindref="compound">Map</ref> object variables to an output stream. This is used for storing the <ref refid="classnecsim_1_1_map" kindref="compound">Map</ref> object to file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_map" kindref="compound">Map</ref> object to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="717" column="1" bodyfile="necsim/Landscape.h" bodystart="717" bodyend="732"/>
      </memberdef>
      <memberdef kind="friend" id="classnecsim_1_1_landscape_1a8b9beb241ad534346dc98d24f6bb9279" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Landscape &amp;r)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classnecsim_1_1_landscape" kindref="compound">Landscape</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Operator for inputting the <ref refid="classnecsim_1_1_map" kindref="compound">Map</ref> object variables from an input stream. This is used for reading the <ref refid="classnecsim_1_1_map" kindref="compound">Map</ref> object from file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnecsim_1_1_map" kindref="compound">Map</ref> object to input to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="741" column="1" bodyfile="necsim/Landscape.h" bodystart="741" bodyend="763"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains all maps and provides the functions for accessing a grid cell in the correct temporal and spacial location. </para>
    </briefdescription>
    <detaileddescription>
<para>The function <ref refid="classnecsim_1_1_landscape_1ae3e5b07c55ca8f459971cf5055ab0cbe" kindref="member">runDispersal()</ref> also provides the move routine, provided two alternative methods for moving individuals. Contains routines for easy setting up and switching between the different coordinate systems required. Set the map parameters with <ref refid="classnecsim_1_1_landscape_1a66eed32bb4f2c186363816096f0fe451" kindref="member">setDims()</ref>, import the map files with <ref refid="classnecsim_1_1_landscape_1ab8e2e06835e4b98a994d8b56f926d75a" kindref="member">calcFineMap()</ref>, <ref refid="classnecsim_1_1_landscape_1ad009e5f72ba83dcfc54ffb2582a3fec2" kindref="member">calcCoarseMap()</ref> etc, then set up the landscape type using <ref refid="classnecsim_1_1_landscape_1ae515f574a91e7e416bba8e56b190735d" kindref="member">setLandscape()</ref> and sethistorical(). Usage is then by <ref refid="classnecsim_1_1_landscape_1ae3e5b07c55ca8f459971cf5055ab0cbe" kindref="member">runDispersal()</ref> for running a dispersal kernel on the landscape, and then <ref refid="classnecsim_1_1_landscape_1aa7aab655d9a7d507f41c6d38bfa42205" kindref="member">getVal()</ref> to obtain the density at the desired coordinates. All coordinates should be given in reference to the simulation grid, and offsets for the fine and coarse map are calculated automatically. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="146">
        <label>std::queue&lt; necsim::HistoricalMapParameters &gt;</label>
        <childnode refid="147" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="138">
        <label>necsim::Map&lt; uint32_t &gt;</label>
        <link refid="classnecsim_1_1_map"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
        <childnode refid="140" relation="usage">
          <edgelabel>file_name</edgelabel>
        </childnode>
        <childnode refid="142" relation="usage">
          <edgelabel>po_dataset</edgelabel>
        </childnode>
        <childnode refid="143" relation="usage">
          <edgelabel>po_band</edgelabel>
        </childnode>
      </node>
      <node id="149">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="145">
        <label>necsim::SimParameters</label>
        <link refid="structnecsim_1_1_sim_parameters"/>
        <childnode refid="146" relation="usage">
          <edgelabel>all_historical_map_parameters</edgelabel>
        </childnode>
        <childnode refid="140" relation="usage">
          <edgelabel>reproduction_file</edgelabel>
          <edgelabel>times_file</edgelabel>
          <edgelabel>sample_mask_file</edgelabel>
          <edgelabel>fine_map_file</edgelabel>
          <edgelabel>dispersal_method</edgelabel>
          <edgelabel>dispersal_file</edgelabel>
          <edgelabel>historical_fine_map_file</edgelabel>
          <edgelabel>death_file</edgelabel>
          <edgelabel>historical_coarse_map_file</edgelabel>
          <edgelabel>output_directory</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="148" relation="usage">
          <edgelabel>configs</edgelabel>
        </childnode>
        <childnode refid="149" relation="usage">
          <edgelabel>times</edgelabel>
        </childnode>
      </node>
      <node id="139">
        <label>necsim::Matrix&lt; uint32_t &gt;</label>
        <link refid="classnecsim_1_1_matrix"/>
      </node>
      <node id="144">
        <label>std::shared_ptr&lt; necsim::SimParameters &gt;</label>
        <childnode refid="145" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="141">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="147">
        <label>necsim::HistoricalMapParameters</label>
        <link refid="structnecsim_1_1_historical_map_parameters"/>
        <childnode refid="140" relation="usage">
          <edgelabel>fine_map_file</edgelabel>
          <edgelabel>coarse_map_file</edgelabel>
        </childnode>
      </node>
      <node id="148">
        <label>necsim::ConfigParser</label>
        <link refid="classnecsim_1_1_config_parser"/>
      </node>
      <node id="143">
        <label>std::shared_ptr&lt; GDALRasterBand * &gt;</label>
      </node>
      <node id="142">
        <label>std::shared_ptr&lt; GDALDataset * &gt;</label>
      </node>
      <node id="137">
        <label>necsim::Landscape</label>
        <link refid="classnecsim_1_1_landscape"/>
        <childnode refid="138" relation="usage">
          <edgelabel>historical_fine_map</edgelabel>
          <edgelabel>fine_map</edgelabel>
          <edgelabel>coarse_map</edgelabel>
          <edgelabel>historical_coarse_map</edgelabel>
        </childnode>
        <childnode refid="144" relation="usage">
          <edgelabel>mapvars</edgelabel>
        </childnode>
        <childnode refid="140" relation="usage">
          <edgelabel>NextMap</edgelabel>
          <edgelabel>landscape_type</edgelabel>
        </childnode>
      </node>
      <node id="140">
        <label>std::string</label>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/Landscape.h" line="98" column="1" bodyfile="necsim/Landscape.h" bodystart="97" bodyend="782"/>
    <listofallmembers>
      <member refid="classnecsim_1_1_landscape_1ad009e5f72ba83dcfc54ffb2582a3fec2" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>calcCoarseMap</name></member>
      <member refid="classnecsim_1_1_landscape_1ab8e2e06835e4b98a994d8b56f926d75a" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>calcFineMap</name></member>
      <member refid="classnecsim_1_1_landscape_1ac69971a3fdd6f779445f050e31804db3" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>calcHistoricalCoarseMap</name></member>
      <member refid="classnecsim_1_1_landscape_1ae50403ca9ed6f1dcf40045a515a3d8e9" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>calcHistoricalFineMap</name></member>
      <member refid="classnecsim_1_1_landscape_1a33a2eec8c68c31154c83c7827955e839" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>calcOffset</name></member>
      <member refid="classnecsim_1_1_landscape_1a0d8a4016ff89a15f43cfe753f9a6375b" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>calculateOffsetsFromMaps</name></member>
      <member refid="classnecsim_1_1_landscape_1a66ca7ebe93b8952e172b65a70b0c6158" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>calculateOffsetsFromParameters</name></member>
      <member refid="classnecsim_1_1_landscape_1ad53ae86ff6a5d14790d76896e72c9a3a" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>check_set_dim</name></member>
      <member refid="classnecsim_1_1_landscape_1ada99cb046489efa9ae668fdcd8d47069" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>checkAllDimensionsZero</name></member>
      <member refid="classnecsim_1_1_landscape_1aefb990fd583342bba7baa40403f629cc" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>checkHistorical</name></member>
      <member refid="classnecsim_1_1_landscape_1a0421dfecc0506f9282856498e30d7f89" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>checkMap</name></member>
      <member refid="classnecsim_1_1_landscape_1a3a5f6f1413b72ace8f1587a933707a70" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>checkMapExists</name></member>
      <member refid="classnecsim_1_1_landscape_1a24389d46fc7cab33a6d1285763aaa734" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>clearMap</name></member>
      <member refid="classnecsim_1_1_landscape_1a069748f187e7d222f985f7b30bc634cd" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>coarse_map</name></member>
      <member refid="classnecsim_1_1_landscape_1a15a3cab18fa9572c85539f03b3406dc7" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>coarse_max</name></member>
      <member refid="classnecsim_1_1_landscape_1a1102068e3ec81c4313cc19bb7128eedb" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>coarse_x_max</name></member>
      <member refid="classnecsim_1_1_landscape_1a55f0560aee51a068c2522800e69305bb" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>coarse_x_min</name></member>
      <member refid="classnecsim_1_1_landscape_1ac5643812cd76fa93a14dd7efe037a2f2" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>coarse_x_offset</name></member>
      <member refid="classnecsim_1_1_landscape_1aff602331911dfff05e9be5efaf1ce2df" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>coarse_y_max</name></member>
      <member refid="classnecsim_1_1_landscape_1ac8e93ea96be26466390c99d5d472796c" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>coarse_y_min</name></member>
      <member refid="classnecsim_1_1_landscape_1a16d6d286f0e4b13bcdd31cccf22facc2" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>coarse_y_offset</name></member>
      <member refid="classnecsim_1_1_landscape_1aab205b363f5f7ffd5bde7d83334f8872" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>convertFineToSample</name></member>
      <member refid="classnecsim_1_1_landscape_1ac3c5e034b7c8e4efdb463fafc3af3230" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>convertSampleXToFineX</name></member>
      <member refid="classnecsim_1_1_landscape_1aa0fd73a65507819d19974a26d1807585" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>convertSampleYToFineY</name></member>
      <member refid="classnecsim_1_1_landscape_1afa6c181cdbebcd862686168af51a15d6" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>current_map_time</name></member>
      <member refid="classnecsim_1_1_landscape_1ada01271b1810fd137e5e5ed9a7dd7320" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>deme</name></member>
      <member refid="classnecsim_1_1_landscape_1a7c579a95eece92830b5cffa10b08e659" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>dispersal_relative_cost</name></member>
      <member refid="classnecsim_1_1_landscape_1ac0328cb36ac6af5530313c14337fb093" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>distanceToNearestHabitat</name></member>
      <member refid="classnecsim_1_1_landscape_1a9a38e186d48bc2f5e09ba20c29327865" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>doUpdate</name></member>
      <member refid="classnecsim_1_1_landscape_1aba470c634e1862a387591fc03c136ea8" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>findAnyHabitatCell</name></member>
      <member refid="classnecsim_1_1_landscape_1aaa30bd3227b8b3d3897302b8d23136e1" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>findNearestHabitatCell</name></member>
      <member refid="classnecsim_1_1_landscape_1a82604454318b75323a42278130533684" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>fine_map</name></member>
      <member refid="classnecsim_1_1_landscape_1a15d17990a130df34296b7a32ed847500" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>fine_max</name></member>
      <member refid="classnecsim_1_1_landscape_1a3822999b03b64e760a129cdaab829e85" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>fine_x_max</name></member>
      <member refid="classnecsim_1_1_landscape_1a7563298def84dbcc7a52ebf0c3951547" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>fine_x_min</name></member>
      <member refid="classnecsim_1_1_landscape_1af70292158464eee5365316c8ebf53f9c" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>fine_x_offset</name></member>
      <member refid="classnecsim_1_1_landscape_1a4f54de716dd6b105f2156514aa2ea9b3" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>fine_y_max</name></member>
      <member refid="classnecsim_1_1_landscape_1a8c6c43316b326e895bd162fe57eb0ab4" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>fine_y_min</name></member>
      <member refid="classnecsim_1_1_landscape_1a1824f52e06b669662aa274096f5d39af" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>fine_y_offset</name></member>
      <member refid="classnecsim_1_1_landscape_1aa8273613d996876b8e3425274f0058f8" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>fixGridCoordinates</name></member>
      <member refid="classnecsim_1_1_landscape_1a4ab2518cdd4356dae7cc7f0081710995" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>fptr</name></member>
      <member refid="classnecsim_1_1_landscape_1a536e1b296ae1cb71641b0a3bf4497349" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>gen_since_historical</name></member>
      <member refid="classnecsim_1_1_landscape_1a1ec857e39649cceaedb73a94ffe6caa8" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getCoarseMap</name></member>
      <member refid="classnecsim_1_1_landscape_1a586e5a04205812c31d5c726b6d67837a" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getCoarseMap</name></member>
      <member refid="classnecsim_1_1_landscape_1aa9a46e61814cebdbe2799d79df2bc480" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getFineMap</name></member>
      <member refid="classnecsim_1_1_landscape_1a53bfd168ec0fd694eafd39cfd677cbb0" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getFineMap</name></member>
      <member refid="classnecsim_1_1_landscape_1a3e9f57e90dbcb04a53b2e8b77bd344e9" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getHabitatMax</name></member>
      <member refid="classnecsim_1_1_landscape_1ae813547c2b6c5b9d6119805e68c23efd" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getHistorical</name></member>
      <member refid="classnecsim_1_1_landscape_1af99df91ee3e367bcafa6c3ed520f5a64" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getInitialCount</name></member>
      <member refid="classnecsim_1_1_landscape_1aa14a8ee9927ae1fc7e1adb94f42846fa" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getLandscapeType</name></member>
      <member refid="classnecsim_1_1_landscape_1a6e1f4bb32532b00e0ad4089594face2d" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getSimParameters</name></member>
      <member refid="classnecsim_1_1_landscape_1aa7aab655d9a7d507f41c6d38bfa42205" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getVal</name></member>
      <member refid="classnecsim_1_1_landscape_1a07784b06a694c4812987e7ebd504df56" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getValCoarse</name></member>
      <member refid="classnecsim_1_1_landscape_1a672429d8ad817613dfbd6793b70b0ce3" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getValCoarseClamped</name></member>
      <member refid="classnecsim_1_1_landscape_1adf16eb03c23ed00b55f5d0410d134eb6" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getValCoarseTiled</name></member>
      <member refid="classnecsim_1_1_landscape_1ae1c7e957b42b04c4e515a3fdf1c815e5" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getValFine</name></member>
      <member refid="classnecsim_1_1_landscape_1ae290a0030e2b672e5ed8f0439e3aa4c9" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getValFineClamped</name></member>
      <member refid="classnecsim_1_1_landscape_1a7ec6ba7cabd7df1ec3d9fd60523f7e28" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getValFineTiled</name></member>
      <member refid="classnecsim_1_1_landscape_1a5aa7dd5373ca3f305f095d27e6524e3e" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getValFinite</name></member>
      <member refid="classnecsim_1_1_landscape_1a06c7d0b770a076a420be9f1064c55778" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>getValFunc</name></member>
      <member refid="classnecsim_1_1_landscape_1aa5326269fbdfe3bab16801c4ae733468" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>getValInfinite</name></member>
      <member refid="classnecsim_1_1_landscape_1abdbfa39eefd802bf0ca3a3a7c21976d4" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>habitat_change_rate</name></member>
      <member refid="classnecsim_1_1_landscape_1ae2229a51ea096c4916b0fe263256db4c" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>habitat_max</name></member>
      <member refid="classnecsim_1_1_landscape_1a33fa2e6ec3e0f79d3f6859abf858093c" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>has_coarse</name></member>
      <member refid="classnecsim_1_1_landscape_1af9cd3230e082a4c7686a6957bf88e204" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>has_historical</name></member>
      <member refid="classnecsim_1_1_landscape_1ab46f914eb1cea4b31780cdca0a5852b8" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>hasHistorical</name></member>
      <member refid="classnecsim_1_1_landscape_1ae1bd5e7d818d1fb0a6a2d7bc0d07a49f" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>historical_coarse_map</name></member>
      <member refid="classnecsim_1_1_landscape_1a5f6592f8d52b3e3c8ad950898f2ca270" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>historical_coarse_max</name></member>
      <member refid="classnecsim_1_1_landscape_1a83416693749fad290efdf815d00a2094" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>historical_fine_map</name></member>
      <member refid="classnecsim_1_1_landscape_1a48d4b3455b046f31b94a51aba67192d7" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>historical_fine_max</name></member>
      <member refid="classnecsim_1_1_landscape_1acd7fbb826b3910d4d7ca1b2f8a1efb30" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>infinite_boundaries</name></member>
      <member refid="classnecsim_1_1_landscape_1a54031eb35b9bf4e0234be9fbd2635da2" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>is_historical</name></member>
      <member refid="classnecsim_1_1_landscape_1a219f680e5f7f1a8d48a46a9735459f47" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>isHistorical</name></member>
      <member refid="classnecsim_1_1_landscape_1ac5b6fd2fae09425cd7de62e6b006c1f8" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>isOnCoarse</name></member>
      <member refid="classnecsim_1_1_landscape_1a8e7f8ca9b35e4a7a8c9fd85b9f5c6cc1" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>isOnFine</name></member>
      <member refid="classnecsim_1_1_landscape_1aaeb5e5eb0e589cb3d1d6418a0bd8acf9" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>isOnMap</name></member>
      <member refid="classnecsim_1_1_landscape_1a1fb7ef819fb0c97b8dcfdebcd287602a" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>Landscape</name></member>
      <member refid="classnecsim_1_1_landscape_1a70a698115456243304e4f8900389e6ee" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>landscape_type</name></member>
      <member refid="classnecsim_1_1_landscape_1a2932d861bcbf55ceda09f148bae00530" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>mapvars</name></member>
      <member refid="classnecsim_1_1_landscape_1a67790478a3239a0e3da16fcb1736c23f" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>NextMap</name></member>
      <member refid="classnecsim_1_1_landscape_1a1c309185f0c3a601f27c932f1f2fa886" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnecsim_1_1_landscape_1a8b9beb241ad534346dc98d24f6bb9279" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>operator&gt;&gt;</name></member>
      <member refid="classnecsim_1_1_landscape_1a201ec35b7bdad3abdb617cc6b02c0fee" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>printVars</name></member>
      <member refid="classnecsim_1_1_landscape_1a3415764c1965165b8d974279578068a2" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>recalculateHabitatMax</name></member>
      <member refid="classnecsim_1_1_landscape_1ad1e39b5f22abbeb566c698beb0c9057f" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>requiresUpdate</name></member>
      <member refid="classnecsim_1_1_landscape_1a9ca394f34f441cc7cae6cc572974bcc0" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>resetHistorical</name></member>
      <member refid="classnecsim_1_1_landscape_1ae3e5b07c55ca8f459971cf5055ab0cbe" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>runDispersal</name></member>
      <member refid="classnecsim_1_1_landscape_1af7b815074d60328ca400d87fa00512ed" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>scale</name></member>
      <member refid="classnecsim_1_1_landscape_1a66eed32bb4f2c186363816096f0fe451" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>setDims</name></member>
      <member refid="classnecsim_1_1_landscape_1adcf3d35e7bc3af5a4634ac5f018320ba" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>setHistorical</name></member>
      <member refid="classnecsim_1_1_landscape_1ae515f574a91e7e416bba8e56b190735d" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>setLandscape</name></member>
      <member refid="classnecsim_1_1_landscape_1a446b5ecb9411ffb017952ba64a4272d0" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>setTimeVars</name></member>
      <member refid="classnecsim_1_1_landscape_1a9259a8476f52c67431d846e36cb2d0a4" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>update_time</name></member>
      <member refid="classnecsim_1_1_landscape_1a3217d08f28fee1723089d072fd63c9dd" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>updateMap</name></member>
      <member refid="classnecsim_1_1_landscape_1a05a36e5acc956ae0903e8d8353ba38f3" prot="public" virt="non-virtual"><scope>necsim::Landscape</scope><name>validateMaps</name></member>
      <member refid="classnecsim_1_1_landscape_1add284577c8ae50facb5b4397ef2e1fa0" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>x_dim</name></member>
      <member refid="classnecsim_1_1_landscape_1a53f925460a86f671b72a11aee6a07070" prot="protected" virt="non-virtual"><scope>necsim::Landscape</scope><name>y_dim</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
