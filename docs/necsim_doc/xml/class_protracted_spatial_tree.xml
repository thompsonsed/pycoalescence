<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_protracted_spatial_tree" kind="class" language="C++" prot="public">
    <compoundname>ProtractedSpatialTree</compoundname>
    <basecompoundref refid="class_spatial_tree" prot="public" virt="virtual">SpatialTree</basecompoundref>
    <basecompoundref refid="class_protracted_tree" prot="public" virt="virtual">ProtractedTree</basecompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_spatial_tree_1ad238e987bbf1cf2110bd6c3b980de3e4" prot="protected" static="no" mutable="no">
        <type><ref refid="class_dispersal_coordinator" kindref="compound">DispersalCoordinator</ref></type>
        <definition>DispersalCoordinator SpatialTree::dispersal_coordinator</definition>
        <argsstring></argsstring>
        <name>dispersal_coordinator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="97" column="1" bodyfile="necsim/SpatialTree.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spatial_tree_1a6daf7de3a05f63777a0ad67f12bc7095" prot="protected" static="no" mutable="no">
        <type>shared_ptr&lt; <ref refid="class_activity_map" kindref="compound">ActivityMap</ref> &gt;</type>
        <definition>shared_ptr&lt;ActivityMap&gt; SpatialTree::death_map</definition>
        <argsstring></argsstring>
        <name>death_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="99" column="1" bodyfile="necsim/SpatialTree.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spatial_tree_1ac9ec70e77ff7b1f67bc9aed6cb8749e1" prot="protected" static="no" mutable="no">
        <type>shared_ptr&lt; <ref refid="class_activity_map" kindref="compound">ActivityMap</ref> &gt;</type>
        <definition>shared_ptr&lt;ActivityMap&gt; SpatialTree::reproduction_map</definition>
        <argsstring></argsstring>
        <name>reproduction_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="101" column="1" bodyfile="necsim/SpatialTree.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spatial_tree_1a44fdea35be7d4496248ee27c1457ad6a" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string SpatialTree::fine_map_input</definition>
        <argsstring></argsstring>
        <name>fine_map_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="104" column="1" bodyfile="necsim/SpatialTree.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spatial_tree_1a464b674dbf6f2968497f698ad9a16433" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string SpatialTree::coarse_map_input</definition>
        <argsstring></argsstring>
        <name>coarse_map_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="104" column="1" bodyfile="necsim/SpatialTree.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spatial_tree_1ac49970522839ed06459949caca57fa1d" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string SpatialTree::historical_fine_map_input</definition>
        <argsstring></argsstring>
        <name>historical_fine_map_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="105" column="1" bodyfile="necsim/SpatialTree.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spatial_tree_1a54279132ba3e8bc3455488bb3b16e8f8" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string SpatialTree::historical_coarse_map_input</definition>
        <argsstring></argsstring>
        <name>historical_coarse_map_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="105" column="1" bodyfile="necsim/SpatialTree.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spatial_tree_1a0c081fddba637ed965c932bb6b8ee998" prot="protected" static="no" mutable="no">
        <type>shared_ptr&lt; <ref refid="class_landscape" kindref="compound">Landscape</ref> &gt;</type>
        <definition>shared_ptr&lt;Landscape&gt; SpatialTree::landscape</definition>
        <argsstring></argsstring>
        <name>landscape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="108" column="1" bodyfile="necsim/SpatialTree.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spatial_tree_1a199167b149b25c506fdaeb660d595658" prot="protected" static="no" mutable="no">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref>&lt; <ref refid="class_species_list" kindref="compound">SpeciesList</ref> &gt;</type>
        <definition>Matrix&lt;SpeciesList&gt; SpatialTree::grid</definition>
        <argsstring></argsstring>
        <name>grid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="110" column="1" bodyfile="necsim/SpatialTree.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spatial_tree_1a694c7eb6c70687ea87e49066a8957877" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long SpatialTree::desired_specnum</definition>
        <argsstring></argsstring>
        <name>desired_specnum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="111" column="1" bodyfile="necsim/SpatialTree.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spatial_tree_1ad902e850c9573b5c26ef6d77a203f72d" prot="protected" static="no" mutable="no">
        <type><ref refid="class_data_mask" kindref="compound">DataMask</ref></type>
        <definition>DataMask SpatialTree::samplegrid</definition>
        <argsstring></argsstring>
        <name>samplegrid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="113" column="1" bodyfile="necsim/SpatialTree.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a5983af6c56e41be51be0766941093b4b" prot="protected" static="no" mutable="no">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; <ref refid="class_tree_node" kindref="compound">TreeNode</ref> &gt;</type>
        <definition>Row&lt;TreeNode&gt; Tree::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="40" column="1" bodyfile="necsim/Tree.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a50344999e6b64d15eef935b1f6023471" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Tree::enddata</definition>
        <argsstring></argsstring>
        <name>enddata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="42" column="1" bodyfile="necsim/Tree.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a63c399793a209332ad0f5da7fc830d56" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref></type>
        <definition>SimParameters Tree::sim_parameters</definition>
        <argsstring></argsstring>
        <name>sim_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="44" column="1" bodyfile="necsim/Tree.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a20790866da998f8cb7d0f1455d9fbcc5" prot="protected" static="no" mutable="no">
        <type>shared_ptr&lt; <ref refid="class_n_rrand" kindref="compound">NRrand</ref> &gt;</type>
        <definition>shared_ptr&lt;NRrand&gt; Tree::NR</definition>
        <argsstring></argsstring>
        <name>NR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="46" column="1" bodyfile="necsim/Tree.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a61b4349fe78d09ac06eff4b7d6833105" prot="protected" static="no" mutable="no">
        <type>vector&lt; long double &gt;</type>
        <definition>vector&lt;long double&gt; Tree::speciation_rates</definition>
        <argsstring></argsstring>
        <name>speciation_rates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="48" column="1" bodyfile="necsim/Tree.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a78935befd45946b8e69023bffca59c1d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Tree::seeded</definition>
        <argsstring></argsstring>
        <name>seeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="50" column="1" bodyfile="necsim/Tree.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1acf483ed0a44629c9aa4690a08017ee35" prot="protected" static="no" mutable="no">
        <type>long long</type>
        <definition>long long Tree::the_seed</definition>
        <argsstring></argsstring>
        <name>the_seed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="52" column="1" bodyfile="necsim/Tree.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a9f74137d5c9c5529ec9a06f88dfa6960" prot="protected" static="no" mutable="no">
        <type>long long</type>
        <definition>long long Tree::the_task</definition>
        <argsstring></argsstring>
        <name>the_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="54" column="1" bodyfile="necsim/Tree.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a5e031ea8d94f48288547116a9e7d7add" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Tree::times_file</definition>
        <argsstring></argsstring>
        <name>times_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="57" column="1" bodyfile="necsim/Tree.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a56bb1ea64368f5b705360a435350f9d5" prot="protected" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; Tree::reference_times</definition>
        <argsstring></argsstring>
        <name>reference_times</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="58" column="1" bodyfile="necsim/Tree.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1abed1688c75153c4af4e8c574a26dd636" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Tree::uses_temporal_sampling</definition>
        <argsstring></argsstring>
        <name>uses_temporal_sampling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="60" column="1" bodyfile="necsim/Tree.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1ac077d686ee96b123aa779e8a8a5de3ce" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t Tree::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="62" column="1" bodyfile="necsim/Tree.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a01cc9b30f2b10b9f51b218df25b13b09" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t Tree::sim_start</definition>
        <argsstring></argsstring>
        <name>sim_start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="62" column="1" bodyfile="necsim/Tree.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a26100477c7e58a9e0a90cdee1379ed69" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t Tree::sim_end</definition>
        <argsstring></argsstring>
        <name>sim_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="62" column="1" bodyfile="necsim/Tree.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a5510d0fb5deb23fd39a2619d104f85fa" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t Tree::now</definition>
        <argsstring></argsstring>
        <name>now</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="62" column="1" bodyfile="necsim/Tree.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1ac399ba59be9dc33a04223d10a82ee5ee" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t Tree::sim_finish</definition>
        <argsstring></argsstring>
        <name>sim_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="62" column="1" bodyfile="necsim/Tree.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a5ee1fa5adf72bb599badc041fbee7d09" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t Tree::out_finish</definition>
        <argsstring></argsstring>
        <name>out_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="62" column="1" bodyfile="necsim/Tree.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1abd18bb487c0192588b6bed6f00bcfd07" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t Tree::time_taken</definition>
        <argsstring></argsstring>
        <name>time_taken</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="63" column="1" bodyfile="necsim/Tree.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a047b331de4979aa4713c69f09237ac35" prot="protected" static="no" mutable="no">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; <ref refid="class_data_point" kindref="compound">DataPoint</ref> &gt;</type>
        <definition>Row&lt;DataPoint&gt; Tree::active</definition>
        <argsstring></argsstring>
        <name>active</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="65" column="1" bodyfile="necsim/Tree.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1ab478831f09c135bc9a4bc991c9fd5076" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Tree::endactive</definition>
        <argsstring></argsstring>
        <name>endactive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="67" column="1" bodyfile="necsim/Tree.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a3f1a90ab7ef917a996790e5ddfcebf85" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Tree::startendactive</definition>
        <argsstring></argsstring>
        <name>startendactive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="69" column="1" bodyfile="necsim/Tree.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a0244ee15452c38393246147d93836b4d" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Tree::maxsimsize</definition>
        <argsstring></argsstring>
        <name>maxsimsize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="71" column="1" bodyfile="necsim/Tree.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1adbb8b625d03dbcdca00f3d8d4b4a50df" prot="protected" static="no" mutable="no">
        <type><ref refid="class_community" kindref="compound">Community</ref></type>
        <definition>Community Tree::community</definition>
        <argsstring></argsstring>
        <name>community</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="73" column="1" bodyfile="necsim/Tree.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1ae7d33b8c16eeb8cb0c7f96dbfbc61b4e" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Tree::steps</definition>
        <argsstring></argsstring>
        <name>steps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="76" column="1" bodyfile="necsim/Tree.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a1868cf626a0b12f21a038989d4eca210" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Tree::maxtime</definition>
        <argsstring></argsstring>
        <name>maxtime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="78" column="1" bodyfile="necsim/Tree.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a84cc46d51045ff3b161ee8788950e0c2" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Tree::generation</definition>
        <argsstring></argsstring>
        <name>generation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="80" column="1" bodyfile="necsim/Tree.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a9fe104115b4593c772c03b57b82ff0de" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Tree::deme</definition>
        <argsstring></argsstring>
        <name>deme</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="82" column="1" bodyfile="necsim/Tree.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1ac7a1d0583d3dcb55c50fec0e1fd57985" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Tree::deme_sample</definition>
        <argsstring></argsstring>
        <name>deme_sample</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="84" column="1" bodyfile="necsim/Tree.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a586678f7084086add3a4136476abd375" prot="protected" static="no" mutable="no">
        <type>long double</type>
        <definition>long double Tree::spec</definition>
        <argsstring></argsstring>
        <name>spec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="86" column="1" bodyfile="necsim/Tree.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a85615771af7b568adca1b801995cfdc7" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Tree::out_directory</definition>
        <argsstring></argsstring>
        <name>out_directory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="88" column="1" bodyfile="necsim/Tree.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1aae24ce11e30fbd74fe078b23b46c14cd" prot="protected" static="no" mutable="no">
        <type>sqlite3 *</type>
        <definition>sqlite3* Tree::database</definition>
        <argsstring></argsstring>
        <name>database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="90" column="1" bodyfile="necsim/Tree.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a07f9982fd6f6243c78ef42371603bbe4" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Tree::sim_complete</definition>
        <argsstring></argsstring>
        <name>sim_complete</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="92" column="1" bodyfile="necsim/Tree.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a97bde28466a098bb9e58c1bd5610fd68" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Tree::has_imported_vars</definition>
        <argsstring></argsstring>
        <name>has_imported_vars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="94" column="1" bodyfile="necsim/Tree.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1af7de4d4f04360edcbe2a20db882b1f87" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_step" kindref="compound">Step</ref></type>
        <definition>Step Tree::this_step</definition>
        <argsstring></argsstring>
        <name>this_step</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="101" column="1" bodyfile="necsim/Tree.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a80d3e92108eb472df49640a661ef4f7d" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Tree::sql_output_database</definition>
        <argsstring></argsstring>
        <name>sql_output_database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="102" column="1" bodyfile="necsim/Tree.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a7a32ee0d04641ae745c08f7278c36c13" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Tree::bFullMode</definition>
        <argsstring></argsstring>
        <name>bFullMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="104" column="1" bodyfile="necsim/Tree.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1ac9cbd7d17fb511c1fcc70c765f6440b0" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Tree::bResume</definition>
        <argsstring></argsstring>
        <name>bResume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="106" column="1" bodyfile="necsim/Tree.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a6c8c76aec6a9faef9c38f4f275b0793d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Tree::bConfig</definition>
        <argsstring></argsstring>
        <name>bConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="108" column="1" bodyfile="necsim/Tree.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1aaa64e29ab7bc3c6f48d454063f0c39e1" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Tree::has_paused</definition>
        <argsstring></argsstring>
        <name>has_paused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="110" column="1" bodyfile="necsim/Tree.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1ad8d1d7e4fa673b28542ba31c5b637856" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Tree::has_imported_pause</definition>
        <argsstring></argsstring>
        <name>has_imported_pause</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="110" column="1" bodyfile="necsim/Tree.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a1f7515f16d99a9748ab2c4c667f1ffc4" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Tree::bIsProtracted</definition>
        <argsstring></argsstring>
        <name>bIsProtracted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="112" column="1" bodyfile="necsim/Tree.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tree_1a504a4d7ae23146fd6236baa59da51a6e" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Tree::pause_sim_directory</definition>
        <argsstring></argsstring>
        <name>pause_sim_directory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="114" column="1" bodyfile="necsim/Tree.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_spatial_tree_1a060fb8be17d702ed5eb0c142a89d9773" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::runFileChecks</definition>
        <argsstring>() override</argsstring>
        <name>runFileChecks</name>
        <reimplements refid="class_tree_1a0aefbe2466aefd46dec8c4aea4c85c5e">runFileChecks</reimplements>
        <briefdescription>
<para>Runs the basic file existence checks. Checks for paused simulations and file existence. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="133" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="24" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1ad6a5412bccbccc92a302b2fb05bbced2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::parseArgs</definition>
        <argsstring>(vector&lt; string &gt; &amp;comargs)</argsstring>
        <name>parseArgs</name>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>comargs</declname>
        </param>
        <briefdescription>
<para>Parses the command line arguments and saves the flags in <ref refid="class_tree" kindref="compound">Tree</ref> for fullmode, resuming and other important variables. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>command line arguments are no longer supported. Function will be removed at next major update. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comargs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="141" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="32" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1aef0097abc7c616ed656e26b4055834c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::checkFolders</definition>
        <argsstring>()</argsstring>
        <name>checkFolders</name>
        <briefdescription>
<para>Checks that the folders exist and the files required for the simulation also exist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="146" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="216" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a0c83bcd9a84f4fa98c78b75a78a9a012" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::setParameters</definition>
        <argsstring>() override</argsstring>
        <name>setParameters</name>
        <reimplements refid="class_tree_1ac374d237b7e2e7e11f6a0ff395003635">setParameters</reimplements>
        <briefdescription>
<para>Sets the map object with the correct variables, taking the <ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref> structure defined elsewhere for the parameters. </para>        </briefdescription>
        <detaileddescription>
<para>Requires that parameters have already been imported into the <ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref></para><para>This function can only be run once, otherwise a Main_Exception will be thrown </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="156" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="281" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1ab9603c25cd1c8466d1e4bfa3f73f191f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::importMaps</definition>
        <argsstring>()</argsstring>
        <name>importMaps</name>
        <briefdescription>
<para>Imports the maps into the forestmap object. </para>        </briefdescription>
        <detaileddescription>
<para>The simulation variables should have already been imported by <ref refid="class_spatial_tree_1a0c83bcd9a84f4fa98c78b75a78a9a012" kindref="member">setParameters()</ref>, otherwise a Fatal_Exception will be thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="167" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="308" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a8ba526e7129f70b4ccff289c1a21d2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::importActivityMaps</definition>
        <argsstring>()</argsstring>
        <name>importActivityMaps</name>
        <briefdescription>
<para>Imports the activity maps from the relevant files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="172" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="346" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a05ac9205ab49dbe6056522722372063b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long SpatialTree::getInitialCount</definition>
        <argsstring>() override</argsstring>
        <name>getInitialCount</name>
        <reimplements refid="class_tree_1a1e0685310a5a9bca4d6069e8d4ce1f1b">getInitialCount</reimplements>
        <briefdescription>
<para>Counts the number of individuals that exist on the spatial grid. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of individuals that will be initially simulated </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="178" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="368" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a3ce93c4d62367f17dd523cab4cc35ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::setupDispersalCoordinator</definition>
        <argsstring>()</argsstring>
        <name>setupDispersalCoordinator</name>
        <briefdescription>
<para>Sets up the dispersal coordinator by linking to the correct functions and choosing the appropriate dispersal method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="184" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="427" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1ae97336318c81e182e9f445f7efdbff8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::setup</definition>
        <argsstring>() override</argsstring>
        <name>setup</name>
        <reimplements refid="class_tree_1aec10ea2b720edc13a38310afdfe2b6e4">setup</reimplements>
        <briefdescription>
<para>Contains the setup routines for a spatial landscape. It also checks for paused simulations and imports data if necessary from paused files. <ref refid="class_spatial_tree_1ab9603c25cd1c8466d1e4bfa3f73f191f" kindref="member">importMaps()</ref> is called for importing the map files. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="bug_1_bug000003"><xreftitle>Bug</xreftitle><xrefdescription><para>For values of dispersal, forest transform rate and time since historical (and any other double values), they will not be correctly outputted to the SIMULATION_PARAMETERS table if the value is smaller than 10e-6. The solution is to implement string output mechanisms using boost::lexical_cast(), but this has so far only been deemed necessary for the speciation rate (which is intrinsically very small).</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="197" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="438" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a030ece1d0756057e56f4272510d3e567" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long SpatialTree::fillObjects</definition>
        <argsstring>(const unsigned long &amp;initial_count) override</argsstring>
        <name>fillObjects</name>
        <reimplements refid="class_tree_1a4af845777294c9116c60115e651620b4">fillObjects</reimplements>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>initial_count</declname>
        </param>
        <briefdescription>
<para>Fill the active, data and grid objects with the starting lineages. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initial_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of individuals expected to exist </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of lineages added (for validation purposes) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="204" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="464" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a46d31dc58b01f2666e90078e95b2a25d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long SpatialTree::getIndividualsSampled</definition>
        <argsstring>(const long &amp;x, const long &amp;y, const long &amp;x_wrap, const long &amp;y_wrap, const double &amp;current_gen)</argsstring>
        <name>getIndividualsSampled</name>
        <param>
          <type>const long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>x_wrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>y_wrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_gen</declname>
        </param>
        <briefdescription>
<para>Gets the number of individuals to be sampled at the particular point and time. Round the number down to the nearest whole number for numbers of individuals. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x location for individuals to be sampled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y location for individuals to be sampled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of x wraps for the cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of y wraps for the cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_gen</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation timer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of individuals to sample at this location. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="216" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="610" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1ae694bde4ab31b51c13c4a96f9a86a8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::removeOldPosition</definition>
        <argsstring>(const unsigned long &amp;chosen) override</argsstring>
        <name>removeOldPosition</name>
        <reimplements refid="class_tree_1ad74c05729c9e5235ab0fa6e34260093a">removeOldPosition</reimplements>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>chosen</declname>
        </param>
        <briefdescription>
<para>Removes the old position within active by checking any wrapping and removing connections. </para>        </briefdescription>
        <detaileddescription>
<para>The function also corrects the linked list to identify the correct nwrap for every wrapped lineage in that space.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chosen</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired active reference to remove from the grid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="226" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="624" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1ac7202eff84dfe8931374cc236efb9133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::calcMove</definition>
        <argsstring>()</argsstring>
        <name>calcMove</name>
        <briefdescription>
<para>Calculate the move, given a start x,y coordinates and wrapping. </para>        </briefdescription>
        <detaileddescription>
<para>The provided parameters will be altered to contain the new values so no record of the old variables remains after function running. Current dispersal methods use a fattailed dispersal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="235" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="752" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1ae6b453b80ea8ffedbbba799ac6142352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double SpatialTree::calcMinMax</definition>
        <argsstring>(const unsigned long &amp;current)</argsstring>
        <name>calcMinMax</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>current</declname>
        </param>
        <briefdescription>
<para>Calculates the minmax for a given branch. </para>        </briefdescription>
        <detaileddescription>
<para>Calculates the speciation rate required for speciation to have occured on this branch.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>the current active reference to perform calculations over. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="244" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="757" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1ac2b2ab269b36896cb41c47f750b8c032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::calcNewPos</definition>
        <argsstring>(bool &amp;coal, const unsigned long &amp;chosen, unsigned long &amp;coalchosen, const long &amp;oldx, const long &amp;oldy, const long &amp;oldxwrap, const long &amp;oldywrap)</argsstring>
        <name>calcNewPos</name>
        <param>
          <type>bool &amp;</type>
          <declname>coal</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>chosen</declname>
        </param>
        <param>
          <type>unsigned long &amp;</type>
          <declname>coalchosen</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>oldx</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>oldy</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>oldxwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>oldywrap</declname>
        </param>
        <briefdescription>
<para>Calculates the new position, checking whether coalescence has occured and with which lineage. </para>        </briefdescription>
        <detaileddescription>
<para>This involves correct handling of checking wrapped lineages (outside the original grid). The probability of coalescence is also calculated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coal</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean for whether coalescence occured or not </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chosen</parametername>
</parameternamelist>
<parameterdescription>
<para>the chosen lineage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coalchosen</parametername>
</parameternamelist>
<parameterdescription>
<para>the lineaged that is coalescing (if required) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldx</parametername>
</parameternamelist>
<parameterdescription>
<para>the old x position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldy</parametername>
</parameternamelist>
<parameterdescription>
<para>the old y position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldxwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the old x wrapping </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the old y wrapping </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="261" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="778" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a71c99204503ec59815a5338ab934331d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::switchPositions</definition>
        <argsstring>(const unsigned long &amp;chosen) override</argsstring>
        <name>switchPositions</name>
        <reimplements refid="class_tree_1ab1be13d2e99a4445a7cc84f907e0c90e">switchPositions</reimplements>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>chosen</declname>
        </param>
        <briefdescription>
<para>Switches the chosen position with the endactive position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chosen</parametername>
</parameternamelist>
<parameterdescription>
<para>the chosen lineage to switch with endactive. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="273" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1004" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a577196761885888dcb9366ab377f98cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::calcNextStep</definition>
        <argsstring>() override</argsstring>
        <name>calcNextStep</name>
        <reimplements refid="class_tree_1a0dc015aa5a45d2a75d80456d680172ac">calcNextStep</reimplements>
        <briefdescription>
<para>Calculates the next step for the simulation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="278" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1125" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a96919ff86b2a4d1de5ba14c2598a9346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long SpatialTree::estSpecnum</definition>
        <argsstring>()</argsstring>
        <name>estSpecnum</name>
        <briefdescription>
<para>Estimates the species number from the second largest minimum speciation rate remaining in active. </para>        </briefdescription>
        <detaileddescription>
<para>This allows for halting of the simulation once this threshold has been reached. However, the function is not currently in use as calculating the coalescence tree is very computionally intensive. <xrefsect id="deprecated_1_deprecated000008"><xreftitle>Deprecated</xreftitle><xrefdescription><para>this function is currently obselete and not implemented, but was still functional as of version 3.2</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="289" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1137" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1aa5db72e986bed4b0aa81217f5be30cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::incrementGeneration</definition>
        <argsstring>() override</argsstring>
        <name>incrementGeneration</name>
        <reimplements refid="class_tree_1a3f0c8928b4b72fb6f03cabd4d0e04457">incrementGeneration</reimplements>
        <briefdescription>
<para>Increments the generation counter and step references, then updates the map for any changes to habitat cover. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="302" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1240" bodyend="1252"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1ad14491fc87b0a9b28f5b8b316ee8a89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::updateStepCoalescenceVariables</definition>
        <argsstring>() override</argsstring>
        <name>updateStepCoalescenceVariables</name>
        <reimplements refid="class_tree_1ad65e94936001675b8bc908cf77e0cb53">updateStepCoalescenceVariables</reimplements>
        <briefdescription>
<para>Updates the coalescence variables in the step object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="307" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1270" bodyend="1286"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a6e802a5034648cc26b24923f27f85727" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::addLineages</definition>
        <argsstring>(double generation_in) override</argsstring>
        <name>addLineages</name>
        <reimplements refid="class_tree_1a8bfa9a86f122b21900ec33ab4b1e323f">addLineages</reimplements>
        <param>
          <type>double</type>
          <declname>generation_in</declname>
        </param>
        <briefdescription>
<para>Expands the map, generating the new lineages where necessary. </para>        </briefdescription>
        <detaileddescription>
<para>The samplemask provided is used for expansion. Any empty spaces are filled with a new lineage. Lineages which have not moved are changed to tips, with a new data entry so that original and new generations are recorded.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>generation_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the generation that the expansion is occuring at. This is used in recording the new tips </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="318" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1288" bodyend="1347"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1acc54786661c182b6df23e57a61716e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>string</type>
        <definition>string SpatialTree::simulationParametersSqlInsertion</definition>
        <argsstring>() override</argsstring>
        <name>simulationParametersSqlInsertion</name>
        <reimplements refid="class_tree_1aed6504b4f759fb31fdeb61cd03b2b3f9">simulationParametersSqlInsertion</reimplements>
        <briefdescription>
<para>Creates a string containing the SQL insertion statement for the simulation parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string containing the SQL insertion statement </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="324" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1349" bodyend="1389"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1af89289a1dc549102c0137763a7d26065" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::simPause</definition>
        <argsstring>() override</argsstring>
        <name>simPause</name>
        <reimplements refid="class_tree_1ae5308f74e982485ac444aa394b952152">simPause</reimplements>
        <briefdescription>
<para>Pause the simulation and dump data from memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="329" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1391" bodyend="1401"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1ab239652fcda3b0287e7c2ee29afde3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::dumpMap</definition>
        <argsstring>(ofstream &amp;out)</argsstring>
        <name>dumpMap</name>
        <param>
          <type>ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Saves the map object to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output file stream to save the object to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="335" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1403" bodyend="1416"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1aad249642767366c7df4cc2bae3c65987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::dumpGrid</definition>
        <argsstring>(ofstream &amp;out)</argsstring>
        <name>dumpGrid</name>
        <param>
          <type>ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Saves the grid object to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output file stream to save the object to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="341" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1418" bodyend="1431"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1ad578ceeaf0ab3f4a2e39eb907881c11f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpatialTree::simResume</definition>
        <argsstring>() override</argsstring>
        <name>simResume</name>
        <reimplements refid="class_tree_1a3d614f3848dc7acab168642efe345569">simResume</reimplements>
        <briefdescription>
<para>Resumes the simulation from a previous state. </para>        </briefdescription>
        <detaileddescription>
<para>Reads in the parameters and objects from file and re-starts the simulation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="348" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1433" bodyend="1447"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a2ab187d381811c7c7640a7cc4607c437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::loadGridSave</definition>
        <argsstring>(ifstream &amp;in1)</argsstring>
        <name>loadGridSave</name>
        <param>
          <type>ifstream &amp;</type>
          <declname>in1</declname>
        </param>
        <briefdescription>
<para>Loads the grid from the save file into memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Requires that both the simulation parameters and the maps have already been loaded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="355" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1449" bodyend="1495"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a85304af0df40187aedc4c81a53ffde8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::loadMapSave</definition>
        <argsstring>(ifstream &amp;in1)</argsstring>
        <name>loadMapSave</name>
        <param>
          <type>ifstream &amp;</type>
          <declname>in1</declname>
        </param>
        <briefdescription>
<para>Loads the map from the save file into memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Requires that the simulation parameters have already been loaded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="362" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1497" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1af2fe54f787584c4fde048ebc96556a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::verifyActivityMaps</definition>
        <argsstring>()</argsstring>
        <name>verifyActivityMaps</name>
        <briefdescription>
<para>Checks that the reproduction map makes sense with the fine density map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="367" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1518" bodyend="1606"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a5b26973b7f2dd3ca842a2eb8d2957896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::addWrappedLineage</definition>
        <argsstring>(unsigned long numstart, long x, long y)</argsstring>
        <name>addWrappedLineage</name>
        <param>
          <type>unsigned long</type>
          <declname>numstart</declname>
        </param>
        <param>
          <type>long</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Adds the lineage to the correct point in the linked list of active lineages. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numstart</parametername>
</parameternamelist>
<parameterdescription>
<para>the active position to add </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position of the lineage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position of the lineage </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="375" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1608" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a3e5e285241dbf1382e989624b1c77fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long SpatialTree::countCellExpansion</definition>
        <argsstring>(const long &amp;x, const long &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;generationin, vector&lt; TreeNode &gt; &amp;data_added)</argsstring>
        <name>countCellExpansion</name>
        <param>
          <type>const long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>generationin</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="class_tree_node" kindref="compound">TreeNode</ref> &gt; &amp;</type>
          <declname>data_added</declname>
        </param>
        <briefdescription>
<para>Counts the number of lineages at a particular location that need to be added, after making the correct proportion of those that already exist into tips. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the location of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the location of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the x wrapping of the location </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the y wrapping of the location </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generationin</parametername>
</parameternamelist>
<parameterdescription>
<para>the generation to assign to new tips </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_added</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing <ref refid="class_tree_node" kindref="compound">TreeNode</ref> objects to add to data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of lineages still to add </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="389" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1636" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="class_spatial_tree_1a5a6cf10d4f6d84d06091b07399a7abc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialTree::expandCell</definition>
        <argsstring>(long x, long y, long x_wrap, long y_wrap, double generation_in, unsigned long add, vector&lt; TreeNode &gt; &amp;data_added, vector&lt; DataPoint &gt; &amp;active_added)</argsstring>
        <name>expandCell</name>
        <param>
          <type>long</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long</type>
          <declname>y</declname>
        </param>
        <param>
          <type>long</type>
          <declname>x_wrap</declname>
        </param>
        <param>
          <type>long</type>
          <declname>y_wrap</declname>
        </param>
        <param>
          <type>double</type>
          <declname>generation_in</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>add</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="class_tree_node" kindref="compound">TreeNode</ref> &gt; &amp;</type>
          <declname>data_added</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="class_data_point" kindref="compound">DataPoint</ref> &gt; &amp;</type>
          <declname>active_added</declname>
        </param>
        <briefdescription>
<para>Expands the cell at the desired location by adding the supplied number of lineages. </para>        </briefdescription>
        <detaileddescription>
<para>This takes into account wrapping to correctly add the right number</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate to add at </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate to add at </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the x wrapping to add at </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the y wrapping to add at </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the generation to set the new lineages to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>the total number of lineages to add at this location </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SpatialTree.h" line="404" column="1" bodyfile="necsim/SpatialTree.cpp" bodystart="1695" bodyend="1731"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a455d87022772b309a5974ea5f0295139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::importSimulationVariables</definition>
        <argsstring>(const string &amp;configfile)</argsstring>
        <name>importSimulationVariables</name>
        <param>
          <type>const string &amp;</type>
          <declname>configfile</declname>
        </param>
        <briefdescription>
<para>Import the simulation variables from the command line structure. </para>        </briefdescription>
        <detaileddescription>
<para>This function parses the simulation variables, imports them from the config file, checks that the input files exist and checks for any paused simulations. The flags are then set correctly, meaning that <ref refid="class_tree_1aec10ea2b720edc13a38310afdfe2b6e4" kindref="member">setup()</ref> and <ref refid="class_tree_1afe75245862a1c40030c1c8607518cf8d" kindref="member">runSimulation()</ref> can be run immediately afterwards.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the config file containing parameters to parse. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="149" column="1" bodyfile="necsim/Tree.cpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a029af5f2dc1e33b4eead8110090ac778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::importSimulationVariables</definition>
        <argsstring>(ConfigOption config)</argsstring>
        <name>importSimulationVariables</name>
        <param>
          <type><ref refid="class_config_option" kindref="compound">ConfigOption</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Import the simulation variables from a <ref refid="class_config_option" kindref="compound">ConfigOption</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This function parses the simulation variables, imports them (from either the command line or a config file), checks that the input files exist and checks for any paused simulations. The flags are then set correctly, meaning that <ref refid="class_tree_1aec10ea2b720edc13a38310afdfe2b6e4" kindref="member">setup()</ref> and runSim() can be run immediately afterwards.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of config parameters to import </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="160" column="1" bodyfile="necsim/Tree.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1aa31508ea6d5801c6dee17c035f393b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::wipeSimulationVariables</definition>
        <argsstring>()</argsstring>
        <name>wipeSimulationVariables</name>
        <briefdescription>
<para>Resets all the simulation variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="170" column="1" bodyfile="necsim/Tree.cpp" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a62db83e47e5850c6a83793829b22b68b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::internalSetup</definition>
        <argsstring>(const SimParameters &amp;sim_parameters_in)</argsstring>
        <name>internalSetup</name>
        <param>
          <type>const <ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref> &amp;</type>
          <declname>sim_parameters_in</declname>
        </param>
        <briefdescription>
<para>Sets up the simulation parameters from the one provided. </para>        </briefdescription>
        <detaileddescription>
<para>Intended for usage with metacommunity application. No output directory is expected. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sim_parameters_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the simulation parameters to set up the simulation with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="177" column="1" bodyfile="necsim/Tree.cpp" bodystart="49" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a5c6065ede9862e9fb6561eb8beaf5d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tree::checkOutputDirectory</definition>
        <argsstring>()</argsstring>
        <name>checkOutputDirectory</name>
        <briefdescription>
<para>Asserts that the output directory is not null and exists. If it doesn&apos;t exist, it attempts to create it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Fatal_Exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if the output directory creation fails </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if output creates successfully </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="184" column="1" bodyfile="necsim/Tree.cpp" bodystart="55" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ad0bcc474a9ab1d4e3e2458c4de7304ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::checkSims</definition>
        <argsstring>()</argsstring>
        <name>checkSims</name>
        <briefdescription>
<para>Checks for existing paused simulations to resume from Sets bPaused if there are. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses the default values read from the config file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="193" column="1" bodyfile="necsim/Tree.cpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1aafaede1da6c79583bf2e28b7a1881a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::checkSims</definition>
        <argsstring>(string output_dir, long seed, long task)</argsstring>
        <name>checkSims</name>
        <param>
          <type>string</type>
          <declname>output_dir</declname>
        </param>
        <param>
          <type>long</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>long</type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Checks for existing paused simulations to resume from. </para>        </briefdescription>
        <detaileddescription>
<para>Sets bPaused if there are.</para><para>This version uses the values supplied to the function directly</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the output directory to check for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>the seed for paused sims </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>the task for paused sims </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="206" column="1" bodyfile="necsim/Tree.cpp" bodystart="89" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a891764ffc1e29d3edbe0fd08e67a184b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Tree::setProtractedVariables</definition>
        <argsstring>(double speciation_gen_min, double speciation_gen_max)</argsstring>
        <name>setProtractedVariables</name>
        <reimplementedby refid="class_protracted_tree_1a6e04aa92dd30e889a468d9b9fc6fd58d">setProtractedVariables</reimplementedby>
        <param>
          <type>double</type>
          <declname>speciation_gen_min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>speciation_gen_max</declname>
        </param>
        <briefdescription>
<para>Sets the protracted variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_gen_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum number of generations to have passed before speciation is allowed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_gen_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of generations a lineage can exist for before it is speciated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="218" column="1" bodyfile="necsim/Tree.cpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ae07761c0a91a44ebe459904b1b8ffb43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tree::hasPaused</definition>
        <argsstring>()</argsstring>
        <name>hasPaused</name>
        <briefdescription>
<para>Gets the has_paused variable for resuming sims. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if the simulation has paused </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="224" column="1" bodyfile="necsim/Tree.cpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ac03c034a5730ee4f4d8727aace776412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt; double &gt; Tree::getTemporalSampling</definition>
        <argsstring>()</argsstring>
        <name>getTemporalSampling</name>
        <briefdescription>
<para>Gets the map autocorrel times. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="229" column="1" bodyfile="necsim/Tree.cpp" bodystart="153" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a857521315ca6bd9b3300d099488d74f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long Tree::getSeed</definition>
        <argsstring>()</argsstring>
        <name>getSeed</name>
        <briefdescription>
<para>Getter for the simulation seed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns the seeds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="235" column="1" bodyfile="necsim/Tree.cpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ab240ab1988cbde281a6811b3fdc1dd5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::setSeed</definition>
        <argsstring>(long long seed_in)</argsstring>
        <name>setSeed</name>
        <param>
          <type>long long</type>
          <declname>seed_in</declname>
        </param>
        <briefdescription>
<para>Sets the simulation seed for the random number generator. </para>        </briefdescription>
        <detaileddescription>
<para>This function should only be called once.</para><para>The seed is set within the NR object. This will be fixed for the simulation and is only performed once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired seed to set for the simulation </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="246" column="1" bodyfile="necsim/Tree.cpp" bodystart="172" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a869ab0aba75336f737cbb137c74b8abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Tree::setObjectSizes</definition>
        <argsstring>()</argsstring>
        <name>setObjectSizes</name>
        <briefdescription>
<para>Sets the sizes of grid, active and data, based on the number of individuals counted from the samplemask. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a count of the number of individuals that exist in the simulation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="258" column="1" bodyfile="necsim/Tree.cpp" bodystart="187" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1aec2640897132a1b667e852bbafc14c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::setInitialValues</definition>
        <argsstring>()</argsstring>
        <name>setInitialValues</name>
        <briefdescription>
<para>Sets the starting values for required parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="271" column="1" bodyfile="necsim/Tree.cpp" bodystart="213" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a1ba0f5d27c6ef6e9e17f988aff2dfe65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::setSimStartVariables</definition>
        <argsstring>()</argsstring>
        <name>setSimStartVariables</name>
        <briefdescription>
<para>Sets the variables at the start of a simulation for temporary data. </para>        </briefdescription>
        <detaileddescription>
<para>This is not the main set-up routine, which creates the permanent data structures including maps, the coalescence tree and active lineage listings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="279" column="1" bodyfile="necsim/Tree.cpp" bodystart="226" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ab71da7797a6586ddd948661c34ce4788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::printSetup</definition>
        <argsstring>()</argsstring>
        <name>printSetup</name>
        <briefdescription>
<para>Prints the statement for the setup initiation. </para>        </briefdescription>
        <detaileddescription>
<para>This is stored in a separate function so that it can be called in isolation by child classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="286" column="1" bodyfile="necsim/Tree.cpp" bodystart="243" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ae3fb33c46cf7e3af44604a9875b375a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::setTimes</definition>
        <argsstring>()</argsstring>
        <name>setTimes</name>
        <briefdescription>
<para>Sets the temporal sampling points from the time config file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="291" column="1" bodyfile="necsim/Tree.cpp" bodystart="253" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a25f082da13789dfa3fefcbcfd08b4dfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::determineSpeciationRates</definition>
        <argsstring>()</argsstring>
        <name>determineSpeciationRates</name>
        <briefdescription>
<para>Determines the speciation rates to apply and then applies them to the coalescence tree post-simulation. </para>        </briefdescription>
        <detaileddescription>
<para>Detects speciation rates from the config files supplied. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="298" column="1" bodyfile="necsim/Tree.cpp" bodystart="274" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a38488499b196d3f5ee40b2a68fe3279e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::addSpeciationRates</definition>
        <argsstring>(vector&lt; long double &gt; spec_rates_in)</argsstring>
        <name>addSpeciationRates</name>
        <param>
          <type>vector&lt; long double &gt;</type>
          <declname>spec_rates_in</declname>
        </param>
        <briefdescription>
<para>Adds the speciation rates to those to be applied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="303" column="1" bodyfile="necsim/Tree.cpp" bodystart="294" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a50b3d13d4032e0d7a69890b9bd7f84fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::generateObjects</definition>
        <argsstring>()</argsstring>
        <name>generateObjects</name>
        <briefdescription>
<para>Assigns the objects sizes in memory and fills with the starting lineages. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="307" column="1" bodyfile="necsim/Tree.cpp" bodystart="323" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1afe75245862a1c40030c1c8607518cf8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Tree::runSimulation</definition>
        <argsstring>()</argsstring>
        <name>runSimulation</name>
        <briefdescription>
<para>Run the entire simulation given the start conditions already defined by <ref refid="class_tree_1aec10ea2b720edc13a38310afdfe2b6e4" kindref="member">setup()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Setup is assumed to have been run already. This function is the main function containing the main loop of the simulation. At the end of the simulation, returns true if the simulation is complete, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="322" column="1" bodyfile="necsim/Tree.cpp" bodystart="396" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a95360a2f62ef0eb436d586552b299e1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::writeSimStartToConsole</definition>
        <argsstring>()</argsstring>
        <name>writeSimStartToConsole</name>
        <briefdescription>
<para>Writes to the console that the simulation is beginning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="327" column="1" bodyfile="necsim/Tree.cpp" bodystart="508" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a37de93174eece50a2fc082b683d97047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::writeStepToConsole</definition>
        <argsstring>()</argsstring>
        <name>writeStepToConsole</name>
        <briefdescription>
<para>Write the step counter to console. This function should only be called in debugging mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="332" column="1" bodyfile="necsim/Tree.cpp" bodystart="524" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a23803bddf46ad28a1bdd46bf05693b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::chooseRandomLineage</definition>
        <argsstring>()</argsstring>
        <name>chooseRandomLineage</name>
        <briefdescription>
<para>Chooses a random lineage from active. </para>        </briefdescription>
        <detaileddescription>
<para>The index of the random lineage is stored in this_step, as chosen. Also records the required variables for the step process, like x, y position. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="345" column="1" bodyfile="necsim/Tree.cpp" bodystart="560" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a05c9e44f1a4d7af83e65b6c4565b1b28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::speciation</definition>
        <argsstring>(const unsigned long &amp;chosen)</argsstring>
        <name>speciation</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>chosen</declname>
        </param>
        <briefdescription>
<para>Speciation to supplied lineage. </para>        </briefdescription>
        <detaileddescription>
<para>Also calls the removeOldPos() and <ref refid="class_tree_1ab1be13d2e99a4445a7cc84f907e0c90e" kindref="member">switchPositions()</ref> functions for removing the lineage out of active reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chosen</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="358" column="1" bodyfile="necsim/Tree.cpp" bodystart="575" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a32e12cc62ce2d9ae893214b1f4cfad1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Tree::speciateLineage</definition>
        <argsstring>(const unsigned long &amp;data_position)</argsstring>
        <name>speciateLineage</name>
        <reimplementedby refid="class_protracted_tree_1aaa2f1db86b0fd49a69d0809bd1c1fb81">speciateLineage</reimplementedby>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>data_position</declname>
        </param>
        <briefdescription>
<para>Performs the actual speciation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_position</parametername>
</parameternamelist>
<parameterdescription>
<para>the position in the array of TreeNodes for this lineage </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="364" column="1" bodyfile="necsim/Tree.cpp" bodystart="600" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1abc9389511e1aecf5e573315fc8f4d77c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Tree::calcSpeciation</definition>
        <argsstring>(const long double &amp;random_number, const long double &amp;speciation_rate, const unsigned long &amp;no_generations)</argsstring>
        <name>calcSpeciation</name>
        <reimplementedby refid="class_protracted_tree_1af9690f122e77c0a60d363af3e818c9a2">calcSpeciation</reimplementedby>
        <param>
          <type>const long double &amp;</type>
          <declname>random_number</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>no_generations</declname>
        </param>
        <briefdescription>
<para>Calculates the speciation probability from the random number, speciation rate and number of generations a lineage has existed for. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>random_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the generated random number from 0-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to be applied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>no_generations</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of generations a lineage has existed for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if true, speciation has occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="390" column="1" bodyfile="necsim/Tree.cpp" bodystart="648" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a16eedb70009e7570d933f88e8ce44117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::coalescenceEvent</definition>
        <argsstring>(const unsigned long &amp;chosen, unsigned long &amp;coalchosen)</argsstring>
        <name>coalescenceEvent</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>chosen</declname>
        </param>
        <param>
          <type>unsigned long &amp;</type>
          <declname>coalchosen</declname>
        </param>
        <briefdescription>
<para>Perform the coalescence between lineages. Once coalesced, lineages are removed from the active scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chosen</parametername>
</parameternamelist>
<parameterdescription>
<para>the chosen lineage for coalescence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coalchosen</parametername>
</parameternamelist>
<parameterdescription>
<para>the target lineage for coalscence </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="399" column="1" bodyfile="necsim/Tree.cpp" bodystart="655" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1afcbe72c55b38c94ae17de9c2e1dd3a7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::checkTimeUpdate</definition>
        <argsstring>()</argsstring>
        <name>checkTimeUpdate</name>
        <briefdescription>
<para>Checks if the number of lineages should be expanded at another sample point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="404" column="1" bodyfile="necsim/Tree.cpp" bodystart="678" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1aa3eef7c7e66a975d1dfd1a0a0148e037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tree::checkProportionAdded</definition>
        <argsstring>(const double &amp;proportion_added)</argsstring>
        <name>checkProportionAdded</name>
        <param>
          <type>const double &amp;</type>
          <declname>proportion_added</declname>
        </param>
        <briefdescription>
<para>Randomly checks if a lineage should be added, based on the proportion added. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proportion_added</parametername>
</parameternamelist>
<parameterdescription>
<para>the proportion of lineages that should be added </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the lineage should be added, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="417" column="1" bodyfile="necsim/Tree.cpp" bodystart="729" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ab8a62d0ca2b1746676073e3f33e2a949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::checkSimSize</definition>
        <argsstring>(unsigned long req_data, unsigned long req_active)</argsstring>
        <name>checkSimSize</name>
        <param>
          <type>unsigned long</type>
          <declname>req_data</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>req_active</declname>
        </param>
        <briefdescription>
<para>Checks the size of the main active and data objects is large enough. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req_data</parametername>
</parameternamelist>
<parameterdescription>
<para>the required data object size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>req_active</parametername>
</parameternamelist>
<parameterdescription>
<para>the required active object size </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="424" column="1" bodyfile="necsim/Tree.cpp" bodystart="734" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a3fa6fbeeb00d1661958f8e358796251c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::makeTip</definition>
        <argsstring>(const unsigned long &amp;tmp_active, const double &amp;generation_in, vector&lt; TreeNode &gt; &amp;data_added)</argsstring>
        <name>makeTip</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>tmp_active</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>generation_in</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="class_tree_node" kindref="compound">TreeNode</ref> &gt; &amp;</type>
          <declname>data_added</declname>
        </param>
        <briefdescription>
<para>Sets the active reference to a tip, if it isn&apos;t one already. Otherwise, creates a new tip for the new generation time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmp_active</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference in active </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the generation to set for the new lineage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_added</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of lineages to add to data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="434" column="1" bodyfile="necsim/Tree.cpp" bodystart="753" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a370a23cfb08fd27ed1862bdfa605c5b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::convertTip</definition>
        <argsstring>(unsigned long i, double generationin, vector&lt; TreeNode &gt; &amp;data_added)</argsstring>
        <name>convertTip</name>
        <param>
          <type>unsigned long</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>generationin</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="class_tree_node" kindref="compound">TreeNode</ref> &gt; &amp;</type>
          <declname>data_added</declname>
        </param>
        <briefdescription>
<para>Creates a new reference in data containing the tip with a new generation counter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference in active of the lineage to make a tip </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generationin</parametername>
</parameternamelist>
<parameterdescription>
<para>the generation to make the lineage a tip at </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_added</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of lineages to add to the data object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="442" column="1" bodyfile="necsim/Tree.cpp" bodystart="767" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1afd6bd75c301d2f57c4997fcfc92f192e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tree::stopSimulation</definition>
        <argsstring>()</argsstring>
        <name>stopSimulation</name>
        <briefdescription>
<para>Finalises the simulation, and performs the correct tasks depending if the sim has been paused or finished. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="448" column="1" bodyfile="necsim/Tree.cpp" bodystart="469" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1aa6349a32b3fcfb82a5f8311b11db3982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::applySpecRate</definition>
        <argsstring>(long double sr, double t)</argsstring>
        <name>applySpecRate</name>
        <param>
          <type>long double</type>
          <declname>sr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Applies the given speciation rate to the tree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>the required speciation rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the required time of speciation </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="455" column="1" bodyfile="necsim/Tree.cpp" bodystart="782" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ab699328f13b22f48faa63a5638e907db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::applySpecRate</definition>
        <argsstring>(long double sr)</argsstring>
        <name>applySpecRate</name>
        <param>
          <type>long double</type>
          <declname>sr</declname>
        </param>
        <briefdescription>
<para>Overloaded version of applySpecRates for the default generation (0.0). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to apply to the tree </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="483" column="1" bodyfile="necsim/Tree.cpp" bodystart="820" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ac89abe0404d05d0363258b72cb80700b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::applySpecRateInternal</definition>
        <argsstring>(long double sr, double t)</argsstring>
        <name>applySpecRateInternal</name>
        <param>
          <type>long double</type>
          <declname>sr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Applies the given speciation rate to the tree, but does not output to a file. Instead returns a pointer to the nodes object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>the required speciation rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the required time of speciation </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="463" column="1" bodyfile="necsim/Tree.cpp" bodystart="791" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a49a94b2218f7ae127a53af4a58d02b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; unsigned long &gt; *</type>
        <definition>Row&lt; unsigned long &gt; * Tree::getCumulativeAbundances</definition>
        <argsstring>()</argsstring>
        <name>getCumulativeAbundances</name>
        <briefdescription>
<para>Gets the sorted cumulative species abundances from the contained TreeList. </para>        </briefdescription>
        <detaileddescription>
<para>For use with metacommunity applications <simplesect kind="return"><para>row of cumulative species abundances </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="471" column="1" bodyfile="necsim/Tree.cpp" bodystart="798" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a9997b98824a786d9843a3df40de1226a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::setupTreeGeneration</definition>
        <argsstring>(long double sr, double t)</argsstring>
        <name>setupTreeGeneration</name>
        <param>
          <type>long double</type>
          <declname>sr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Sets up the generation of the tree object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>the required speciation rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the required time of speciation </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="477" column="1" bodyfile="necsim/Tree.cpp" bodystart="803" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1acfc7efdec999f6dbf2ac089514d22091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::applyMultipleRates</definition>
        <argsstring>()</argsstring>
        <name>applyMultipleRates</name>
        <briefdescription>
<para>Applies multiple speciation rates to the coalescence tree, ignoring repeated speciation rates. </para>        </briefdescription>
        <detaileddescription>
<para>Speciation rates are read from the speciation_rates object, which should have already been calculated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="490" column="1" bodyfile="necsim/Tree.cpp" bodystart="825" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1aa23a57f7863d58384f61d464d998ab3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Tree::getProtracted</definition>
        <argsstring>()</argsstring>
        <name>getProtracted</name>
        <reimplementedby refid="class_protracted_tree_1ab0bb05fbdeb2aa75a3d3128ded3d655b">getProtracted</reimplementedby>
        <briefdescription>
<para>Gets the protractedness of the simulation. Overridden by protracted child classes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="497" column="1" bodyfile="necsim/Tree.cpp" bodystart="906" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a34c0808026bf00546c8f9786376be730" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>string</type>
        <definition>string Tree::getProtractedVariables</definition>
        <argsstring>()</argsstring>
        <name>getProtractedVariables</name>
        <reimplementedby refid="class_protracted_tree_1af0eca5eb2a790fcee9a0854e30088753">getProtractedVariables</reimplementedby>
        <briefdescription>
<para>Gets the protracted variables and returns them as a single, newline separated string. This method is intended to be overridden in derived classes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string containing the protracted variables, separated by newlines. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="504" column="1" bodyfile="necsim/Tree.cpp" bodystart="911" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a6ffc42e941f352cd74f01f6f7011f00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Tree::getProtractedGenerationMin</definition>
        <argsstring>()</argsstring>
        <name>getProtractedGenerationMin</name>
        <reimplementedby refid="class_protracted_tree_1a331561815abc7d595e88d98e9268e7a1">getProtractedGenerationMin</reimplementedby>
        <briefdescription>
<para>Gets the minimum number of generations a lineage must exist. </para>        </briefdescription>
        <detaileddescription>
<para>Without overriding this function, should always return 0.0. <simplesect kind="return"><para>double the number of generations a lineage must exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="512" column="1" bodyfile="necsim/Tree.cpp" bodystart="918" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a0c5e746982a87f24c083f4534bf92b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Tree::getProtractedGenerationMax</definition>
        <argsstring>()</argsstring>
        <name>getProtractedGenerationMax</name>
        <reimplementedby refid="class_protracted_tree_1a2093dd13cdbfc66e6c1de1406023bad6">getProtractedGenerationMax</reimplementedby>
        <briefdescription>
<para>Gets the maximum number of generations a lineage can exist. </para>        </briefdescription>
        <detaileddescription>
<para>Without overriding this function, should always return 0.0 (no maximum).</para><para><simplesect kind="return"><para>double the number of generations a lineage must exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="521" column="1" bodyfile="necsim/Tree.cpp" bodystart="923" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a8cd3db7add1884ea53b0d98002d39cd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::sqlOutput</definition>
        <argsstring>()</argsstring>
        <name>sqlOutput</name>
        <briefdescription>
<para>Copy the in-memory database to file. </para>        </briefdescription>
        <detaileddescription>
<para>This function should not be called if the database is already opened on disc, and won&apos;t do anything if it is. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="529" column="1" bodyfile="necsim/Tree.cpp" bodystart="928" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1afdf680e187c25ed39d1e66542ce44cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::outputData</definition>
        <argsstring>()</argsstring>
        <name>outputData</name>
        <briefdescription>
<para>Outputs important simulation data to a csv file. Overloaded version which automatically calls <ref refid="class_tree_1a2d2065bbebee8b55270d2691d40cd974" kindref="member">sortData()</ref> if no species richness is provided. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="535" column="1" bodyfile="necsim/Tree.cpp" bodystart="972" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a5acf7d0eea9ea2ef4928bb6691b87724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::outputData</definition>
        <argsstring>(unsigned long species_richness)</argsstring>
        <name>outputData</name>
        <param>
          <type>unsigned long</type>
          <declname>species_richness</declname>
        </param>
        <briefdescription>
<para>Outputs important simulation data to a csv file. This function will likely be remove in future versions as all simulation output is now contained in an SQLite database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>species_richness</parametername>
</parameternamelist>
<parameterdescription>
<para>the species richness of the tree with the minimum speciation rate. Outputted into the csv file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="544" column="1" bodyfile="necsim/Tree.cpp" bodystart="979" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a2d2065bbebee8b55270d2691d40cd974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Tree::sortData</definition>
        <argsstring>()</argsstring>
        <name>sortData</name>
        <briefdescription>
<para>Sort and process the species list so that the useful information can be extracted from it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="549" column="1" bodyfile="necsim/Tree.cpp" bodystart="991" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ab8785fc9e27868a56335048321c13290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::writeTimes</definition>
        <argsstring>()</argsstring>
        <name>writeTimes</name>
        <briefdescription>
<para>Writes the times to the terminal for simulation information. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="554" column="1" bodyfile="necsim/Tree.cpp" bodystart="1064" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a9e240bbfc3139b290a0dead741f560bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::openSQLDatabase</definition>
        <argsstring>()</argsstring>
        <name>openSQLDatabase</name>
        <briefdescription>
<para>Opens a connection to the in-memory database, or the on-disk database, depending on the compilation options. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="560" column="1" bodyfile="necsim/Tree.cpp" bodystart="1084" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ae784a6ed362f6c5263ee797759f715b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::sqlCreate</definition>
        <argsstring>()</argsstring>
        <name>sqlCreate</name>
        <briefdescription>
<para>Generates the SQL database file from the full simulation data. This allows for greater analysis of the data after completion of the simulation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="566" column="1" bodyfile="necsim/Tree.cpp" bodystart="1097" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a199f47b62b9b10917ff8b89d20c543a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::sqlCreateSimulationParameters</definition>
        <argsstring>()</argsstring>
        <name>sqlCreateSimulationParameters</name>
        <briefdescription>
<para>Creates the SIMULATION_PARAMETERS table in the SQL database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="571" column="1" bodyfile="necsim/Tree.cpp" bodystart="1238" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1aa8bb5d93c7992404ede0a49bb69ccd1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>string</type>
        <definition>string Tree::protractedVarsToString</definition>
        <argsstring>()</argsstring>
        <name>protractedVarsToString</name>
        <reimplementedby refid="class_protracted_tree_1a505a464578e6a7028e66f26b3e6b4a92">protractedVarsToString</reimplementedby>
        <briefdescription>
<para>Outputs the protracted variables to a string. </para>        </briefdescription>
        <detaileddescription>
<para>This function is intended to be overridden by derived classes. It is intended the output is used for writing to SQL databases.</para><para><simplesect kind="return"><para>string containing a list of the protracted speciation variables. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="587" column="1" bodyfile="necsim/Tree.cpp" bodystart="1302" bodyend="1306"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a768b9c46fbbc1e49257ab96a66491058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ofstream</type>
        <definition>ofstream Tree::initiatePause</definition>
        <argsstring>()</argsstring>
        <name>initiatePause</name>
        <briefdescription>
<para>Checks the output folder exists and initiates the pause. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the output file stream to save objects to </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="599" column="1" bodyfile="necsim/Tree.cpp" bodystart="1325" bodyend="1356"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a687613834d41ec340fc6f62708368f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::dumpMain</definition>
        <argsstring>(ofstream &amp;out)</argsstring>
        <name>dumpMain</name>
        <param>
          <type>ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Saves the main simulation variables to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output file stream to save the object to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="605" column="1" bodyfile="necsim/Tree.cpp" bodystart="1375" bodyend="1400"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a3cb2d92afc1943796ad6663cc97fc07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::dumpActive</definition>
        <argsstring>(ofstream &amp;out)</argsstring>
        <name>dumpActive</name>
        <param>
          <type>ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Saves the active object to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output file stream to save the object to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="611" column="1" bodyfile="necsim/Tree.cpp" bodystart="1402" bodyend="1415"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1af94976f439abe0a141a4ab56fac91627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::dumpData</definition>
        <argsstring>(ofstream &amp;out)</argsstring>
        <name>dumpData</name>
        <param>
          <type>ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Saves the data object to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output file stream to save the object to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="617" column="1" bodyfile="necsim/Tree.cpp" bodystart="1417" bodyend="1430"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a9339bf7bfb7ae81ab78d47a328bc5ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::completePause</definition>
        <argsstring>(ofstream &amp;out)</argsstring>
        <name>completePause</name>
        <param>
          <type>ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Completes the pause routine and outputs the sql dump. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream to close up </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="623" column="1" bodyfile="necsim/Tree.cpp" bodystart="1358" bodyend="1373"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ac545d844141db977920fc9fd76ce9dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::setResumeParameters</definition>
        <argsstring>(string pausedir, string outdir, unsigned long seed, unsigned long task, unsigned long new_max_time)</argsstring>
        <name>setResumeParameters</name>
        <param>
          <type>string</type>
          <declname>pausedir</declname>
        </param>
        <param>
          <type>string</type>
          <declname>outdir</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>task</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>new_max_time</declname>
        </param>
        <briefdescription>
<para>Sets the resume variables so that the simulation can be resumed. </para>        </briefdescription>
        <detaileddescription>
<para>The pause directory can be the same as the output directory if it is desirable to save to the same location.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pausedir</parametername>
</parameternamelist>
<parameterdescription>
<para>the directory containing the pause folder for resuming the simulation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outdir</parametername>
</parameternamelist>
<parameterdescription>
<para>the directory to write simulation output to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>the simulation seed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>the simulation task </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_max_time</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum simulation time to run for in seconds (0 keeps old simulation max time) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="636" column="1" bodyfile="necsim/Tree.cpp" bodystart="1456" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1aeade4bccb8394937a53bc4fbcf2b4300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::setResumeParameters</definition>
        <argsstring>()</argsstring>
        <name>setResumeParameters</name>
        <briefdescription>
<para>Sets the resume variables to the defaults. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="642" column="1" bodyfile="necsim/Tree.cpp" bodystart="1432" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ad0093ade6fd9c47c35b309010cfdf62f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ifstream</type>
        <definition>ifstream Tree::openSaveFile</definition>
        <argsstring>()</argsstring>
        <name>openSaveFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="644" column="1" bodyfile="necsim/Tree.cpp" bodystart="1441" bodyend="1454"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1adbebd341b5d4c2c7685c728a2cb46a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Tree::loadMainSave</definition>
        <argsstring>(ifstream &amp;in1)</argsstring>
        <name>loadMainSave</name>
        <param>
          <type>ifstream &amp;</type>
          <declname>in1</declname>
        </param>
        <briefdescription>
<para>Loads the main simulation parameters from the save file into memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="649" column="1" bodyfile="necsim/Tree.cpp" bodystart="1470" bodyend="1565"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1ac6483904c8b94797fdb4c51fed39a2ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::loadDataSave</definition>
        <argsstring>(ifstream &amp;in1)</argsstring>
        <name>loadDataSave</name>
        <param>
          <type>ifstream &amp;</type>
          <declname>in1</declname>
        </param>
        <briefdescription>
<para>Loads the data object from the save file into memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="654" column="1" bodyfile="necsim/Tree.cpp" bodystart="1567" bodyend="1582"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a2fa8cf49a891654ff9316460ba6d9991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::loadActiveSave</definition>
        <argsstring>(ifstream &amp;in1)</argsstring>
        <name>loadActiveSave</name>
        <param>
          <type>ifstream &amp;</type>
          <declname>in1</declname>
        </param>
        <briefdescription>
<para>Loads the active object from the save file into memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="659" column="1" bodyfile="necsim/Tree.cpp" bodystart="1584" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="class_tree_1a8cfe5d30d53d702f18cd67981e2c9acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tree::initiateResume</definition>
        <argsstring>()</argsstring>
        <name>initiateResume</name>
        <briefdescription>
<para>Checks for resuming and prints to the terminal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Tree.h" line="664" column="1" bodyfile="necsim/Tree.cpp" bodystart="1603" bodyend="1625"/>
      </memberdef>
      <memberdef kind="function" id="class_protracted_tree_1af9690f122e77c0a60d363af3e818c9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ProtractedTree::calcSpeciation</definition>
        <argsstring>(const long double &amp;random_number, const long double &amp;speciation_rate, const unsigned long &amp;no_generations) override</argsstring>
        <name>calcSpeciation</name>
        <reimplements refid="class_tree_1abc9389511e1aecf5e573315fc8f4d77c">calcSpeciation</reimplements>
        <param>
          <type>const long double &amp;</type>
          <declname>random_number</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>no_generations</declname>
        </param>
        <briefdescription>
<para>Calculates the speciation probability from the random number, speciation rate and number of generations a lineage has existed for. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>random_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the generated random number from 0-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to be applied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>no_generations</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of generations a lineage has existed for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if true, speciation has occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ProtractedTree.h" line="51" column="1" bodyfile="necsim/ProtractedTree.cpp" bodystart="16" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_protracted_tree_1aaa2f1db86b0fd49a69d0809bd1c1fb81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ProtractedTree::speciateLineage</definition>
        <argsstring>(const unsigned long &amp;data_position) override</argsstring>
        <name>speciateLineage</name>
        <reimplements refid="class_tree_1a32e12cc62ce2d9ae893214b1f4cfad1f">speciateLineage</reimplements>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>data_position</declname>
        </param>
        <briefdescription>
<para>Performs the actual speciation. Includes handling of speciated lineages under protracted conditions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_position</parametername>
</parameternamelist>
<parameterdescription>
<para>the position in the array of TreeNodes for this lineage </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ProtractedTree.h" line="60" column="1" bodyfile="necsim/ProtractedTree.cpp" bodystart="31" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_protracted_tree_1ab0bb05fbdeb2aa75a3d3128ded3d655b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ProtractedTree::getProtracted</definition>
        <argsstring>() override</argsstring>
        <name>getProtracted</name>
        <reimplements refid="class_tree_1aa23a57f7863d58384f61d464d998ab3c">getProtracted</reimplements>
        <briefdescription>
<para>Gets the protractedness of the simulation. Overridden by protracted child classes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ProtractedTree.h" line="67" column="1" bodyfile="necsim/ProtractedTree.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_protracted_tree_1a6e04aa92dd30e889a468d9b9fc6fd58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ProtractedTree::setProtractedVariables</definition>
        <argsstring>(double speciation_gen_min, double speciation_gen_max) override</argsstring>
        <name>setProtractedVariables</name>
        <reimplements refid="class_tree_1a891764ffc1e29d3edbe0fd08e67a184b">setProtractedVariables</reimplements>
        <param>
          <type>double</type>
          <declname>speciation_gen_min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>speciation_gen_max</declname>
        </param>
        <briefdescription>
<para>Sets the protracted variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_gen_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum number of generations to have passed before speciation is allowed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_gen_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of generations a lineage can exist for before it is speciated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ProtractedTree.h" line="74" column="1" bodyfile="necsim/ProtractedTree.cpp" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_protracted_tree_1af0eca5eb2a790fcee9a0854e30088753" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>string</type>
        <definition>string ProtractedTree::getProtractedVariables</definition>
        <argsstring>() override</argsstring>
        <name>getProtractedVariables</name>
        <reimplements refid="class_tree_1a34c0808026bf00546c8f9786376be730">getProtractedVariables</reimplements>
        <briefdescription>
<para>Gets the protracted variables and returns them as a single, newline separated string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string containing the protracted variables, separated by newlines. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ProtractedTree.h" line="81" column="1" bodyfile="necsim/ProtractedTree.cpp" bodystart="59" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_protracted_tree_1a331561815abc7d595e88d98e9268e7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double ProtractedTree::getProtractedGenerationMin</definition>
        <argsstring>() override</argsstring>
        <name>getProtractedGenerationMin</name>
        <reimplements refid="class_tree_1a6ffc42e941f352cd74f01f6f7011f00b">getProtractedGenerationMin</reimplements>
        <briefdescription>
<para>Gets the minimum number of generations a lineage must exist. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double the number of generations a lineage must exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ProtractedTree.h" line="88" column="1" bodyfile="necsim/ProtractedTree.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_protracted_tree_1a2093dd13cdbfc66e6c1de1406023bad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double ProtractedTree::getProtractedGenerationMax</definition>
        <argsstring>() override</argsstring>
        <name>getProtractedGenerationMax</name>
        <reimplements refid="class_tree_1a0c5e746982a87f24c083f4534bf92b45">getProtractedGenerationMax</reimplements>
        <briefdescription>
<para>Gets the maximum number of generations a lineage can exist. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double the number of generations a lineage must exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ProtractedTree.h" line="95" column="1" bodyfile="necsim/ProtractedTree.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_protracted_tree_1a505a464578e6a7028e66f26b3e6b4a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>string</type>
        <definition>string ProtractedTree::protractedVarsToString</definition>
        <argsstring>() override</argsstring>
        <name>protractedVarsToString</name>
        <reimplements refid="class_tree_1aa8bb5d93c7992404ede0a49bb69ccd1f">protractedVarsToString</reimplements>
        <briefdescription>
<para>Outputs the protracted variables to a string. </para>        </briefdescription>
        <detaileddescription>
<para>This function is intended to be overridden by derived classes. It is intended the output is used for writing to SQL databases.</para><para><simplesect kind="return"><para>string containing a list of the protracted speciation variables. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ProtractedTree.h" line="105" column="1" bodyfile="necsim/ProtractedTree.cpp" bodystart="76" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_protracted_tree_1a56a3631e65bb91d04ba4626c4c1ea79a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ProtractedTree::applySpecRate</definition>
        <argsstring>(double sr, double t)</argsstring>
        <name>applySpecRate</name>
        <param>
          <type>double</type>
          <declname>sr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Applies the given speciation rate to the tree. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Currently this just copies code from the version in tree, which is not ideal, but this avoids creating an extra function.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>the required speciation rate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/ProtractedTree.h" line="115" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="607">
        <label>ProtractedTree</label>
        <link refid="class_protracted_tree"/>
        <childnode refid="606" relation="public-inheritance">
        </childnode>
      </node>
      <node id="605">
        <label>SpatialTree</label>
        <link refid="class_spatial_tree"/>
        <childnode refid="606" relation="public-inheritance">
        </childnode>
      </node>
      <node id="604">
        <label>ProtractedSpatialTree</label>
        <link refid="class_protracted_spatial_tree"/>
        <childnode refid="605" relation="public-inheritance">
        </childnode>
        <childnode refid="607" relation="public-inheritance">
        </childnode>
      </node>
      <node id="606">
        <label>Tree</label>
        <link refid="class_tree"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="628">
        <label>Row&lt; double &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="636">
        <label>std::vector&lt; long double &gt;</label>
      </node>
      <node id="637">
        <label>Step</label>
        <link refid="struct_step"/>
      </node>
      <node id="642">
        <label>Row&lt; SpeciesList &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="620">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="631">
        <label>std::vector&lt; CommunityParameters &gt;</label>
        <childnode refid="617" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="635">
        <label>Row&lt; unsigned long &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="617">
        <label>CommunityParameters</label>
        <link refid="struct_community_parameters"/>
        <childnode refid="616" relation="usage">
          <edgelabel>protracted_parameters</edgelabel>
        </childnode>
      </node>
      <node id="625">
        <label>Row&lt; bool &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="638">
        <label>Row&lt; DataPoint &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="640">
        <label>ConfigOption</label>
        <link refid="class_config_option"/>
      </node>
      <node id="644">
        <label>ProtractedTree</label>
        <link refid="class_protracted_tree"/>
        <childnode refid="610" relation="public-inheritance">
        </childnode>
      </node>
      <node id="611">
        <label>Community</label>
        <link refid="class_community"/>
        <childnode refid="612" relation="usage">
          <edgelabel>fragments</edgelabel>
        </childnode>
        <childnode refid="616" relation="usage">
          <edgelabel>applied_protracted_parameters</edgelabel>
        </childnode>
        <childnode refid="617" relation="usage">
          <edgelabel>current_community_parameters</edgelabel>
        </childnode>
        <childnode refid="618" relation="usage">
          <edgelabel>spec_sim_parameters</edgelabel>
        </childnode>
        <childnode refid="621" relation="usage">
          <edgelabel>samplemask</edgelabel>
        </childnode>
        <childnode refid="629" relation="usage">
          <edgelabel>nodes</edgelabel>
        </childnode>
        <childnode refid="630" relation="usage">
          <edgelabel>past_communities</edgelabel>
        </childnode>
        <childnode refid="632" relation="usage">
          <edgelabel>past_metacommunities</edgelabel>
        </childnode>
        <childnode refid="635" relation="usage">
          <edgelabel>row_out</edgelabel>
        </childnode>
      </node>
      <node id="641">
        <label>Matrix&lt; SpeciesList &gt;</label>
        <link refid="class_matrix"/>
        <childnode refid="642" relation="usage">
          <edgelabel>matrix</edgelabel>
        </childnode>
      </node>
      <node id="609">
        <label>SpatialTree</label>
        <link refid="class_spatial_tree"/>
        <childnode refid="610" relation="public-inheritance">
        </childnode>
        <childnode refid="622" relation="usage">
          <edgelabel>samplegrid</edgelabel>
        </childnode>
        <childnode refid="641" relation="usage">
          <edgelabel>grid</edgelabel>
        </childnode>
        <childnode refid="643" relation="usage">
          <edgelabel>dispersal_coordinator</edgelabel>
        </childnode>
        <childnode refid="614" relation="usage">
          <edgelabel>historical_fine_map_input</edgelabel>
          <edgelabel>fine_map_input</edgelabel>
          <edgelabel>historical_coarse_map_input</edgelabel>
          <edgelabel>coarse_map_input</edgelabel>
        </childnode>
      </node>
      <node id="623">
        <label>Map&lt; bool &gt;</label>
        <link refid="class_map"/>
        <childnode refid="624" relation="public-inheritance">
        </childnode>
        <childnode refid="614" relation="usage">
          <edgelabel>filename</edgelabel>
        </childnode>
      </node>
      <node id="615">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="608">
        <label>ProtractedSpatialTree</label>
        <link refid="class_protracted_spatial_tree"/>
        <childnode refid="609" relation="public-inheritance">
        </childnode>
        <childnode refid="644" relation="public-inheritance">
        </childnode>
      </node>
      <node id="633">
        <label>std::vector&lt; MetacommunityParameters &gt;</label>
        <childnode refid="634" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="610">
        <label>Tree</label>
        <link refid="class_tree"/>
        <childnode refid="611" relation="usage">
          <edgelabel>community</edgelabel>
        </childnode>
        <childnode refid="636" relation="usage">
          <edgelabel>speciation_rates</edgelabel>
        </childnode>
        <childnode refid="637" relation="usage">
          <edgelabel>this_step</edgelabel>
        </childnode>
        <childnode refid="614" relation="usage">
          <edgelabel>times_file</edgelabel>
          <edgelabel>pause_sim_directory</edgelabel>
          <edgelabel>sql_output_database</edgelabel>
          <edgelabel>out_directory</edgelabel>
        </childnode>
        <childnode refid="629" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="638" relation="usage">
          <edgelabel>active</edgelabel>
        </childnode>
        <childnode refid="620" relation="usage">
          <edgelabel>reference_times</edgelabel>
        </childnode>
        <childnode refid="639" relation="usage">
          <edgelabel>sim_parameters</edgelabel>
        </childnode>
      </node>
      <node id="634">
        <label>MetacommunityParameters</label>
        <link refid="struct_metacommunity_parameters"/>
      </node>
      <node id="618">
        <label>SpecSimParameters</label>
        <link refid="struct_spec_sim_parameters"/>
        <childnode refid="619" relation="usage">
          <edgelabel>protracted_parameters</edgelabel>
        </childnode>
        <childnode refid="614" relation="usage">
          <edgelabel>times_file</edgelabel>
          <edgelabel>fragment_config_file</edgelabel>
          <edgelabel>samplemask</edgelabel>
          <edgelabel>filename</edgelabel>
        </childnode>
        <childnode refid="620" relation="usage">
          <edgelabel>all_times</edgelabel>
          <edgelabel>all_speciation_rates</edgelabel>
        </childnode>
      </node>
      <node id="616">
        <label>ProtractedSpeciationParameters</label>
        <link refid="struct_protracted_speciation_parameters"/>
      </node>
      <node id="626">
        <label>Map&lt; double &gt;</label>
        <link refid="class_map"/>
        <childnode refid="627" relation="public-inheritance">
        </childnode>
        <childnode refid="614" relation="usage">
          <edgelabel>filename</edgelabel>
        </childnode>
      </node>
      <node id="629">
        <label>Row&lt; TreeNode &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="639">
        <label>SimParameters</label>
        <link refid="struct_sim_parameters"/>
        <childnode refid="640" relation="usage">
          <edgelabel>configs</edgelabel>
        </childnode>
        <childnode refid="614" relation="usage">
          <edgelabel>reproduction_file</edgelabel>
          <edgelabel>times_file</edgelabel>
          <edgelabel>sample_mask_file</edgelabel>
          <edgelabel>fine_map_file</edgelabel>
          <edgelabel>dispersal_method</edgelabel>
          <edgelabel>dispersal_file</edgelabel>
          <edgelabel>historical_fine_map_file</edgelabel>
          <edgelabel>death_file</edgelabel>
          <edgelabel>historical_coarse_map_file</edgelabel>
          <edgelabel>output_directory</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="620" relation="usage">
          <edgelabel>times</edgelabel>
        </childnode>
      </node>
      <node id="621">
        <label>Samplematrix</label>
        <link refid="class_samplematrix"/>
        <childnode refid="622" relation="public-inheritance">
        </childnode>
      </node>
      <node id="624">
        <label>Matrix&lt; bool &gt;</label>
        <link refid="class_matrix"/>
        <childnode refid="625" relation="usage">
          <edgelabel>matrix</edgelabel>
        </childnode>
      </node>
      <node id="622">
        <label>DataMask</label>
        <link refid="class_data_mask"/>
        <childnode refid="623" relation="usage">
          <edgelabel>sample_mask</edgelabel>
        </childnode>
        <childnode refid="614" relation="usage">
          <edgelabel>inputfile</edgelabel>
        </childnode>
        <childnode refid="626" relation="usage">
          <edgelabel>sample_mask_exact</edgelabel>
        </childnode>
      </node>
      <node id="613">
        <label>Fragment</label>
        <link refid="struct_fragment"/>
        <childnode refid="614" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="630">
        <label>CommunitiesArray</label>
        <link refid="struct_communities_array"/>
        <childnode refid="631" relation="usage">
          <edgelabel>communityParameters</edgelabel>
        </childnode>
      </node>
      <node id="627">
        <label>Matrix&lt; double &gt;</label>
        <link refid="class_matrix"/>
        <childnode refid="628" relation="usage">
          <edgelabel>matrix</edgelabel>
        </childnode>
      </node>
      <node id="632">
        <label>MetacommunitiesArray</label>
        <link refid="struct_metacommunities_array"/>
        <childnode refid="633" relation="usage">
          <edgelabel>calc_array</edgelabel>
        </childnode>
      </node>
      <node id="643">
        <label>DispersalCoordinator</label>
        <link refid="class_dispersal_coordinator"/>
        <childnode refid="637" relation="usage">
          <edgelabel>doDispersal</edgelabel>
        </childnode>
        <childnode refid="626" relation="usage">
          <edgelabel>raw_dispersal_prob_map</edgelabel>
          <edgelabel>dispersal_prob_map</edgelabel>
        </childnode>
      </node>
      <node id="619">
        <label>std::vector&lt; ProtractedSpeciationParameters &gt;</label>
        <childnode refid="616" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="612">
        <label>std::vector&lt; Fragment &gt;</label>
        <childnode refid="613" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="614">
        <label>std::string</label>
        <childnode refid="615" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/ProtractedSpatialTree.h" line="26" column="1" bodyfile="necsim/ProtractedSpatialTree.h" bodystart="25" bodyend="28"/>
    <listofallmembers>
      <member refid="class_tree_1a047b331de4979aa4713c69f09237ac35" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>active</name></member>
      <member refid="class_spatial_tree_1a6e802a5034648cc26b24923f27f85727" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>addLineages</name></member>
      <member refid="class_tree_1a38488499b196d3f5ee40b2a68fe3279e" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>addSpeciationRates</name></member>
      <member refid="class_spatial_tree_1a5b26973b7f2dd3ca842a2eb8d2957896" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>addWrappedLineage</name></member>
      <member refid="class_tree_1acfc7efdec999f6dbf2ac089514d22091" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>applyMultipleRates</name></member>
      <member refid="class_tree_1aa6349a32b3fcfb82a5f8311b11db3982" prot="public" virt="non-virtual" ambiguityscope="SpatialTree::"><scope>ProtractedSpatialTree</scope><name>applySpecRate</name></member>
      <member refid="class_tree_1ab699328f13b22f48faa63a5638e907db" prot="public" virt="non-virtual" ambiguityscope="SpatialTree::"><scope>ProtractedSpatialTree</scope><name>applySpecRate</name></member>
      <member refid="class_protracted_tree_1a56a3631e65bb91d04ba4626c4c1ea79a" prot="public" virt="non-virtual" ambiguityscope="ProtractedTree::"><scope>ProtractedSpatialTree</scope><name>applySpecRate</name></member>
      <member refid="class_tree_1ac89abe0404d05d0363258b72cb80700b" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>applySpecRateInternal</name></member>
      <member refid="class_tree_1a6c8c76aec6a9faef9c38f4f275b0793d" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>bConfig</name></member>
      <member refid="class_tree_1a7a32ee0d04641ae745c08f7278c36c13" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>bFullMode</name></member>
      <member refid="class_tree_1a1f7515f16d99a9748ab2c4c667f1ffc4" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>bIsProtracted</name></member>
      <member refid="class_tree_1ac9cbd7d17fb511c1fcc70c765f6440b0" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>bResume</name></member>
      <member refid="class_spatial_tree_1ae6b453b80ea8ffedbbba799ac6142352" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>calcMinMax</name></member>
      <member refid="class_spatial_tree_1ac7202eff84dfe8931374cc236efb9133" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>calcMove</name></member>
      <member refid="class_spatial_tree_1ac2b2ab269b36896cb41c47f750b8c032" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>calcNewPos</name></member>
      <member refid="class_spatial_tree_1a577196761885888dcb9366ab377f98cb" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>calcNextStep</name></member>
      <member refid="class_tree_1abc9389511e1aecf5e573315fc8f4d77c" prot="public" virt="virtual" ambiguityscope="SpatialTree::"><scope>ProtractedSpatialTree</scope><name>calcSpeciation</name></member>
      <member refid="class_protracted_tree_1af9690f122e77c0a60d363af3e818c9a2" prot="public" virt="virtual" ambiguityscope="ProtractedTree::"><scope>ProtractedSpatialTree</scope><name>calcSpeciation</name></member>
      <member refid="class_spatial_tree_1aef0097abc7c616ed656e26b4055834c3" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>checkFolders</name></member>
      <member refid="class_tree_1a5c6065ede9862e9fb6561eb8beaf5d78" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>checkOutputDirectory</name></member>
      <member refid="class_tree_1aa3eef7c7e66a975d1dfd1a0a0148e037" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>checkProportionAdded</name></member>
      <member refid="class_tree_1ad0bcc474a9ab1d4e3e2458c4de7304ad" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>checkSims</name></member>
      <member refid="class_tree_1aafaede1da6c79583bf2e28b7a1881a5c" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>checkSims</name></member>
      <member refid="class_tree_1ab8a62d0ca2b1746676073e3f33e2a949" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>checkSimSize</name></member>
      <member refid="class_tree_1afcbe72c55b38c94ae17de9c2e1dd3a7f" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>checkTimeUpdate</name></member>
      <member refid="class_tree_1a23803bddf46ad28a1bdd46bf05693b1f" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>chooseRandomLineage</name></member>
      <member refid="class_tree_1a16eedb70009e7570d933f88e8ce44117" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>coalescenceEvent</name></member>
      <member refid="class_spatial_tree_1a464b674dbf6f2968497f698ad9a16433" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>coarse_map_input</name></member>
      <member refid="class_tree_1adbb8b625d03dbcdca00f3d8d4b4a50df" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>community</name></member>
      <member refid="class_tree_1a9339bf7bfb7ae81ab78d47a328bc5ad0" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>completePause</name></member>
      <member refid="class_tree_1a370a23cfb08fd27ed1862bdfa605c5b8" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>convertTip</name></member>
      <member refid="class_spatial_tree_1a3e5e285241dbf1382e989624b1c77fed" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>countCellExpansion</name></member>
      <member refid="class_tree_1a5983af6c56e41be51be0766941093b4b" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>data</name></member>
      <member refid="class_tree_1aae24ce11e30fbd74fe078b23b46c14cd" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>database</name></member>
      <member refid="class_spatial_tree_1a6daf7de3a05f63777a0ad67f12bc7095" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>death_map</name></member>
      <member refid="class_tree_1a9fe104115b4593c772c03b57b82ff0de" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>deme</name></member>
      <member refid="class_tree_1ac7a1d0583d3dcb55c50fec0e1fd57985" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>deme_sample</name></member>
      <member refid="class_spatial_tree_1a694c7eb6c70687ea87e49066a8957877" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>desired_specnum</name></member>
      <member refid="class_tree_1a25f082da13789dfa3fefcbcfd08b4dfe" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>determineSpeciationRates</name></member>
      <member refid="class_spatial_tree_1ad238e987bbf1cf2110bd6c3b980de3e4" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>dispersal_coordinator</name></member>
      <member refid="class_tree_1a3cb2d92afc1943796ad6663cc97fc07d" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>dumpActive</name></member>
      <member refid="class_tree_1af94976f439abe0a141a4ab56fac91627" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>dumpData</name></member>
      <member refid="class_spatial_tree_1aad249642767366c7df4cc2bae3c65987" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>dumpGrid</name></member>
      <member refid="class_tree_1a687613834d41ec340fc6f62708368f84" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>dumpMain</name></member>
      <member refid="class_spatial_tree_1ab239652fcda3b0287e7c2ee29afde3b1" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>dumpMap</name></member>
      <member refid="class_tree_1ab478831f09c135bc9a4bc991c9fd5076" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>endactive</name></member>
      <member refid="class_tree_1a50344999e6b64d15eef935b1f6023471" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>enddata</name></member>
      <member refid="class_spatial_tree_1a96919ff86b2a4d1de5ba14c2598a9346" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>estSpecnum</name></member>
      <member refid="class_spatial_tree_1a5a6cf10d4f6d84d06091b07399a7abc7" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>expandCell</name></member>
      <member refid="class_spatial_tree_1a030ece1d0756057e56f4272510d3e567" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>fillObjects</name></member>
      <member refid="class_spatial_tree_1a44fdea35be7d4496248ee27c1457ad6a" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>fine_map_input</name></member>
      <member refid="class_tree_1a50b3d13d4032e0d7a69890b9bd7f84fa" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>generateObjects</name></member>
      <member refid="class_tree_1a84cc46d51045ff3b161ee8788950e0c2" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>generation</name></member>
      <member refid="class_tree_1a49a94b2218f7ae127a53af4a58d02b06" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>getCumulativeAbundances</name></member>
      <member refid="class_spatial_tree_1a46d31dc58b01f2666e90078e95b2a25d" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>getIndividualsSampled</name></member>
      <member refid="class_spatial_tree_1a05ac9205ab49dbe6056522722372063b" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>getInitialCount</name></member>
      <member refid="class_tree_1aa23a57f7863d58384f61d464d998ab3c" prot="public" virt="virtual" ambiguityscope="SpatialTree::"><scope>ProtractedSpatialTree</scope><name>getProtracted</name></member>
      <member refid="class_protracted_tree_1ab0bb05fbdeb2aa75a3d3128ded3d655b" prot="public" virt="virtual" ambiguityscope="ProtractedTree::"><scope>ProtractedSpatialTree</scope><name>getProtracted</name></member>
      <member refid="class_tree_1a0c5e746982a87f24c083f4534bf92b45" prot="public" virt="virtual" ambiguityscope="SpatialTree::"><scope>ProtractedSpatialTree</scope><name>getProtractedGenerationMax</name></member>
      <member refid="class_protracted_tree_1a2093dd13cdbfc66e6c1de1406023bad6" prot="public" virt="virtual" ambiguityscope="ProtractedTree::"><scope>ProtractedSpatialTree</scope><name>getProtractedGenerationMax</name></member>
      <member refid="class_tree_1a6ffc42e941f352cd74f01f6f7011f00b" prot="public" virt="virtual" ambiguityscope="SpatialTree::"><scope>ProtractedSpatialTree</scope><name>getProtractedGenerationMin</name></member>
      <member refid="class_protracted_tree_1a331561815abc7d595e88d98e9268e7a1" prot="public" virt="virtual" ambiguityscope="ProtractedTree::"><scope>ProtractedSpatialTree</scope><name>getProtractedGenerationMin</name></member>
      <member refid="class_tree_1a34c0808026bf00546c8f9786376be730" prot="public" virt="virtual" ambiguityscope="SpatialTree::"><scope>ProtractedSpatialTree</scope><name>getProtractedVariables</name></member>
      <member refid="class_protracted_tree_1af0eca5eb2a790fcee9a0854e30088753" prot="public" virt="virtual" ambiguityscope="ProtractedTree::"><scope>ProtractedSpatialTree</scope><name>getProtractedVariables</name></member>
      <member refid="class_tree_1a857521315ca6bd9b3300d099488d74f1" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>getSeed</name></member>
      <member refid="class_tree_1ac03c034a5730ee4f4d8727aace776412" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>getTemporalSampling</name></member>
      <member refid="class_spatial_tree_1a199167b149b25c506fdaeb660d595658" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>grid</name></member>
      <member refid="class_tree_1ad8d1d7e4fa673b28542ba31c5b637856" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>has_imported_pause</name></member>
      <member refid="class_tree_1a97bde28466a098bb9e58c1bd5610fd68" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>has_imported_vars</name></member>
      <member refid="class_tree_1aaa64e29ab7bc3c6f48d454063f0c39e1" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>has_paused</name></member>
      <member refid="class_tree_1ae07761c0a91a44ebe459904b1b8ffb43" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>hasPaused</name></member>
      <member refid="class_spatial_tree_1a54279132ba3e8bc3455488bb3b16e8f8" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>historical_coarse_map_input</name></member>
      <member refid="class_spatial_tree_1ac49970522839ed06459949caca57fa1d" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>historical_fine_map_input</name></member>
      <member refid="class_spatial_tree_1a8ba526e7129f70b4ccff289c1a21d2a9" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>importActivityMaps</name></member>
      <member refid="class_spatial_tree_1ab9603c25cd1c8466d1e4bfa3f73f191f" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>importMaps</name></member>
      <member refid="class_tree_1a455d87022772b309a5974ea5f0295139" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>importSimulationVariables</name></member>
      <member refid="class_tree_1a029af5f2dc1e33b4eead8110090ac778" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>importSimulationVariables</name></member>
      <member refid="class_spatial_tree_1aa5db72e986bed4b0aa81217f5be30cf4" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>incrementGeneration</name></member>
      <member refid="class_tree_1a768b9c46fbbc1e49257ab96a66491058" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>initiatePause</name></member>
      <member refid="class_tree_1a8cfe5d30d53d702f18cd67981e2c9acb" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>initiateResume</name></member>
      <member refid="class_tree_1a62db83e47e5850c6a83793829b22b68b" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>internalSetup</name></member>
      <member refid="class_spatial_tree_1a0c081fddba637ed965c932bb6b8ee998" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>landscape</name></member>
      <member refid="class_tree_1a2fa8cf49a891654ff9316460ba6d9991" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>loadActiveSave</name></member>
      <member refid="class_tree_1ac6483904c8b94797fdb4c51fed39a2ac" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>loadDataSave</name></member>
      <member refid="class_spatial_tree_1a2ab187d381811c7c7640a7cc4607c437" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>loadGridSave</name></member>
      <member refid="class_tree_1adbebd341b5d4c2c7685c728a2cb46a61" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>loadMainSave</name></member>
      <member refid="class_spatial_tree_1a85304af0df40187aedc4c81a53ffde8c" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>loadMapSave</name></member>
      <member refid="class_tree_1a3fa6fbeeb00d1661958f8e358796251c" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>makeTip</name></member>
      <member refid="class_tree_1a0244ee15452c38393246147d93836b4d" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>maxsimsize</name></member>
      <member refid="class_tree_1a1868cf626a0b12f21a038989d4eca210" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>maxtime</name></member>
      <member refid="class_tree_1a5510d0fb5deb23fd39a2619d104f85fa" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>now</name></member>
      <member refid="class_tree_1a20790866da998f8cb7d0f1455d9fbcc5" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>NR</name></member>
      <member refid="class_tree_1ad0093ade6fd9c47c35b309010cfdf62f" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>openSaveFile</name></member>
      <member refid="class_tree_1a9e240bbfc3139b290a0dead741f560bf" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>openSQLDatabase</name></member>
      <member refid="class_tree_1a85615771af7b568adca1b801995cfdc7" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>out_directory</name></member>
      <member refid="class_tree_1a5ee1fa5adf72bb599badc041fbee7d09" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>out_finish</name></member>
      <member refid="class_tree_1afdf680e187c25ed39d1e66542ce44cc3" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>outputData</name></member>
      <member refid="class_tree_1a5acf7d0eea9ea2ef4928bb6691b87724" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>outputData</name></member>
      <member refid="class_spatial_tree_1ad6a5412bccbccc92a302b2fb05bbced2" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>parseArgs</name></member>
      <member refid="class_tree_1a504a4d7ae23146fd6236baa59da51a6e" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>pause_sim_directory</name></member>
      <member refid="class_tree_1ab71da7797a6586ddd948661c34ce4788" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>printSetup</name></member>
      <member refid="class_protracted_tree_1a43bd50d3c1092727160413dffd11df41" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>ProtractedTree</name></member>
      <member refid="class_tree_1aa8bb5d93c7992404ede0a49bb69ccd1f" prot="public" virt="virtual" ambiguityscope="SpatialTree::"><scope>ProtractedSpatialTree</scope><name>protractedVarsToString</name></member>
      <member refid="class_protracted_tree_1a505a464578e6a7028e66f26b3e6b4a92" prot="public" virt="virtual" ambiguityscope="ProtractedTree::"><scope>ProtractedSpatialTree</scope><name>protractedVarsToString</name></member>
      <member refid="class_tree_1a56bb1ea64368f5b705360a435350f9d5" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>reference_times</name></member>
      <member refid="class_spatial_tree_1ae694bde4ab31b51c13c4a96f9a86a8ba" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>removeOldPosition</name></member>
      <member refid="class_spatial_tree_1ac9ec70e77ff7b1f67bc9aed6cb8749e1" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>reproduction_map</name></member>
      <member refid="class_spatial_tree_1a060fb8be17d702ed5eb0c142a89d9773" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>runFileChecks</name></member>
      <member refid="class_tree_1afe75245862a1c40030c1c8607518cf8d" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>runSimulation</name></member>
      <member refid="class_spatial_tree_1ad902e850c9573b5c26ef6d77a203f72d" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>samplegrid</name></member>
      <member refid="class_tree_1a78935befd45946b8e69023bffca59c1d" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>seeded</name></member>
      <member refid="class_tree_1aec2640897132a1b667e852bbafc14c78" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>setInitialValues</name></member>
      <member refid="class_tree_1a869ab0aba75336f737cbb137c74b8abc" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>setObjectSizes</name></member>
      <member refid="class_spatial_tree_1a0c83bcd9a84f4fa98c78b75a78a9a012" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>setParameters</name></member>
      <member refid="class_tree_1a891764ffc1e29d3edbe0fd08e67a184b" prot="public" virt="virtual" ambiguityscope="SpatialTree::"><scope>ProtractedSpatialTree</scope><name>setProtractedVariables</name></member>
      <member refid="class_protracted_tree_1a6e04aa92dd30e889a468d9b9fc6fd58d" prot="public" virt="virtual" ambiguityscope="ProtractedTree::"><scope>ProtractedSpatialTree</scope><name>setProtractedVariables</name></member>
      <member refid="class_tree_1ac545d844141db977920fc9fd76ce9dbb" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>setResumeParameters</name></member>
      <member refid="class_tree_1aeade4bccb8394937a53bc4fbcf2b4300" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>setResumeParameters</name></member>
      <member refid="class_tree_1ab240ab1988cbde281a6811b3fdc1dd5d" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>setSeed</name></member>
      <member refid="class_tree_1a1ba0f5d27c6ef6e9e17f988aff2dfe65" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>setSimStartVariables</name></member>
      <member refid="class_tree_1ae3fb33c46cf7e3af44604a9875b375a3" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>setTimes</name></member>
      <member refid="class_spatial_tree_1ae97336318c81e182e9f445f7efdbff8d" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>setup</name></member>
      <member refid="class_spatial_tree_1a3ce93c4d62367f17dd523cab4cc35ae8" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>setupDispersalCoordinator</name></member>
      <member refid="class_tree_1a9997b98824a786d9843a3df40de1226a" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>setupTreeGeneration</name></member>
      <member refid="class_tree_1a07f9982fd6f6243c78ef42371603bbe4" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>sim_complete</name></member>
      <member refid="class_tree_1a26100477c7e58a9e0a90cdee1379ed69" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>sim_end</name></member>
      <member refid="class_tree_1ac399ba59be9dc33a04223d10a82ee5ee" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>sim_finish</name></member>
      <member refid="class_tree_1a63c399793a209332ad0f5da7fc830d56" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>sim_parameters</name></member>
      <member refid="class_tree_1a01cc9b30f2b10b9f51b218df25b13b09" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>sim_start</name></member>
      <member refid="class_spatial_tree_1af89289a1dc549102c0137763a7d26065" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>simPause</name></member>
      <member refid="class_spatial_tree_1ad578ceeaf0ab3f4a2e39eb907881c11f" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>simResume</name></member>
      <member refid="class_spatial_tree_1acc54786661c182b6df23e57a61716e0f" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>simulationParametersSqlInsertion</name></member>
      <member refid="class_tree_1a2d2065bbebee8b55270d2691d40cd974" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>sortData</name></member>
      <member refid="class_spatial_tree_1a051cc56f4f1284c419616ca6b582d52f" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>SpatialTree</name></member>
      <member refid="class_tree_1a586678f7084086add3a4136476abd375" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>spec</name></member>
      <member refid="class_tree_1a32e12cc62ce2d9ae893214b1f4cfad1f" prot="public" virt="virtual" ambiguityscope="SpatialTree::"><scope>ProtractedSpatialTree</scope><name>speciateLineage</name></member>
      <member refid="class_protracted_tree_1aaa2f1db86b0fd49a69d0809bd1c1fb81" prot="public" virt="virtual" ambiguityscope="ProtractedTree::"><scope>ProtractedSpatialTree</scope><name>speciateLineage</name></member>
      <member refid="class_tree_1a05c9e44f1a4d7af83e65b6c4565b1b28" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>speciation</name></member>
      <member refid="class_tree_1a61b4349fe78d09ac06eff4b7d6833105" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>speciation_rates</name></member>
      <member refid="class_tree_1a80d3e92108eb472df49640a661ef4f7d" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>sql_output_database</name></member>
      <member refid="class_tree_1ae784a6ed362f6c5263ee797759f715b6" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>sqlCreate</name></member>
      <member refid="class_tree_1a199f47b62b9b10917ff8b89d20c543a7" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>sqlCreateSimulationParameters</name></member>
      <member refid="class_tree_1a8cd3db7add1884ea53b0d98002d39cd3" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>sqlOutput</name></member>
      <member refid="class_tree_1ac077d686ee96b123aa779e8a8a5de3ce" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>start</name></member>
      <member refid="class_tree_1a3f1a90ab7ef917a996790e5ddfcebf85" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>startendactive</name></member>
      <member refid="class_tree_1ae7d33b8c16eeb8cb0c7f96dbfbc61b4e" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>steps</name></member>
      <member refid="class_tree_1afd6bd75c301d2f57c4997fcfc92f192e" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>stopSimulation</name></member>
      <member refid="class_spatial_tree_1a71c99204503ec59815a5338ab934331d" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>switchPositions</name></member>
      <member refid="class_tree_1acf483ed0a44629c9aa4690a08017ee35" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>the_seed</name></member>
      <member refid="class_tree_1a9f74137d5c9c5529ec9a06f88dfa6960" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>the_task</name></member>
      <member refid="class_tree_1af7de4d4f04360edcbe2a20db882b1f87" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>this_step</name></member>
      <member refid="class_tree_1abd18bb487c0192588b6bed6f00bcfd07" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>time_taken</name></member>
      <member refid="class_tree_1a5e031ea8d94f48288547116a9e7d7add" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>times_file</name></member>
      <member refid="class_tree_1ad376a7c639d857312f5de2ef47482f68" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>Tree</name></member>
      <member refid="class_spatial_tree_1ad14491fc87b0a9b28f5b8b316ee8a89d" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>updateStepCoalescenceVariables</name></member>
      <member refid="class_tree_1abed1688c75153c4af4e8c574a26dd636" prot="protected" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>uses_temporal_sampling</name></member>
      <member refid="class_spatial_tree_1af2fe54f787584c4fde048ebc96556a51" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>verifyActivityMaps</name></member>
      <member refid="class_tree_1aa31508ea6d5801c6dee17c035f393b60" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>wipeSimulationVariables</name></member>
      <member refid="class_tree_1a95360a2f62ef0eb436d586552b299e1f" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>writeSimStartToConsole</name></member>
      <member refid="class_tree_1a37de93174eece50a2fc082b683d97047" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>writeStepToConsole</name></member>
      <member refid="class_tree_1ab8785fc9e27868a56335048321c13290" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>writeTimes</name></member>
      <member refid="class_spatial_tree_1ab5c557551d05c27f7688de97c0806216" prot="public" virt="non-virtual"><scope>ProtractedSpatialTree</scope><name>~SpatialTree</name></member>
      <member refid="class_tree_1a2348b20e31754ce28b00f6b6e9536644" prot="public" virt="virtual"><scope>ProtractedSpatialTree</scope><name>~Tree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
