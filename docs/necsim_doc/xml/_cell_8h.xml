<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_cell_8h" kind="file" language="C++">
    <compoundname>Cell.h</compoundname>
    <includedby refid="_cell_8cpp" local="yes">necsim/Cell.cpp</includedby>
    <includedby refid="_step_8h" local="yes">necsim/Step.h</includedby>
    <includedby refid="_simulate_dispersal_8h" local="yes">necsim/SimulateDispersal.h</includedby>
    <invincdepgraph>
      <node id="7">
        <label>necsim/DispersalCoordinator.h</label>
        <link refid="_dispersal_coordinator_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>necsim/Tree.h</label>
        <link refid="_tree_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>necsim/ProtractedSpatialTree.h</label>
        <link refid="_protracted_spatial_tree_8h_source"/>
      </node>
      <node id="11">
        <label>necsim/SimulateDispersal.h</label>
        <link refid="_simulate_dispersal_8h_source"/>
      </node>
      <node id="8">
        <label>necsim/SpatialTree.h</label>
        <link refid="_spatial_tree_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>necsim/Step.h</label>
        <link refid="_step_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>necsim/ProtractedTree.h</label>
        <link refid="_protracted_tree_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>necsim/Metacommunity.h</label>
        <link refid="_metacommunity_8h_source"/>
      </node>
      <node id="5">
        <label>necsim/Cell.h</label>
        <link refid="Cell.h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_cell" prot="public">Cell</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_cell_8h_1a48edc8f7abe3fe6291412caa2cd65392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double distanceBetweenCells</definition>
        <argsstring>(Cell &amp;c1, Cell &amp;c2)</argsstring>
        <name>distanceBetweenCells</name>
        <param>
          <type><ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type><ref refid="struct_cell" kindref="compound">Cell</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>Calculates the distance between two cells. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_cell" kindref="compound">Cell</ref> containing one point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c2</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_cell" kindref="compound">Cell</ref> containing second point </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the distance between the two points </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Cell.h" line="59" column="1" bodyfile="necsim/Cell.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic container for location data. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Samuel Thompson</para></simplesect>
<simplesect kind="copyright"><para><ulink url="https://opensource.org/licenses/MIT">MIT Licence.</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NECSim<sp/>project<sp/>which<sp/>is<sp/>released<sp/>under<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>**LICENSE.txt**<sp/>or<sp/>visit<sp/>https://opensource.org/licenses/MIT)<sp/>for<sp/>full<sp/>license<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor">#ifndef<sp/>CELL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CELL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="struct_cell" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_cell" kindref="compound">Cell</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_cell" kindref="compound">Cell</ref><sp/>&amp;<ref refid="struct_cell_1ac1f905d4cd626cc32963ab7a6f76634e" kindref="member">operator=</ref>(<ref refid="struct_cell" kindref="compound">Cell</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>c)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="struct_cell_1abd251051519de0c0b3f2cdace1a2c684" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_cell_1abd251051519de0c0b3f2cdace1a2c684" kindref="member">operator==</ref>(<ref refid="struct_cell" kindref="compound">Cell</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;c)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>c.x<sp/>&amp;&amp;<sp/>y<sp/>==<sp/>c.y;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="struct_cell_1ac3b83bb33eb11dd036a4acecc7fa62d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_cell_1ac3b83bb33eb11dd036a4acecc7fa62d0" kindref="member">operator!=</ref>(<ref refid="struct_cell" kindref="compound">Cell</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;c)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(this-&gt;<ref refid="struct_cell_1abd251051519de0c0b3f2cdace1a2c684" kindref="member">operator==</ref>(c));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distanceBetweenCells(<ref refid="struct_cell" kindref="compound">Cell</ref><sp/>&amp;c1,<sp/><ref refid="struct_cell" kindref="compound">Cell</ref><sp/>&amp;c2);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>CELL_H</highlight></codeline>
    </programlisting>
    <location file="necsim/Cell.h"/>
  </compounddef>
</doxygen>
