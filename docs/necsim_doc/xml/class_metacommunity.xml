<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_metacommunity" kind="class" language="C++" prot="public">
    <compoundname>Metacommunity</compoundname>
    <basecompoundref refid="class_community" prot="public" virt="virtual">Community</basecompoundref>
    <includes refid="_metacommunity_8h" local="no">Metacommunity.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_metacommunity_1a3b392090e764ffb2ada3881e4eddd0b1" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Metacommunity::community_size</definition>
        <argsstring></argsstring>
        <name>community_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="37" column="1" bodyfile="necsim/Metacommunity.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1aad4378b40264345fc6f5116aedc58c26" prot="protected" static="no" mutable="no">
        <type>long double</type>
        <definition>long double Metacommunity::speciation_rate</definition>
        <argsstring></argsstring>
        <name>speciation_rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="39" column="1" bodyfile="necsim/Metacommunity.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1afd81750697ac8540b71de001ee53fc61" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Metacommunity::seed</definition>
        <argsstring></argsstring>
        <name>seed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="41" column="1" bodyfile="necsim/Metacommunity.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1a094dfd2d0bb737a1f5bd06ceb3c6da1f" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Metacommunity::task</definition>
        <argsstring></argsstring>
        <name>task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="42" column="1" bodyfile="necsim/Metacommunity.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1a8b0ca689c1c638e49424d59fadb2e28d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Metacommunity::parameters_checked</definition>
        <argsstring></argsstring>
        <name>parameters_checked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="43" column="1" bodyfile="necsim/Metacommunity.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1ae9ef6b36732d3269baef697b5341c0b9" prot="protected" static="no" mutable="no">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; unsigned long &gt; *</type>
        <definition>Row&lt;unsigned long&gt;* Metacommunity::metacommunity_cumulative_abundances</definition>
        <argsstring></argsstring>
        <name>metacommunity_cumulative_abundances</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="44" column="1" bodyfile="necsim/Metacommunity.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1aa47b2ff3f6944143f8e734d0988d2ff3" prot="protected" static="no" mutable="no">
        <type><ref refid="class_n_rrand" kindref="compound">NRrand</ref></type>
        <definition>NRrand Metacommunity::random</definition>
        <argsstring></argsstring>
        <name>random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="45" column="1" bodyfile="necsim/Metacommunity.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1a85e91103025feb641bf0df9d02152b99" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tree" kindref="compound">Tree</ref></type>
        <definition>Tree Metacommunity::metacommunity_tree</definition>
        <argsstring></argsstring>
        <name>metacommunity_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="46" column="1" bodyfile="necsim/Metacommunity.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1abc144eeba19574b6b46df384a61acc6f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Community::in_mem</definition>
        <argsstring></argsstring>
        <name>in_mem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="351" column="1" bodyfile="necsim/Community.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a7e00bcb1c5a24280346df94853e2919b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Community::database_set</definition>
        <argsstring></argsstring>
        <name>database_set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="352" column="1" bodyfile="necsim/Community.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a382c0e6e90ca8055d3192bfe2af4d741" prot="protected" static="no" mutable="no">
        <type>sqlite3 *</type>
        <definition>sqlite3* Community::database</definition>
        <argsstring></argsstring>
        <name>database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="353" column="1" bodyfile="necsim/Community.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a884634e98e0aacb082968664acd5a32e" prot="protected" static="no" mutable="no">
        <type>sqlite3 *</type>
        <definition>sqlite3* Community::outdatabase</definition>
        <argsstring></argsstring>
        <name>outdatabase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="354" column="1" bodyfile="necsim/Community.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1aa9fe335ff9e94c626d1e0d41ff145524" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Community::bSqlConnection</definition>
        <argsstring></argsstring>
        <name>bSqlConnection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="355" column="1" bodyfile="necsim/Community.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1aa1309616989642b98c15e6e2ed25b379" prot="protected" static="no" mutable="no">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; <ref refid="class_tree_node" kindref="compound">TreeNode</ref> &gt; *</type>
        <definition>Row&lt;TreeNode&gt;* Community::nodes</definition>
        <argsstring></argsstring>
        <name>nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="356" column="1" bodyfile="necsim/Community.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a06e5a133792f29fa17a1b0664d650541" prot="protected" static="no" mutable="no">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; unsigned long &gt;</type>
        <definition>Row&lt;unsigned long&gt; Community::row_out</definition>
        <argsstring></argsstring>
        <name>row_out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="357" column="1" bodyfile="necsim/Community.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a094f10ce5bbbcab19bccda352f545aad" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Community::iSpecies</definition>
        <argsstring></argsstring>
        <name>iSpecies</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="358" column="1" bodyfile="necsim/Community.h" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a6c3c70184f586330635a4123699f586f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Community::has_imported_samplemask</definition>
        <argsstring></argsstring>
        <name>has_imported_samplemask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="359" column="1" bodyfile="necsim/Community.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a0371c39658281c8956c29c6b2d564b79" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Community::has_imported_data</definition>
        <argsstring></argsstring>
        <name>has_imported_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="360" column="1" bodyfile="necsim/Community.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1ac7434119a77086e3b38a4a94c8fbff01" prot="protected" static="no" mutable="no">
        <type><ref refid="class_samplematrix" kindref="compound">Samplematrix</ref></type>
        <definition>Samplematrix Community::samplemask</definition>
        <argsstring></argsstring>
        <name>samplemask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="361" column="1" bodyfile="necsim/Community.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a8a17909b92a0cec3b63cec41e92796cb" prot="protected" static="no" mutable="no">
        <type>vector&lt; <ref refid="struct_fragment" kindref="compound">Fragment</ref> &gt;</type>
        <definition>vector&lt;Fragment&gt; Community::fragments</definition>
        <argsstring></argsstring>
        <name>fragments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="362" column="1" bodyfile="necsim/Community.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a77e925f82bee5441d8ec45406066dcfb" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_community_parameters" kindref="compound">CommunityParameters</ref> *</type>
        <definition>CommunityParameters* Community::current_community_parameters</definition>
        <argsstring></argsstring>
        <name>current_community_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="363" column="1" bodyfile="necsim/Community.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a9dc6f7d4ab75b382be85c2b74edac6b7" prot="protected" static="no" mutable="no">
        <type>long double</type>
        <definition>long double Community::min_spec_rate</definition>
        <argsstring></argsstring>
        <name>min_spec_rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="365" column="1" bodyfile="necsim/Community.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a383dba82c8c76bf5c130c2bf4ac057e5" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Community::grid_x_size</definition>
        <argsstring></argsstring>
        <name>grid_x_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="367" column="1" bodyfile="necsim/Community.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a308d12fa4ef95015860d4181b075c93f" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Community::grid_y_size</definition>
        <argsstring></argsstring>
        <name>grid_y_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="367" column="1" bodyfile="necsim/Community.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a960bb6bb58eaec017d36d16cb3a3bc8a" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Community::samplemask_x_size</definition>
        <argsstring></argsstring>
        <name>samplemask_x_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="369" column="1" bodyfile="necsim/Community.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a10722b2fe8855460946f04f0ae69fd74" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Community::samplemask_y_size</definition>
        <argsstring></argsstring>
        <name>samplemask_y_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="369" column="1" bodyfile="necsim/Community.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1ac4985481c86bd62a50fa946699867216" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Community::samplemask_x_offset</definition>
        <argsstring></argsstring>
        <name>samplemask_x_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="369" column="1" bodyfile="necsim/Community.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1aeaebe975a46d62b70380e50ff7ebd09a" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Community::samplemask_y_offset</definition>
        <argsstring></argsstring>
        <name>samplemask_y_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="369" column="1" bodyfile="necsim/Community.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a0726a962287af565658aaa8f9d9ea6c1" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_communities_array" kindref="compound">CommunitiesArray</ref></type>
        <definition>CommunitiesArray Community::past_communities</definition>
        <argsstring></argsstring>
        <name>past_communities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="371" column="1" bodyfile="necsim/Community.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1ae00d8d9f52d163b040cc716955569ad3" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_metacommunities_array" kindref="compound">MetacommunitiesArray</ref></type>
        <definition>MetacommunitiesArray Community::past_metacommunities</definition>
        <argsstring></argsstring>
        <name>past_metacommunities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="372" column="1" bodyfile="necsim/Community.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1acab5a676e365934f9dfd2148ab9d5a60" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Community::protracted</definition>
        <argsstring></argsstring>
        <name>protracted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="374" column="1" bodyfile="necsim/Community.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a6b906ec2096b22631b60aa3511925fe0" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Community::min_speciation_gen</definition>
        <argsstring></argsstring>
        <name>min_speciation_gen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="375" column="1" bodyfile="necsim/Community.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1aeff6623b51fdd177e87b6eebfba27080" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Community::max_speciation_gen</definition>
        <argsstring></argsstring>
        <name>max_speciation_gen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="375" column="1" bodyfile="necsim/Community.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a28b02e78e3453599b678072b57a5ebf7" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_protracted_speciation_parameters" kindref="compound">ProtractedSpeciationParameters</ref></type>
        <definition>ProtractedSpeciationParameters Community::applied_protracted_parameters</definition>
        <argsstring></argsstring>
        <name>applied_protracted_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="376" column="1" bodyfile="necsim/Community.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a31f80e452a92aabdf2d9ba7bcc798f84" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Community::max_species_id</definition>
        <argsstring></argsstring>
        <name>max_species_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="377" column="1" bodyfile="necsim/Community.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a5de3afc536570241b82489d1b9c87d03" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Community::max_fragment_id</definition>
        <argsstring></argsstring>
        <name>max_fragment_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="377" column="1" bodyfile="necsim/Community.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1ae503af91bc33ed302a363098a3b49a61" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Community::max_locations_id</definition>
        <argsstring></argsstring>
        <name>max_locations_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="377" column="1" bodyfile="necsim/Community.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_community_1a45df8aefb9914e7c8f3133143069ca35" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_spec_sim_parameters" kindref="compound">SpecSimParameters</ref> *</type>
        <definition>SpecSimParameters* Community::spec_sim_parameters</definition>
        <argsstring></argsstring>
        <name>spec_sim_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="379" column="1" bodyfile="necsim/Community.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_metacommunity_1ae9f7d7ea2b20471a330b10db37a15342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Metacommunity::Metacommunity</definition>
        <argsstring>()</argsstring>
        <name>Metacommunity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="49" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="20" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1a7ff34a367f64dfa466d597225eda8cc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Metacommunity::~Metacommunity</definition>
        <argsstring>() override=default</argsstring>
        <name>~Metacommunity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1af9407da2a2e99848ac11ce3a426d4c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Metacommunity::setCommunityParameters</definition>
        <argsstring>(unsigned long community_size_in, long double speciation_rate_in, string database_name_in)</argsstring>
        <name>setCommunityParameters</name>
        <param>
          <type>unsigned long</type>
          <declname>community_size_in</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>speciation_rate_in</declname>
        </param>
        <param>
          <type>string</type>
          <declname>database_name_in</declname>
        </param>
        <briefdescription>
<para>Sets the parameters for the metacommunity. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>community_size_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of individuals in the metacommunity </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_rate_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to use for metacommunity creation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>database_name_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the database to store the metacommunity in </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="59" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="29" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1ad3775b6cecab860b008d15cc9c7650ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Metacommunity::checkSimulationParameters</definition>
        <argsstring>()</argsstring>
        <name>checkSimulationParameters</name>
        <briefdescription>
<para>Gets the seed and the task from the SIMULATION_PARAMETERS database and stores them in the relevant variables. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Should only be called once, and will have no effect if called multiple times. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="68" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="39" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1a8cad1a5648ff5b6b51f2441898fdad48" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Metacommunity::addSpecies</definition>
        <argsstring>(unsigned long &amp;species_count, TreeNode *tree_node, set&lt; unsigned long &gt; &amp;species_list) override</argsstring>
        <name>addSpecies</name>
        <reimplements refid="class_community_1a7a51d163ec40883125fde38e6e85e52e">addSpecies</reimplements>
        <param>
          <type>unsigned long &amp;</type>
          <declname>species_count</declname>
        </param>
        <param>
          <type><ref refid="class_tree_node" kindref="compound">TreeNode</ref> *</type>
          <declname>tree_node</declname>
        </param>
        <param>
          <type>set&lt; unsigned long &gt; &amp;</type>
          <declname>species_list</declname>
        </param>
        <briefdescription>
<para>Speciates <ref refid="class_tree_node" kindref="compound">TreeNode</ref> and updates the species count, including adding to the set of species ids, if a new species has been selected from the metacommunity. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>species_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the total number of species currently in the community </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tree_node</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the <ref refid="class_tree_node" kindref="compound">TreeNode</ref> object for this lineage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>species_list</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of all species ids. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="78" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="66" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1a2557f1dc48f4a7aba97431ac8a8c7dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Metacommunity::createMetacommunityNSENeutralModel</definition>
        <argsstring>()</argsstring>
        <name>createMetacommunityNSENeutralModel</name>
        <briefdescription>
<para>Creates the metacommunity in memory using a non-spatially_explicit neutral model, which is run using the <ref refid="class_tree" kindref="compound">Tree</ref> class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="84" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="78" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1ac1884bfd79b272d8dcb470f34f579cf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Metacommunity::selectLineageFromMetacommunity</definition>
        <argsstring>()</argsstring>
        <name>selectLineageFromMetacommunity</name>
        <briefdescription>
<para>Selects a random lineage from the metacommunity (rOut), which should be a cumulative sum of species abundances. Performs a binary search on rOut. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the species id for the lineage </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="92" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="103" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1ac9921c5bcae79db2a5a108598744ce26" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Metacommunity::applyNoOutput</definition>
        <argsstring>(SpecSimParameters *sp) override</argsstring>
        <name>applyNoOutput</name>
        <reimplements refid="class_community_1ada966cf133c12d0cbabcd77784c951bb">applyNoOutput</reimplements>
        <param>
          <type><ref refid="struct_spec_sim_parameters" kindref="compound">SpecSimParameters</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Applies the speciation parameters to the completed simulation, including running the spatially-implicit for the metacommunity structure, but doesn&apos;t write the output. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>speciation parameters to apply, including speciation rate, times and spatial sampling procedure. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="99" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="146" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a710a402dffa1b85183dd7f4a5a44f988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::setList</definition>
        <argsstring>(Row&lt; TreeNode &gt; *l)</argsstring>
        <name>setList</name>
        <param>
          <type><ref refid="class_row" kindref="compound">Row</ref>&lt; <ref refid="class_tree_node" kindref="compound">TreeNode</ref> &gt; *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Set the nodes object to the input <ref refid="class_row" kindref="compound">Row</ref> of Treenode objects. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_row" kindref="compound">Row</ref> of Treenode objects to link to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="434" column="1" bodyfile="necsim/Community.cpp" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a6fe2fdb93911f403dd879ca2847e4933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::setDatabase</definition>
        <argsstring>(sqlite3 *dbin)</argsstring>
        <name>setDatabase</name>
        <param>
          <type>sqlite3 *</type>
          <declname>dbin</declname>
        </param>
        <briefdescription>
<para>Sets the database object for the sqlite functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dbin</parametername>
</parameternamelist>
<parameterdescription>
<para>the sqlite3 input database. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="440" column="1" bodyfile="necsim/Community.cpp" bodystart="292" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a045f762ca30c3a20e8ef5911a4982160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Community::hasImportedData</definition>
        <argsstring>()</argsstring>
        <name>hasImportedData</name>
        <briefdescription>
<para>Get the boolean of whether the data has been imported yet. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if database has been imported. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="446" column="1" bodyfile="necsim/Community.cpp" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a4e5dea65183810c3b27441736eca825a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double Community::getMinimumSpeciation</definition>
        <argsstring>()</argsstring>
        <name>getMinimumSpeciation</name>
        <briefdescription>
<para>Get the minimum speciation rate the simulation was originally run with. This value is read in from the SIMULATION_PARAMETERS table in the database file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the minimum speciation rate. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="453" column="1" bodyfile="necsim/Community.cpp" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a01a137383e1e23f2191d63f16513a00a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::importSamplemask</definition>
        <argsstring>(string sSamplemask)</argsstring>
        <name>importSamplemask</name>
        <param>
          <type>string</type>
          <declname>sSamplemask</declname>
        </param>
        <briefdescription>
<para>Imports the samplemask if it hasn&apos;t already been imported. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sSamplemask</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the samplemask file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="459" column="1" bodyfile="necsim/Community.cpp" bodystart="315" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a07970398c04e7c31ceda695c2860e20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Community::countSpecies</definition>
        <argsstring>()</argsstring>
        <name>countSpecies</name>
        <briefdescription>
<para>Counts the number of species that have speciated currently on the tree. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of species </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="466" column="1" bodyfile="necsim/Community.cpp" bodystart="356" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a241f69d1f69e61fc53c112fd874bf3ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Community::calcSpecies</definition>
        <argsstring>()</argsstring>
        <name>calcSpecies</name>
        <briefdescription>
<para>Calculate the number of species in the list for the parameters in the current_community_parameters object. This is the main function which reconstructs the coalescence tree. Each Treenode object will end having its existence value set correctly after a call to this function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of species present. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="475" column="1" bodyfile="necsim/Community.cpp" bodystart="369" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a502a409a75567d78575625346b6a969f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::calcSpeciesAbundance</definition>
        <argsstring>()</argsstring>
        <name>calcSpeciesAbundance</name>
        <briefdescription>
<para>Calculates the species abundance of the dataset. The species abundances will be with rOut after a call do this function. If a samplemask has been applied, only lineages which originally existed in the samplemask will be counted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="494" column="1" bodyfile="necsim/Community.cpp" bodystart="569" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1abd099aacb5332a9b89b3421e01269d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Community::resetTree</definition>
        <argsstring>()</argsstring>
        <name>resetTree</name>
        <briefdescription>
<para>Resets the entire tree. Sets existance to false, speciation to false and removes any species ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="500" column="1" bodyfile="necsim/Community.cpp" bodystart="635" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a579c5f423fc2461838a80baf6b396310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::detectDimensions</definition>
        <argsstring>(string db)</argsstring>
        <name>detectDimensions</name>
        <param>
          <type>string</type>
          <declname>db</declname>
        </param>
        <briefdescription>
<para>This function detects the maximum x and y values of the sql database. This allows for the dimensions before opening the map file. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated as of 08/2016 due to simulation parameters being stored in the SQL database. </para></xrefdescription></xrefsect><xrefsect id="bug_1_bug000001"><xreftitle>Bug</xreftitle><xrefdescription><para>If species do not exist across the whole range of the samplemask, samplemask size will not be set correctly and samplemask referencing may be incorrect. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input database to read from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="510" column="1" bodyfile="necsim/Community.cpp" bodystart="643" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a389c35f39ed73eb1e5dc1476c220c140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::openSqlConnection</definition>
        <argsstring>(string inputfile)</argsstring>
        <name>openSqlConnection</name>
        <param>
          <type>string</type>
          <declname>inputfile</declname>
        </param>
        <briefdescription>
<para>Opens the connection to the sql database file Note that this imports the database to memory, so functionality should be changed for extremely large database files. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the sql database output from a NECSim simulation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="518" column="1" bodyfile="necsim/Community.cpp" bodystart="665" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1acba6b894e62ad4ecccbcf86f064ebc46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::setInternalDatabase</definition>
        <argsstring>()</argsstring>
        <name>setInternalDatabase</name>
        <briefdescription>
<para>Opens a connection to an in-memory database. This will eventually be written to the output file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="523" column="1" bodyfile="necsim/Community.cpp" bodystart="714" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a527f03120e4cb211e466cab7e405ba9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::internalOption</definition>
        <argsstring>()</argsstring>
        <name>internalOption</name>
        <briefdescription>
<para>Internally sets the file referencing, data import and sql connection flags to true, for allowing checks to pass from internal object creation (so no external files are needed) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="529" column="1" bodyfile="necsim/Community.cpp" bodystart="725" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a85db7255d3a1d53509ed2800fc24de31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::importData</definition>
        <argsstring>(string inputfile)</argsstring>
        <name>importData</name>
        <param>
          <type>string</type>
          <declname>inputfile</declname>
        </param>
        <briefdescription>
<para>Imports the data from the desired SQL database object into the array. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Opens the sql connection if it has not already been opened. </para></simplesect>
<simplesect kind="note"><para>If nodes is not of length 0, this function does nothing. This is so that any in-memory data is not overwritten. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input SQLite database. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="538" column="1" bodyfile="necsim/Community.cpp" bodystart="733" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a1cbe1518ba094d2f813550fd46a1f464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::setSimParameters</definition>
        <argsstring>(const SimParameters *sim_parameters)</argsstring>
        <name>setSimParameters</name>
        <param>
          <type>const <ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref> *</type>
          <declname>sim_parameters</declname>
        </param>
        <briefdescription>
<para>Sets the simulation parameters from a <ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sim_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the <ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref> object to set from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="544" column="1" bodyfile="necsim/Community.cpp" bodystart="1639" bodyend="1666"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a548d36e99e592f0bfc09c8315b27f8bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::importSimParameters</definition>
        <argsstring>(string file)</argsstring>
        <name>importSimParameters</name>
        <param>
          <type>string</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Imports the simulation parameters by reading the SIMULATION_PARAMETERS table in the provided file. This imports the grid_x_size, grid_y_size (which should also be the sample map dimensions) and the minimum speciation rate. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Opens the sql connection if it has not already been opened.</para></simplesect>
<simplesect kind="note"><para>If bDataImport has already been set, no operation is performed.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>the sqlite database simulation output which will be used for coalescence tree generation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="557" column="1" bodyfile="necsim/Community.cpp" bodystart="1668" bodyend="1740"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a88a36fd7a14c3e88af377891e01bba21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Community::isSetDatabase</definition>
        <argsstring>()</argsstring>
        <name>isSetDatabase</name>
        <briefdescription>
<para>Gets if the database has been set yet. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the database is already set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="563" column="1" bodyfile="necsim/Community.cpp" bodystart="1742" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a8ac0ce642595283f342c2f1841f4c20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::getMaxSpeciesAbundancesID</definition>
        <argsstring>()</argsstring>
        <name>getMaxSpeciesAbundancesID</name>
        <briefdescription>
<para>Gets the maximum species abundance ID from the database and stores it in the max_species_id variable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Does not check for SPECIES_ABUNDANCES existence and will throw an error if it cannot access it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="569" column="1" bodyfile="necsim/Community.cpp" bodystart="838" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a51d90183f6a26e7d192abfd748945f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; unsigned long &gt; *</type>
        <definition>Row&lt; unsigned long &gt; * Community::getCumulativeAbundances</definition>
        <argsstring>()</argsstring>
        <name>getCumulativeAbundances</name>
        <briefdescription>
<para>Changes the rOut object so that values represent cummulative species abundances. </para>        </briefdescription>
        <detaileddescription>
<para>Allows binary sort on rOut (much faster) and the previous rOut value can be obtained by value = rOut[i] - rOut[i-1] <simplesect kind="return"><para>pointer to sorted <ref refid="class_row" kindref="compound">Row</ref> of species abundances </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="578" column="1" bodyfile="necsim/Community.cpp" bodystart="858" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a63fd8d32af6d52d009d1fd54098e4594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; unsigned long &gt;</type>
        <definition>Row&lt; unsigned long &gt; Community::getRowOut</definition>
        <argsstring>()</argsstring>
        <name>getRowOut</name>
        <briefdescription>
<para>Returns the row_out object, which should contain species abundances or cumulative abundances. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Does not recalculate species abundances, so if getCumulativeAbundances has been called, will return the cumulative species abundances instead. </para></simplesect>
<simplesect kind="note"><para>Returns a copy, so could cause problems for extremely large simulations with immense numbers of species. </para></simplesect>
<simplesect kind="return"><para>row_out, the species abundances, or the cumulative abundances if getCumulativeAbundances has been called </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="587" column="1" bodyfile="necsim/Community.cpp" bodystart="869" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a8523432488d6586521c5994cad4215d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Community::getSpeciesNumber</definition>
        <argsstring>()</argsstring>
        <name>getSpeciesNumber</name>
        <briefdescription>
<para>Gets the number of species in the most recent calculation. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of species in the most recent calculation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="593" column="1" bodyfile="necsim/Community.cpp" bodystart="874" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1af6fe28e1047ed5b56fde833e4b2b30de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::getMaxFragmentAbundancesID</definition>
        <argsstring>()</argsstring>
        <name>getMaxFragmentAbundancesID</name>
        <briefdescription>
<para>Gets the maximum fragment abundance ID from the database and stores it in the max_fragment_id variable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Does not check for FRAGMENT_ABUNDANCES existence and will throw an error if it cannot access it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="599" column="1" bodyfile="necsim/Community.cpp" bodystart="899" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a04d65ed53ea9e2cb6ce02dddccf3d33e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::getMaxSpeciesLocationsID</definition>
        <argsstring>()</argsstring>
        <name>getMaxSpeciesLocationsID</name>
        <briefdescription>
<para>Gets the maximum species locations ID from the database and stores it in the max_locations_id variable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Does not check for SPECIES_LOCATIONS existence and will throw an error if it cannot access it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="606" column="1" bodyfile="necsim/Community.cpp" bodystart="879" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1aca6eb26336c882ac41601ef06495f421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::setProtractedParameters</definition>
        <argsstring>(const ProtractedSpeciationParameters &amp;protracted_params)</argsstring>
        <name>setProtractedParameters</name>
        <param>
          <type>const <ref refid="struct_protracted_speciation_parameters" kindref="compound">ProtractedSpeciationParameters</ref> &amp;</type>
          <declname>protracted_params</declname>
        </param>
        <briefdescription>
<para>Sets the protracted parameters for application of protracted speciation. </para>        </briefdescription>
        <detaileddescription>
<para>This overloaded version is for setting protracted parameters before a full simulation has been outputted (i.e. immediately after completion of the simulation).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>protracted_params</parametername>
</parameternamelist>
<parameterdescription>
<para>protracted speciation parameters to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="616" column="1" bodyfile="necsim/Community.cpp" bodystart="1747" bodyend="1768"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a9fa7f842fc8b5bcd15d48010b1a58178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::overrideProtractedParameters</definition>
        <argsstring>(const ProtractedSpeciationParameters &amp;protracted_params)</argsstring>
        <name>overrideProtractedParameters</name>
        <param>
          <type>const <ref refid="struct_protracted_speciation_parameters" kindref="compound">ProtractedSpeciationParameters</ref> &amp;</type>
          <declname>protracted_params</declname>
        </param>
        <briefdescription>
<para>Overrides the protracted parameters for the <ref refid="class_community" kindref="compound">Community</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>protracted_params</parametername>
</parameternamelist>
<parameterdescription>
<para>the protracted parameters to override with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="622" column="1" bodyfile="necsim/Community.cpp" bodystart="1770" bodyend="1776"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a649afbf07398a1717ad49cb22bb744ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::setProtracted</definition>
        <argsstring>(bool protracted_in)</argsstring>
        <name>setProtracted</name>
        <param>
          <type>bool</type>
          <declname>protracted_in</declname>
        </param>
        <briefdescription>
<para>Sets the protracted boolean to the input. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>protracted_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the protracted boolean to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="629" column="1" bodyfile="necsim/Community.cpp" bodystart="1778" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1ad6e92dafaf00fd65cc29ca436dc61a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::createDatabase</definition>
        <argsstring>()</argsstring>
        <name>createDatabase</name>
        <briefdescription>
<para>Creates a new table in the database file and outputs the database object to the same file as the input file. Calculates the community structure for the set of community parameters in current_community_parameters. </para>        </briefdescription>
        <detaileddescription>
<para>The new SPECIES_ABUNDANCES table contains the species abundance distribution for the whole samplemask. A similar tabe FRAGMENT_ABUNDANCES is generated by <ref refid="class_community_1ad6515ff43ea8189a1acdcccfe893bbba" kindref="member">createFragmentDatabase()</ref> if specified via the command line parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="639" column="1" bodyfile="necsim/Community.cpp" bodystart="919" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a078a9a1210d6b7e8f6f378891f7e8b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::generateCoalescenceTree</definition>
        <argsstring>()</argsstring>
        <name>generateCoalescenceTree</name>
        <briefdescription>
<para>Calls calcSpecies and calcSpeciesAbundances to generate the coalescence tree and calculate species abundances. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="645" column="1" bodyfile="necsim/Community.cpp" bodystart="938" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a8cb8044c6b2e290e7933cbc78d7019be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::outputSpeciesAbundances</definition>
        <argsstring>()</argsstring>
        <name>outputSpeciesAbundances</name>
        <briefdescription>
<para>Outputs the species abundances into the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="650" column="1" bodyfile="necsim/Community.cpp" bodystart="965" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a8f2a0b27685c335606ba3971c4438fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Community::checkCalculationsPerformed</definition>
        <argsstring>(long double speciation_rate, double time, bool fragments, unsigned long metacommunity_size, long double metacommunity_speciation_rate, ProtractedSpeciationParameters proc_parameters)</argsstring>
        <name>checkCalculationsPerformed</name>
        <param>
          <type>long double</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fragments</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>metacommunity_size</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>metacommunity_speciation_rate</declname>
        </param>
        <param>
          <type><ref refid="struct_protracted_speciation_parameters" kindref="compound">ProtractedSpeciationParameters</ref></type>
          <declname>proc_parameters</declname>
        </param>
        <briefdescription>
<para>Checks if calculations with the given set of parameters has already been performed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to check for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to check for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragments</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, checks fragments have been used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity size to check for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity speciation rate to check for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>protracted speciation parameters to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="662" column="1" bodyfile="necsim/Community.cpp" bodystart="1051" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a118e3a4f337468b21a420f993e9983e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::addCalculationPerformed</definition>
        <argsstring>(long double speciation_rate, double time, bool fragments, unsigned long metacommunity_size, long double metacommunity_speciation_rate, const ProtractedSpeciationParameters &amp;protracted_params)</argsstring>
        <name>addCalculationPerformed</name>
        <param>
          <type>long double</type>
          <declname>speciation_rate</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fragments</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>metacommunity_size</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>metacommunity_speciation_rate</declname>
        </param>
        <param>
          <type>const <ref refid="struct_protracted_speciation_parameters" kindref="compound">ProtractedSpeciationParameters</ref> &amp;</type>
          <declname>protracted_params</declname>
        </param>
        <briefdescription>
<para>Adds a performed calculation to the lists of calculations. Also sets the current_community_parameters pointer to the set of parameters to be applied. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate of the performed calculation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>the time of the performed calculation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragments</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, fragments were used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity size of the performed calculation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metacommunity_speciation_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the metacommunity speciation rate of the performed calculation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>protracted_params</parametername>
</parameternamelist>
<parameterdescription>
<para>protracted speciation parameters to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="677" column="1" bodyfile="necsim/Community.cpp" bodystart="1909" bodyend="1940"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1ad6515ff43ea8189a1acdcccfe893bbba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::createFragmentDatabase</definition>
        <argsstring>(const Fragment &amp;f)</argsstring>
        <name>createFragmentDatabase</name>
        <param>
          <type>const <ref refid="struct_fragment" kindref="compound">Fragment</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Creates a new table in the database file and outputs the database object to the same file as the input file. Essentially creates a species abundance distribution (as in <ref refid="class_community_1ad6e92dafaf00fd65cc29ca436dc61a2e" kindref="member">createDatabase()</ref>), but for the specified fragment within the samplemask. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_fragment" kindref="compound">Fragment</ref> to sample from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="687" column="1" bodyfile="necsim/Community.cpp" bodystart="1085" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a280850bd6077692755cc419028aa5d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::exportDatabase</definition>
        <argsstring>()</argsstring>
        <name>exportDatabase</name>
        <briefdescription>
<para>Output the database from memory to the database file. Most of the time, it is desirable for the outputfile to be the same path as the input file and will write to the same object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="694" column="1" bodyfile="necsim/Community.cpp" bodystart="1152" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a23b9398df3a63c75d01e3ed3982432c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Community::checkSpeciesLocationsReference</definition>
        <argsstring>()</argsstring>
        <name>checkSpeciesLocationsReference</name>
        <briefdescription>
<para>Checks for the current <ref refid="struct_community_parameters" kindref="compound">CommunityParameters</ref> reference in the SPECIES_LOCATIONS table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the reference exists in the SPECIES_LOCATIONS table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="700" column="1" bodyfile="necsim/Community.cpp" bodystart="1217" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a5b2236c98b613c0ec96998bd932101f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Community::checkSpeciesAbundancesReference</definition>
        <argsstring>()</argsstring>
        <name>checkSpeciesAbundancesReference</name>
        <briefdescription>
<para>Checks for the current <ref refid="struct_community_parameters" kindref="compound">CommunityParameters</ref> reference in the SPECIES_ABUNDANCES table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return true if the reference exists in the SPECIES_LOCATIONS table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="706" column="1" bodyfile="necsim/Community.cpp" bodystart="1237" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a08be240fddc6ea481014567276a84dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::recordSpatial</definition>
        <argsstring>()</argsstring>
        <name>recordSpatial</name>
        <briefdescription>
<para>Record the full spatial data. Creates a new table, SPECIES_LOCATIONS containing every species and their parameters. This allows for more in-depth analysis to be performed if necessary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="713" column="1" bodyfile="necsim/Community.cpp" bodystart="1257" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1ac9433a0c34911ec1128b5459f61488fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::calcFragments</definition>
        <argsstring>(string fragment_file)</argsstring>
        <name>calcFragments</name>
        <param>
          <type>string</type>
          <declname>fragment_file</declname>
        </param>
        <briefdescription>
<para>Calculates the limits of each fragment in the sample map and adds it to the vector of fragments. If the fragment_file is null, then the program will attempt to calculate fragments from the map. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="bug_1_bug000002"><xreftitle>Bug</xreftitle><xrefdescription><para>Only rectangular fragments will be detected. Problems will also be encountered for adjacent fragments. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fragment_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the fragment file to read from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="721" column="1" bodyfile="necsim/Community.cpp" bodystart="1342" bodyend="1596"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a706aba5b07c98849cb2b4b0318488f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::applyFragments</definition>
        <argsstring>()</argsstring>
        <name>applyFragments</name>
        <briefdescription>
<para>Calculate species abundances for each fragment, and call <ref refid="class_community_1ad6515ff43ea8189a1acdcccfe893bbba" kindref="member">createFragmentDatabase()</ref> for each <ref refid="struct_fragment" kindref="compound">Fragment</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="726" column="1" bodyfile="necsim/Community.cpp" bodystart="1598" bodyend="1637"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a24c425f32b1e3b10227e2d04cbacfe31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::getPreviousCalcs</definition>
        <argsstring>()</argsstring>
        <name>getPreviousCalcs</name>
        <briefdescription>
<para>Gets the previous calculations that have already been performed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="731" column="1" bodyfile="necsim/Community.cpp" bodystart="1783" bodyend="1907"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1aed61108d8c4fd42d39a9112c5062cad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; unsigned long &gt;</type>
        <definition>vector&lt; unsigned long &gt; Community::getUniqueCommunityRefs</definition>
        <argsstring>()</argsstring>
        <name>getUniqueCommunityRefs</name>
        <briefdescription>
<para>Gets the unique community references from the SQL database. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector containing the unique references </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="737" column="1" bodyfile="necsim/Community.cpp" bodystart="1942" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a257e8e3dce33b235985ed9d167817a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; unsigned long &gt;</type>
        <definition>vector&lt; unsigned long &gt; Community::getUniqueMetacommunityRefs</definition>
        <argsstring>()</argsstring>
        <name>getUniqueMetacommunityRefs</name>
        <briefdescription>
<para>Gets the unique metacommunity reference from the SQL database. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector containing the unique references </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="743" column="1" bodyfile="necsim/Community.cpp" bodystart="1991" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1afbc8709084a00a7450e3a168cb016db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::writeNewCommunityParameters</definition>
        <argsstring>()</argsstring>
        <name>writeNewCommunityParameters</name>
        <briefdescription>
<para>Write all performed calculations to the output database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="748" column="1" bodyfile="necsim/Community.cpp" bodystart="2041" bodyend="2132"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1ac900c23ffe2572504fca11f20b7ba8cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::writeNewMetacommuntyParameters</definition>
        <argsstring>()</argsstring>
        <name>writeNewMetacommuntyParameters</name>
        <briefdescription>
<para>Write all performed calculations to the output database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="753" column="1" bodyfile="necsim/Community.cpp" bodystart="2134" bodyend="2217"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1af3f5939bfb59fdf3b7d7b5f3699bd225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::updateCommunityParameters</definition>
        <argsstring>()</argsstring>
        <name>updateCommunityParameters</name>
        <briefdescription>
<para>Updates the fragments tag on those simulations which now have had fragments added. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="758" column="1" bodyfile="necsim/Community.cpp" bodystart="2219" bodyend="2245"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1adcfc04e92cbb597682dcc1f2913d6668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::writeSpeciationRates</definition>
        <argsstring>()</argsstring>
        <name>writeSpeciationRates</name>
        <briefdescription>
<para>Prints speciation rates to terminal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="763" column="1" bodyfile="necsim/Community.cpp" bodystart="2247" bodyend="2291"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1adfa9a1c84bb326092805614ad195fcdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::calculateTree</definition>
        <argsstring>()</argsstring>
        <name>calculateTree</name>
        <briefdescription>
<para>Calculates the coalescence tree for each set of parameters in speciation_parameters;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="768" column="1" bodyfile="necsim/Community.cpp" bodystart="2293" bodyend="2338"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1ad2483623c7ad7a11564fc49305204585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::output</definition>
        <argsstring>()</argsstring>
        <name>output</name>
        <briefdescription>
<para>Outputs the data to the SQL database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="773" column="1" bodyfile="necsim/Community.cpp" bodystart="2340" bodyend="2346"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a36216913433e3e011ee2420e83e1fe4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::printEndTimes</definition>
        <argsstring>(time_t tStart, time_t tEnd)</argsstring>
        <name>printEndTimes</name>
        <param>
          <type>time_t</type>
          <declname>tStart</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>tEnd</declname>
        </param>
        <briefdescription>
<para>Prints the application times. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tStart</parametername>
</parameternamelist>
<parameterdescription>
<para>the start time </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>the end time </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="780" column="1" bodyfile="necsim/Community.cpp" bodystart="2348" bodyend="2357"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1ac1dee14af27a0add712e257e316cadbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::apply</definition>
        <argsstring>(SpecSimParameters *sp)</argsstring>
        <name>apply</name>
        <param>
          <type><ref refid="struct_spec_sim_parameters" kindref="compound">SpecSimParameters</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Apply the given speciation parameters to the coalescence tree. Overridden for metacommunity application. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>speciation parameters to apply, including speciation rate, times and spatial sampling procedure </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="787" column="1" bodyfile="necsim/Community.cpp" bodystart="2359" bodyend="2368"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a8ce443a30731d2249852d2b615f4a29a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::doApplication</definition>
        <argsstring>(SpecSimParameters *sp)</argsstring>
        <name>doApplication</name>
        <param>
          <type><ref refid="struct_spec_sim_parameters" kindref="compound">SpecSimParameters</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Creates the coalescence tree for the given speciation parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>speciation parameters to apply, including speciation rate, times and spatial sampling procedure </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="799" column="1" bodyfile="necsim/Community.cpp" bodystart="2377" bodyend="2381"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1a7289dd39ee9b69ca314e1752a7b45701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::doApplication</definition>
        <argsstring>(SpecSimParameters *sp, Row&lt; TreeNode &gt; *data)</argsstring>
        <name>doApplication</name>
        <param>
          <type><ref refid="struct_spec_sim_parameters" kindref="compound">SpecSimParameters</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type><ref refid="class_row" kindref="compound">Row</ref>&lt; <ref refid="class_tree_node" kindref="compound">TreeNode</ref> &gt; *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Creates the coalescence tree for the given speciation parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>speciation parameters to apply, including speciation rate, times and spatial sampling procedure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_row" kindref="compound">Row</ref> of TreeNodes that contains the coalescence tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="806" column="1" bodyfile="necsim/Community.cpp" bodystart="2383" bodyend="2398"/>
      </memberdef>
      <memberdef kind="function" id="class_community_1aee7488d02cccb897ed1d561e242391df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Community::doApplicationInternal</definition>
        <argsstring>(SpecSimParameters *sp, Row&lt; TreeNode &gt; *data)</argsstring>
        <name>doApplicationInternal</name>
        <param>
          <type><ref refid="struct_spec_sim_parameters" kindref="compound">SpecSimParameters</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type><ref refid="class_row" kindref="compound">Row</ref>&lt; <ref refid="class_tree_node" kindref="compound">TreeNode</ref> &gt; *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Creates the coalescence tree for the given speciation parameters, using internal file referencing to avoid any actual file creation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>speciation parameters to apply, including speciation rate, times and spatial sampling procedure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_row" kindref="compound">Row</ref> of TreeNodes that contains the coalescence tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Community.h" line="814" column="1" bodyfile="necsim/Community.cpp" bodystart="2400" bodyend="2405"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generates a metacommunity using spatially-implicit neutral simulations, which is used to draw individuals from a community. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="592">
        <label>Metacommunity</label>
        <link refid="class_metacommunity"/>
        <childnode refid="593" relation="public-inheritance">
        </childnode>
      </node>
      <node id="593">
        <label>Community</label>
        <link refid="class_community"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="612">
        <label>Row&lt; double &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="622">
        <label>std::vector&lt; long double &gt;</label>
      </node>
      <node id="623">
        <label>Step</label>
        <link refid="struct_step"/>
      </node>
      <node id="604">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="615">
        <label>std::vector&lt; CommunityParameters &gt;</label>
        <childnode refid="601" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="594">
        <label>Metacommunity</label>
        <link refid="class_metacommunity"/>
        <childnode refid="595" relation="public-inheritance">
        </childnode>
        <childnode refid="620" relation="usage">
          <edgelabel>random</edgelabel>
        </childnode>
        <childnode refid="621" relation="usage">
          <edgelabel>metacommunity_tree</edgelabel>
        </childnode>
        <childnode refid="619" relation="usage">
          <edgelabel>metacommunity_cumulative_abundances</edgelabel>
        </childnode>
      </node>
      <node id="619">
        <label>Row&lt; unsigned long &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="601">
        <label>CommunityParameters</label>
        <link refid="struct_community_parameters"/>
        <childnode refid="600" relation="usage">
          <edgelabel>protracted_parameters</edgelabel>
        </childnode>
      </node>
      <node id="609">
        <label>Row&lt; bool &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="624">
        <label>Row&lt; DataPoint &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="626">
        <label>ConfigOption</label>
        <link refid="class_config_option"/>
      </node>
      <node id="595">
        <label>Community</label>
        <link refid="class_community"/>
        <childnode refid="596" relation="usage">
          <edgelabel>fragments</edgelabel>
        </childnode>
        <childnode refid="600" relation="usage">
          <edgelabel>applied_protracted_parameters</edgelabel>
        </childnode>
        <childnode refid="601" relation="usage">
          <edgelabel>current_community_parameters</edgelabel>
        </childnode>
        <childnode refid="602" relation="usage">
          <edgelabel>spec_sim_parameters</edgelabel>
        </childnode>
        <childnode refid="605" relation="usage">
          <edgelabel>samplemask</edgelabel>
        </childnode>
        <childnode refid="613" relation="usage">
          <edgelabel>nodes</edgelabel>
        </childnode>
        <childnode refid="614" relation="usage">
          <edgelabel>past_communities</edgelabel>
        </childnode>
        <childnode refid="616" relation="usage">
          <edgelabel>past_metacommunities</edgelabel>
        </childnode>
        <childnode refid="619" relation="usage">
          <edgelabel>row_out</edgelabel>
        </childnode>
      </node>
      <node id="607">
        <label>Map&lt; bool &gt;</label>
        <link refid="class_map"/>
        <childnode refid="608" relation="public-inheritance">
        </childnode>
        <childnode refid="598" relation="usage">
          <edgelabel>filename</edgelabel>
        </childnode>
      </node>
      <node id="599">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="617">
        <label>std::vector&lt; MetacommunityParameters &gt;</label>
        <childnode refid="618" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="621">
        <label>Tree</label>
        <link refid="class_tree"/>
        <childnode refid="595" relation="usage">
          <edgelabel>community</edgelabel>
        </childnode>
        <childnode refid="622" relation="usage">
          <edgelabel>speciation_rates</edgelabel>
        </childnode>
        <childnode refid="623" relation="usage">
          <edgelabel>this_step</edgelabel>
        </childnode>
        <childnode refid="598" relation="usage">
          <edgelabel>times_file</edgelabel>
          <edgelabel>pause_sim_directory</edgelabel>
          <edgelabel>sql_output_database</edgelabel>
          <edgelabel>out_directory</edgelabel>
        </childnode>
        <childnode refid="620" relation="usage">
          <edgelabel>NR</edgelabel>
        </childnode>
        <childnode refid="613" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="624" relation="usage">
          <edgelabel>active</edgelabel>
        </childnode>
        <childnode refid="604" relation="usage">
          <edgelabel>reference_times</edgelabel>
        </childnode>
        <childnode refid="625" relation="usage">
          <edgelabel>sim_parameters</edgelabel>
        </childnode>
      </node>
      <node id="620">
        <label>NRrand</label>
        <link refid="class_n_rrand"/>
      </node>
      <node id="618">
        <label>MetacommunityParameters</label>
        <link refid="struct_metacommunity_parameters"/>
      </node>
      <node id="602">
        <label>SpecSimParameters</label>
        <link refid="struct_spec_sim_parameters"/>
        <childnode refid="603" relation="usage">
          <edgelabel>protracted_parameters</edgelabel>
        </childnode>
        <childnode refid="598" relation="usage">
          <edgelabel>times_file</edgelabel>
          <edgelabel>fragment_config_file</edgelabel>
          <edgelabel>samplemask</edgelabel>
          <edgelabel>filename</edgelabel>
        </childnode>
        <childnode refid="604" relation="usage">
          <edgelabel>all_times</edgelabel>
          <edgelabel>all_speciation_rates</edgelabel>
        </childnode>
      </node>
      <node id="600">
        <label>ProtractedSpeciationParameters</label>
        <link refid="struct_protracted_speciation_parameters"/>
      </node>
      <node id="610">
        <label>Map&lt; double &gt;</label>
        <link refid="class_map"/>
        <childnode refid="611" relation="public-inheritance">
        </childnode>
        <childnode refid="598" relation="usage">
          <edgelabel>filename</edgelabel>
        </childnode>
      </node>
      <node id="613">
        <label>Row&lt; TreeNode &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="625">
        <label>SimParameters</label>
        <link refid="struct_sim_parameters"/>
        <childnode refid="626" relation="usage">
          <edgelabel>configs</edgelabel>
        </childnode>
        <childnode refid="598" relation="usage">
          <edgelabel>reproduction_file</edgelabel>
          <edgelabel>times_file</edgelabel>
          <edgelabel>sample_mask_file</edgelabel>
          <edgelabel>fine_map_file</edgelabel>
          <edgelabel>dispersal_method</edgelabel>
          <edgelabel>dispersal_file</edgelabel>
          <edgelabel>historical_fine_map_file</edgelabel>
          <edgelabel>historical_coarse_map_file</edgelabel>
          <edgelabel>output_directory</edgelabel>
          <edgelabel>coarse_map_file</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="604" relation="usage">
          <edgelabel>times</edgelabel>
        </childnode>
      </node>
      <node id="605">
        <label>Samplematrix</label>
        <link refid="class_samplematrix"/>
        <childnode refid="606" relation="public-inheritance">
        </childnode>
      </node>
      <node id="608">
        <label>Matrix&lt; bool &gt;</label>
        <link refid="class_matrix"/>
        <childnode refid="609" relation="usage">
          <edgelabel>matrix</edgelabel>
        </childnode>
      </node>
      <node id="606">
        <label>DataMask</label>
        <link refid="class_data_mask"/>
        <childnode refid="607" relation="usage">
          <edgelabel>sample_mask</edgelabel>
        </childnode>
        <childnode refid="598" relation="usage">
          <edgelabel>inputfile</edgelabel>
        </childnode>
        <childnode refid="610" relation="usage">
          <edgelabel>sample_mask_exact</edgelabel>
        </childnode>
      </node>
      <node id="597">
        <label>Fragment</label>
        <link refid="struct_fragment"/>
        <childnode refid="598" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="614">
        <label>CommunitiesArray</label>
        <link refid="struct_communities_array"/>
        <childnode refid="615" relation="usage">
          <edgelabel>communityParameters</edgelabel>
        </childnode>
      </node>
      <node id="611">
        <label>Matrix&lt; double &gt;</label>
        <link refid="class_matrix"/>
        <childnode refid="612" relation="usage">
          <edgelabel>matrix</edgelabel>
        </childnode>
      </node>
      <node id="616">
        <label>MetacommunitiesArray</label>
        <link refid="struct_metacommunities_array"/>
        <childnode refid="617" relation="usage">
          <edgelabel>calc_array</edgelabel>
        </childnode>
      </node>
      <node id="603">
        <label>std::vector&lt; ProtractedSpeciationParameters &gt;</label>
        <childnode refid="600" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="596">
        <label>std::vector&lt; Fragment &gt;</label>
        <childnode refid="597" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="598">
        <label>std::string</label>
        <childnode refid="599" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/Metacommunity.h" line="34" column="1" bodyfile="necsim/Metacommunity.h" bodystart="33" bodyend="102"/>
    <listofallmembers>
      <member refid="class_community_1a118e3a4f337468b21a420f993e9983e1" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>addCalculationPerformed</name></member>
      <member refid="class_metacommunity_1a8cad1a5648ff5b6b51f2441898fdad48" prot="public" virt="virtual"><scope>Metacommunity</scope><name>addSpecies</name></member>
      <member refid="class_community_1a28b02e78e3453599b678072b57a5ebf7" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>applied_protracted_parameters</name></member>
      <member refid="class_community_1ac1dee14af27a0add712e257e316cadbf" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>apply</name></member>
      <member refid="class_community_1a706aba5b07c98849cb2b4b0318488f99" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>applyFragments</name></member>
      <member refid="class_metacommunity_1ac9921c5bcae79db2a5a108598744ce26" prot="public" virt="virtual"><scope>Metacommunity</scope><name>applyNoOutput</name></member>
      <member refid="class_community_1aa9fe335ff9e94c626d1e0d41ff145524" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>bSqlConnection</name></member>
      <member refid="class_community_1ac9433a0c34911ec1128b5459f61488fc" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>calcFragments</name></member>
      <member refid="class_community_1a241f69d1f69e61fc53c112fd874bf3ba" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>calcSpecies</name></member>
      <member refid="class_community_1a502a409a75567d78575625346b6a969f" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>calcSpeciesAbundance</name></member>
      <member refid="class_community_1adfa9a1c84bb326092805614ad195fcdd" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>calculateTree</name></member>
      <member refid="class_community_1a8f2a0b27685c335606ba3971c4438fab" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>checkCalculationsPerformed</name></member>
      <member refid="class_metacommunity_1ad3775b6cecab860b008d15cc9c7650ea" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>checkSimulationParameters</name></member>
      <member refid="class_community_1a5b2236c98b613c0ec96998bd932101f5" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>checkSpeciesAbundancesReference</name></member>
      <member refid="class_community_1a23b9398df3a63c75d01e3ed3982432c2" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>checkSpeciesLocationsReference</name></member>
      <member refid="class_community_1a7697e887d12366a6953fe7439d978768" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>Community</name></member>
      <member refid="class_community_1a995bd6adbfb7a4aad1bc5fb74e2a8ef2" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>Community</name></member>
      <member refid="class_metacommunity_1a3b392090e764ffb2ada3881e4eddd0b1" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>community_size</name></member>
      <member refid="class_community_1a07970398c04e7c31ceda695c2860e20f" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>countSpecies</name></member>
      <member refid="class_community_1ad6e92dafaf00fd65cc29ca436dc61a2e" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>createDatabase</name></member>
      <member refid="class_community_1ad6515ff43ea8189a1acdcccfe893bbba" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>createFragmentDatabase</name></member>
      <member refid="class_metacommunity_1a2557f1dc48f4a7aba97431ac8a8c7dbd" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>createMetacommunityNSENeutralModel</name></member>
      <member refid="class_community_1a77e925f82bee5441d8ec45406066dcfb" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>current_community_parameters</name></member>
      <member refid="class_community_1a382c0e6e90ca8055d3192bfe2af4d741" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>database</name></member>
      <member refid="class_community_1a7e00bcb1c5a24280346df94853e2919b" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>database_set</name></member>
      <member refid="class_community_1a579c5f423fc2461838a80baf6b396310" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>detectDimensions</name></member>
      <member refid="class_community_1a8ce443a30731d2249852d2b615f4a29a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>doApplication</name></member>
      <member refid="class_community_1a7289dd39ee9b69ca314e1752a7b45701" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>doApplication</name></member>
      <member refid="class_community_1aee7488d02cccb897ed1d561e242391df" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>doApplicationInternal</name></member>
      <member refid="class_community_1a280850bd6077692755cc419028aa5d67" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>exportDatabase</name></member>
      <member refid="class_community_1a8a17909b92a0cec3b63cec41e92796cb" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>fragments</name></member>
      <member refid="class_community_1a078a9a1210d6b7e8f6f378891f7e8b86" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>generateCoalescenceTree</name></member>
      <member refid="class_community_1a51d90183f6a26e7d192abfd748945f2b" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getCumulativeAbundances</name></member>
      <member refid="class_community_1af6fe28e1047ed5b56fde833e4b2b30de" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getMaxFragmentAbundancesID</name></member>
      <member refid="class_community_1a8ac0ce642595283f342c2f1841f4c20f" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getMaxSpeciesAbundancesID</name></member>
      <member refid="class_community_1a04d65ed53ea9e2cb6ce02dddccf3d33e" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getMaxSpeciesLocationsID</name></member>
      <member refid="class_community_1a4e5dea65183810c3b27441736eca825a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getMinimumSpeciation</name></member>
      <member refid="class_community_1a24c425f32b1e3b10227e2d04cbacfe31" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getPreviousCalcs</name></member>
      <member refid="class_community_1a63fd8d32af6d52d009d1fd54098e4594" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getRowOut</name></member>
      <member refid="class_community_1a8523432488d6586521c5994cad4215d8" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getSpeciesNumber</name></member>
      <member refid="class_community_1aed61108d8c4fd42d39a9112c5062cad4" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getUniqueCommunityRefs</name></member>
      <member refid="class_community_1a257e8e3dce33b235985ed9d167817a89" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getUniqueMetacommunityRefs</name></member>
      <member refid="class_community_1a383dba82c8c76bf5c130c2bf4ac057e5" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>grid_x_size</name></member>
      <member refid="class_community_1a308d12fa4ef95015860d4181b075c93f" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>grid_y_size</name></member>
      <member refid="class_community_1a0371c39658281c8956c29c6b2d564b79" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>has_imported_data</name></member>
      <member refid="class_community_1a6c3c70184f586330635a4123699f586f" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>has_imported_samplemask</name></member>
      <member refid="class_community_1a045f762ca30c3a20e8ef5911a4982160" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>hasImportedData</name></member>
      <member refid="class_community_1a85db7255d3a1d53509ed2800fc24de31" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>importData</name></member>
      <member refid="class_community_1a01a137383e1e23f2191d63f16513a00a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>importSamplemask</name></member>
      <member refid="class_community_1a548d36e99e592f0bfc09c8315b27f8bb" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>importSimParameters</name></member>
      <member refid="class_community_1abc144eeba19574b6b46df384a61acc6f" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>in_mem</name></member>
      <member refid="class_community_1a527f03120e4cb211e466cab7e405ba9a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>internalOption</name></member>
      <member refid="class_community_1a094f10ce5bbbcab19bccda352f545aad" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>iSpecies</name></member>
      <member refid="class_community_1a88a36fd7a14c3e88af377891e01bba21" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>isSetDatabase</name></member>
      <member refid="class_community_1a5de3afc536570241b82489d1b9c87d03" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>max_fragment_id</name></member>
      <member refid="class_community_1ae503af91bc33ed302a363098a3b49a61" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>max_locations_id</name></member>
      <member refid="class_community_1aeff6623b51fdd177e87b6eebfba27080" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>max_speciation_gen</name></member>
      <member refid="class_community_1a31f80e452a92aabdf2d9ba7bcc798f84" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>max_species_id</name></member>
      <member refid="class_metacommunity_1ae9f7d7ea2b20471a330b10db37a15342" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>Metacommunity</name></member>
      <member refid="class_metacommunity_1ae9ef6b36732d3269baef697b5341c0b9" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>metacommunity_cumulative_abundances</name></member>
      <member refid="class_metacommunity_1a85e91103025feb641bf0df9d02152b99" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>metacommunity_tree</name></member>
      <member refid="class_community_1a9dc6f7d4ab75b382be85c2b74edac6b7" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>min_spec_rate</name></member>
      <member refid="class_community_1a6b906ec2096b22631b60aa3511925fe0" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>min_speciation_gen</name></member>
      <member refid="class_community_1aa1309616989642b98c15e6e2ed25b379" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>nodes</name></member>
      <member refid="class_community_1a389c35f39ed73eb1e5dc1476c220c140" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>openSqlConnection</name></member>
      <member refid="class_community_1a884634e98e0aacb082968664acd5a32e" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>outdatabase</name></member>
      <member refid="class_community_1ad2483623c7ad7a11564fc49305204585" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>output</name></member>
      <member refid="class_community_1a8cb8044c6b2e290e7933cbc78d7019be" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>outputSpeciesAbundances</name></member>
      <member refid="class_community_1a9fa7f842fc8b5bcd15d48010b1a58178" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>overrideProtractedParameters</name></member>
      <member refid="class_metacommunity_1a8b0ca689c1c638e49424d59fadb2e28d" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>parameters_checked</name></member>
      <member refid="class_community_1a0726a962287af565658aaa8f9d9ea6c1" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>past_communities</name></member>
      <member refid="class_community_1ae00d8d9f52d163b040cc716955569ad3" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>past_metacommunities</name></member>
      <member refid="class_community_1a36216913433e3e011ee2420e83e1fe4a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>printEndTimes</name></member>
      <member refid="class_community_1acab5a676e365934f9dfd2148ab9d5a60" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>protracted</name></member>
      <member refid="class_metacommunity_1aa47b2ff3f6944143f8e734d0988d2ff3" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>random</name></member>
      <member refid="class_community_1a08be240fddc6ea481014567276a84dd0" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>recordSpatial</name></member>
      <member refid="class_community_1abd099aacb5332a9b89b3421e01269d24" prot="public" virt="virtual"><scope>Metacommunity</scope><name>resetTree</name></member>
      <member refid="class_community_1a06e5a133792f29fa17a1b0664d650541" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>row_out</name></member>
      <member refid="class_community_1ac7434119a77086e3b38a4a94c8fbff01" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>samplemask</name></member>
      <member refid="class_community_1ac4985481c86bd62a50fa946699867216" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>samplemask_x_offset</name></member>
      <member refid="class_community_1a960bb6bb58eaec017d36d16cb3a3bc8a" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>samplemask_x_size</name></member>
      <member refid="class_community_1aeaebe975a46d62b70380e50ff7ebd09a" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>samplemask_y_offset</name></member>
      <member refid="class_community_1a10722b2fe8855460946f04f0ae69fd74" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>samplemask_y_size</name></member>
      <member refid="class_metacommunity_1afd81750697ac8540b71de001ee53fc61" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>seed</name></member>
      <member refid="class_metacommunity_1ac1884bfd79b272d8dcb470f34f579cf1" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>selectLineageFromMetacommunity</name></member>
      <member refid="class_metacommunity_1af9407da2a2e99848ac11ce3a426d4c8a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setCommunityParameters</name></member>
      <member refid="class_community_1a6fe2fdb93911f403dd879ca2847e4933" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setDatabase</name></member>
      <member refid="class_community_1acba6b894e62ad4ecccbcf86f064ebc46" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setInternalDatabase</name></member>
      <member refid="class_community_1a710a402dffa1b85183dd7f4a5a44f988" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setList</name></member>
      <member refid="class_community_1a649afbf07398a1717ad49cb22bb744ff" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setProtracted</name></member>
      <member refid="class_community_1aca6eb26336c882ac41601ef06495f421" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setProtractedParameters</name></member>
      <member refid="class_community_1a1cbe1518ba094d2f813550fd46a1f464" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setSimParameters</name></member>
      <member refid="class_community_1a45df8aefb9914e7c8f3133143069ca35" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>spec_sim_parameters</name></member>
      <member refid="class_metacommunity_1aad4378b40264345fc6f5116aedc58c26" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>speciation_rate</name></member>
      <member refid="class_metacommunity_1a094dfd2d0bb737a1f5bd06ceb3c6da1f" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>task</name></member>
      <member refid="class_community_1af3f5939bfb59fdf3b7d7b5f3699bd225" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>updateCommunityParameters</name></member>
      <member refid="class_community_1afbc8709084a00a7450e3a168cb016db9" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>writeNewCommunityParameters</name></member>
      <member refid="class_community_1ac900c23ffe2572504fca11f20b7ba8cd" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>writeNewMetacommuntyParameters</name></member>
      <member refid="class_community_1adcfc04e92cbb597682dcc1f2913d6668" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>writeSpeciationRates</name></member>
      <member refid="class_community_1ac20910659d928af0dc4f7027bfece25c" prot="public" virt="virtual"><scope>Metacommunity</scope><name>~Community</name></member>
      <member refid="class_metacommunity_1a7ff34a367f64dfa466d597225eda8cc8" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>~Metacommunity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
