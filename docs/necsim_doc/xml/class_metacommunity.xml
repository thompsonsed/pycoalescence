<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_metacommunity" kind="class" language="C++" prot="public">
    <compoundname>Metacommunity</compoundname>
    <basecompoundref refid="class_community" prot="public" virt="virtual">Community</basecompoundref>
    <includes refid="_metacommunity_8h" local="no">Metacommunity.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_metacommunity_1a3b392090e764ffb2ada3881e4eddd0b1" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Metacommunity::community_size</definition>
        <argsstring></argsstring>
        <name>community_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="38" column="1" bodyfile="necsim/Metacommunity.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1aad4378b40264345fc6f5116aedc58c26" prot="protected" static="no" mutable="no">
        <type>long double</type>
        <definition>long double Metacommunity::speciation_rate</definition>
        <argsstring></argsstring>
        <name>speciation_rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="40" column="1" bodyfile="necsim/Metacommunity.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1afd81750697ac8540b71de001ee53fc61" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Metacommunity::seed</definition>
        <argsstring></argsstring>
        <name>seed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="42" column="1" bodyfile="necsim/Metacommunity.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1a094dfd2d0bb737a1f5bd06ceb3c6da1f" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Metacommunity::task</definition>
        <argsstring></argsstring>
        <name>task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="43" column="1" bodyfile="necsim/Metacommunity.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1a8b0ca689c1c638e49424d59fadb2e28d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Metacommunity::parameters_checked</definition>
        <argsstring></argsstring>
        <name>parameters_checked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="44" column="1" bodyfile="necsim/Metacommunity.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1ae9ef6b36732d3269baef697b5341c0b9" prot="protected" static="no" mutable="no">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; unsigned long &gt; *</type>
        <definition>Row&lt;unsigned long&gt;* Metacommunity::metacommunity_cumulative_abundances</definition>
        <argsstring></argsstring>
        <name>metacommunity_cumulative_abundances</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="45" column="1" bodyfile="necsim/Metacommunity.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1aa47b2ff3f6944143f8e734d0988d2ff3" prot="protected" static="no" mutable="no">
        <type><ref refid="class_n_rrand" kindref="compound">NRrand</ref></type>
        <definition>NRrand Metacommunity::random</definition>
        <argsstring></argsstring>
        <name>random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="46" column="1" bodyfile="necsim/Metacommunity.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_metacommunity_1a85e91103025feb641bf0df9d02152b99" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tree" kindref="compound">Tree</ref></type>
        <definition>Tree Metacommunity::metacommunity_tree</definition>
        <argsstring></argsstring>
        <name>metacommunity_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="47" column="1" bodyfile="necsim/Metacommunity.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_metacommunity_1ae9f7d7ea2b20471a330b10db37a15342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Metacommunity::Metacommunity</definition>
        <argsstring>()</argsstring>
        <name>Metacommunity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="50" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="20" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1a41711a34f23904297adc63f6abf3a8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Metacommunity::~Metacommunity</definition>
        <argsstring>()=default</argsstring>
        <name>~Metacommunity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1af9407da2a2e99848ac11ce3a426d4c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Metacommunity::setCommunityParameters</definition>
        <argsstring>(unsigned long community_size_in, long double speciation_rate_in, string database_name_in)</argsstring>
        <name>setCommunityParameters</name>
        <param>
          <type>unsigned long</type>
          <declname>community_size_in</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>speciation_rate_in</declname>
        </param>
        <param>
          <type>string</type>
          <declname>database_name_in</declname>
        </param>
        <briefdescription>
<para>Sets the parameters for the metacommunity. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>community_size_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of individuals in the metacommunity </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speciation_rate_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to use for metacommunity creation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>database_name_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the database to store the metacommunity in </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="60" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="29" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1ad3775b6cecab860b008d15cc9c7650ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Metacommunity::checkSimulationParameters</definition>
        <argsstring>()</argsstring>
        <name>checkSimulationParameters</name>
        <briefdescription>
<para>Gets the seed and the task from the SIMULATION_PARAMETERS database and stores them in the relevant variables. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Should only be called once, and will have no effect if called multiple times. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="68" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="39" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1a8cad1a5648ff5b6b51f2441898fdad48" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Metacommunity::addSpecies</definition>
        <argsstring>(unsigned long &amp;species_count, TreeNode *tree_node, set&lt; unsigned long &gt; &amp;species_list) override</argsstring>
        <name>addSpecies</name>
        <reimplements refid="class_community_1a7a51d163ec40883125fde38e6e85e52e">addSpecies</reimplements>
        <param>
          <type>unsigned long &amp;</type>
          <declname>species_count</declname>
        </param>
        <param>
          <type><ref refid="class_tree_node" kindref="compound">TreeNode</ref> *</type>
          <declname>tree_node</declname>
        </param>
        <param>
          <type>set&lt; unsigned long &gt; &amp;</type>
          <declname>species_list</declname>
        </param>
        <briefdescription>
<para>Speciates <ref refid="class_tree_node" kindref="compound">TreeNode</ref> and updates the species count, including adding to the set of species ids, if a new species has been selected from the metacommunity. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>species_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the total number of species currently in the community </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tree_node</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the <ref refid="class_tree_node" kindref="compound">TreeNode</ref> object for this lineage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>species_list</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of all species ids. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="78" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="66" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1a2557f1dc48f4a7aba97431ac8a8c7dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Metacommunity::createMetacommunityNSENeutralModel</definition>
        <argsstring>()</argsstring>
        <name>createMetacommunityNSENeutralModel</name>
        <briefdescription>
<para>Creates the metacommunity in memory using a non-spatially_explicit neutral model, which is run using the <ref refid="class_tree" kindref="compound">Tree</ref> class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="84" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="78" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1ac1884bfd79b272d8dcb470f34f579cf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Metacommunity::selectLineageFromMetacommunity</definition>
        <argsstring>()</argsstring>
        <name>selectLineageFromMetacommunity</name>
        <briefdescription>
<para>Selects a random lineage from the metacommunity (rOut), which should be a cumulative sum of species abundances. Performs a binary search on rOut. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the species id for the lineage </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="92" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="103" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_metacommunity_1adf30667aa617bc969706eab2facd5482" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Metacommunity::apply</definition>
        <argsstring>(SpecSimParameters *sp) override</argsstring>
        <name>apply</name>
        <reimplements refid="class_community_1ac1dee14af27a0add712e257e316cadbf">apply</reimplements>
        <param>
          <type><ref refid="struct_spec_sim_parameters" kindref="compound">SpecSimParameters</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Applies the speciation parameters to the completed simulation, including running the spatially-implicit for the metacommunity structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation parameters to apply </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Metacommunity.h" line="99" column="1" bodyfile="necsim/Metacommunity.cpp" bodystart="146" bodyend="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generates a metacommunity using spatially-implicit neutral simulations, which is used to draw individuals from a community. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="442">
        <label>Metacommunity</label>
        <link refid="class_metacommunity"/>
        <childnode refid="443" relation="public-inheritance">
        </childnode>
      </node>
      <node id="443">
        <label>Community</label>
        <link refid="class_community"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="456">
        <label>Row&lt; double &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="468">
        <label>std::vector&lt; long double &gt;</label>
      </node>
      <node id="469">
        <label>Step</label>
        <link refid="struct_step"/>
      </node>
      <node id="452">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="461">
        <label>std::vector&lt; CommunityParameters &gt;</label>
        <childnode refid="450" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="444">
        <label>Metacommunity</label>
        <link refid="class_metacommunity"/>
        <childnode refid="445" relation="public-inheritance">
        </childnode>
        <childnode refid="466" relation="usage">
          <edgelabel>random</edgelabel>
        </childnode>
        <childnode refid="467" relation="usage">
          <edgelabel>metacommunity_tree</edgelabel>
        </childnode>
        <childnode refid="465" relation="usage">
          <edgelabel>metacommunity_cumulative_abundances</edgelabel>
        </childnode>
      </node>
      <node id="465">
        <label>Row&lt; unsigned long &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="450">
        <label>CommunityParameters</label>
        <link refid="struct_community_parameters"/>
      </node>
      <node id="458">
        <label>Row&lt; bool &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="470">
        <label>Row&lt; DataPoint &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="472">
        <label>ConfigOption</label>
        <link refid="class_config_option"/>
      </node>
      <node id="445">
        <label>Community</label>
        <link refid="class_community"/>
        <childnode refid="446" relation="usage">
          <edgelabel>fragments</edgelabel>
        </childnode>
        <childnode refid="450" relation="usage">
          <edgelabel>current_community_parameters</edgelabel>
        </childnode>
        <childnode refid="451" relation="usage">
          <edgelabel>spec_sim_parameters</edgelabel>
        </childnode>
        <childnode refid="453" relation="usage">
          <edgelabel>samplemask</edgelabel>
        </childnode>
        <childnode refid="459" relation="usage">
          <edgelabel>nodes</edgelabel>
        </childnode>
        <childnode refid="460" relation="usage">
          <edgelabel>past_communities</edgelabel>
        </childnode>
        <childnode refid="462" relation="usage">
          <edgelabel>past_metacommunities</edgelabel>
        </childnode>
        <childnode refid="465" relation="usage">
          <edgelabel>row_out</edgelabel>
        </childnode>
      </node>
      <node id="449">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="463">
        <label>std::vector&lt; MetacommunityParameters &gt;</label>
        <childnode refid="464" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="467">
        <label>Tree</label>
        <link refid="class_tree"/>
        <childnode refid="445" relation="usage">
          <edgelabel>community</edgelabel>
        </childnode>
        <childnode refid="468" relation="usage">
          <edgelabel>speciation_rates</edgelabel>
        </childnode>
        <childnode refid="469" relation="usage">
          <edgelabel>this_step</edgelabel>
        </childnode>
        <childnode refid="448" relation="usage">
          <edgelabel>times_file</edgelabel>
          <edgelabel>pause_sim_directory</edgelabel>
          <edgelabel>sqloutname</edgelabel>
          <edgelabel>out_directory</edgelabel>
        </childnode>
        <childnode refid="466" relation="usage">
          <edgelabel>NR</edgelabel>
        </childnode>
        <childnode refid="459" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="470" relation="usage">
          <edgelabel>active</edgelabel>
        </childnode>
        <childnode refid="452" relation="usage">
          <edgelabel>reference_times</edgelabel>
        </childnode>
        <childnode refid="471" relation="usage">
          <edgelabel>sim_parameters</edgelabel>
        </childnode>
      </node>
      <node id="466">
        <label>NRrand</label>
        <link refid="class_n_rrand"/>
      </node>
      <node id="464">
        <label>MetacommunityParameters</label>
        <link refid="struct_metacommunity_parameters"/>
      </node>
      <node id="451">
        <label>SpecSimParameters</label>
        <link refid="struct_spec_sim_parameters"/>
        <childnode refid="452" relation="usage">
          <edgelabel>all_times</edgelabel>
          <edgelabel>all_speciation_rates</edgelabel>
        </childnode>
      </node>
      <node id="459">
        <label>Row&lt; TreeNode &gt;</label>
        <link refid="class_row"/>
      </node>
      <node id="471">
        <label>SimParameters</label>
        <link refid="struct_sim_parameters"/>
        <childnode refid="472" relation="usage">
          <edgelabel>configs</edgelabel>
        </childnode>
        <childnode refid="448" relation="usage">
          <edgelabel>reproduction_file</edgelabel>
          <edgelabel>times_file</edgelabel>
          <edgelabel>sample_mask_file</edgelabel>
          <edgelabel>fine_map_file</edgelabel>
          <edgelabel>dispersal_method</edgelabel>
          <edgelabel>dispersal_file</edgelabel>
          <edgelabel>pristine_fine_map_file</edgelabel>
          <edgelabel>output_directory</edgelabel>
          <edgelabel>pristine_coarse_map_file</edgelabel>
          <edgelabel>coarse_map_file</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="453">
        <label>Samplematrix</label>
        <link refid="class_samplematrix"/>
        <childnode refid="454" relation="public-inheritance">
        </childnode>
      </node>
      <node id="457">
        <label>Matrix&lt; bool &gt;</label>
        <link refid="class_matrix"/>
        <childnode refid="458" relation="usage">
          <edgelabel>matrix</edgelabel>
        </childnode>
      </node>
      <node id="454">
        <label>DataMask</label>
        <link refid="class_data_mask"/>
        <childnode refid="455" relation="usage">
          <edgelabel>sample_mask_exact</edgelabel>
        </childnode>
        <childnode refid="457" relation="usage">
          <edgelabel>sample_mask</edgelabel>
        </childnode>
        <childnode refid="448" relation="usage">
          <edgelabel>inputfile</edgelabel>
        </childnode>
      </node>
      <node id="447">
        <label>Fragment</label>
        <link refid="struct_fragment"/>
        <childnode refid="448" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="460">
        <label>CommunitiesArray</label>
        <link refid="struct_communities_array"/>
        <childnode refid="461" relation="usage">
          <edgelabel>calc_array</edgelabel>
        </childnode>
      </node>
      <node id="455">
        <label>Matrix&lt; double &gt;</label>
        <link refid="class_matrix"/>
        <childnode refid="456" relation="usage">
          <edgelabel>matrix</edgelabel>
        </childnode>
      </node>
      <node id="462">
        <label>MetacommunitiesArray</label>
        <link refid="struct_metacommunities_array"/>
        <childnode refid="463" relation="usage">
          <edgelabel>calc_array</edgelabel>
        </childnode>
      </node>
      <node id="446">
        <label>std::vector&lt; Fragment &gt;</label>
        <childnode refid="447" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="448">
        <label>std::string</label>
        <childnode refid="449" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/Metacommunity.h" line="35" column="1" bodyfile="necsim/Metacommunity.h" bodystart="34" bodyend="101"/>
    <listofallmembers>
      <member refid="class_community_1a28f6996de89e7596da6777cc55e9861d" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>addCalculationPerformed</name></member>
      <member refid="class_metacommunity_1a8cad1a5648ff5b6b51f2441898fdad48" prot="public" virt="virtual"><scope>Metacommunity</scope><name>addSpecies</name></member>
      <member refid="class_community_1a77d20815b5638387ce186130657ec660" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>applied_max_speciation_gen</name></member>
      <member refid="class_community_1aa5e9946a354a46d675e015d803cc7fa1" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>applied_min_speciation_gen</name></member>
      <member refid="class_metacommunity_1adf30667aa617bc969706eab2facd5482" prot="public" virt="virtual"><scope>Metacommunity</scope><name>apply</name></member>
      <member refid="class_community_1a706aba5b07c98849cb2b4b0318488f99" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>applyFragments</name></member>
      <member refid="class_community_1ab6496c803e44395f4490f6301fc15a13" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>bDataImport</name></member>
      <member refid="class_community_1a82d7b635a6d81a0036238d02c5833e6d" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>bFileSet</name></member>
      <member refid="class_community_1ad5344789223153c3756dbad28948410b" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>bMem</name></member>
      <member refid="class_community_1a40b8a468ecba59b2cb2c04750208495f" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>bSample</name></member>
      <member refid="class_community_1aa9fe335ff9e94c626d1e0d41ff145524" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>bSqlConnection</name></member>
      <member refid="class_community_1ac9433a0c34911ec1128b5459f61488fc" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>calcFragments</name></member>
      <member refid="class_community_1a241f69d1f69e61fc53c112fd874bf3ba" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>calcSpecies</name></member>
      <member refid="class_community_1a502a409a75567d78575625346b6a969f" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>calcSpeciesAbundance</name></member>
      <member refid="class_community_1adfa9a1c84bb326092805614ad195fcdd" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>calculateTree</name></member>
      <member refid="class_community_1a7a1c541651f7b2326db2334233072d04" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>checkCalculationsPerformed</name></member>
      <member refid="class_metacommunity_1ad3775b6cecab860b008d15cc9c7650ea" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>checkSimulationParameters</name></member>
      <member refid="class_community_1a5b2236c98b613c0ec96998bd932101f5" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>checkSpeciesAbundancesReference</name></member>
      <member refid="class_community_1a23b9398df3a63c75d01e3ed3982432c2" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>checkSpeciesLocationsReference</name></member>
      <member refid="class_community_1a7697e887d12366a6953fe7439d978768" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>Community</name></member>
      <member refid="class_community_1a995bd6adbfb7a4aad1bc5fb74e2a8ef2" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>Community</name></member>
      <member refid="class_metacommunity_1a3b392090e764ffb2ada3881e4eddd0b1" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>community_size</name></member>
      <member refid="class_community_1a07970398c04e7c31ceda695c2860e20f" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>countSpecies</name></member>
      <member refid="class_community_1ad6e92dafaf00fd65cc29ca436dc61a2e" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>createDatabase</name></member>
      <member refid="class_community_1ad6515ff43ea8189a1acdcccfe893bbba" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>createFragmentDatabase</name></member>
      <member refid="class_metacommunity_1a2557f1dc48f4a7aba97431ac8a8c7dbd" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>createMetacommunityNSENeutralModel</name></member>
      <member refid="class_community_1a77e925f82bee5441d8ec45406066dcfb" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>current_community_parameters</name></member>
      <member refid="class_community_1a382c0e6e90ca8055d3192bfe2af4d741" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>database</name></member>
      <member refid="class_community_1a579c5f423fc2461838a80baf6b396310" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>detectDimensions</name></member>
      <member refid="class_community_1a8ce443a30731d2249852d2b615f4a29a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>doApplication</name></member>
      <member refid="class_community_1a7289dd39ee9b69ca314e1752a7b45701" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>doApplication</name></member>
      <member refid="class_community_1aee7488d02cccb897ed1d561e242391df" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>doApplicationInternal</name></member>
      <member refid="class_community_1a280850bd6077692755cc419028aa5d67" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>exportDatabase</name></member>
      <member refid="class_community_1a8a17909b92a0cec3b63cec41e92796cb" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>fragments</name></member>
      <member refid="class_community_1a078a9a1210d6b7e8f6f378891f7e8b86" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>generateCoalescenceTree</name></member>
      <member refid="class_community_1a51d90183f6a26e7d192abfd748945f2b" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getCumulativeAbundances</name></member>
      <member refid="class_community_1af6fe28e1047ed5b56fde833e4b2b30de" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getMaxFragmentAbundancesID</name></member>
      <member refid="class_community_1a8ac0ce642595283f342c2f1841f4c20f" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getMaxSpeciesAbundancesID</name></member>
      <member refid="class_community_1a04d65ed53ea9e2cb6ce02dddccf3d33e" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getMaxSpeciesLocationsID</name></member>
      <member refid="class_community_1a4e5dea65183810c3b27441736eca825a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getMinimumSpeciation</name></member>
      <member refid="class_community_1a24c425f32b1e3b10227e2d04cbacfe31" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getPreviousCalcs</name></member>
      <member refid="class_community_1a63fd8d32af6d52d009d1fd54098e4594" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getRowOut</name></member>
      <member refid="class_community_1a8523432488d6586521c5994cad4215d8" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getSpeciesNumber</name></member>
      <member refid="class_community_1aed61108d8c4fd42d39a9112c5062cad4" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getUniqueCommunityRefs</name></member>
      <member refid="class_community_1a257e8e3dce33b235985ed9d167817a89" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>getUniqueMetacommunityRefs</name></member>
      <member refid="class_community_1a383dba82c8c76bf5c130c2bf4ac057e5" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>grid_x_size</name></member>
      <member refid="class_community_1a308d12fa4ef95015860d4181b075c93f" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>grid_y_size</name></member>
      <member refid="class_community_1a045f762ca30c3a20e8ef5911a4982160" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>hasImportedData</name></member>
      <member refid="class_community_1a85db7255d3a1d53509ed2800fc24de31" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>importData</name></member>
      <member refid="class_community_1a01a137383e1e23f2191d63f16513a00a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>importSamplemask</name></member>
      <member refid="class_community_1a548d36e99e592f0bfc09c8315b27f8bb" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>importSimParameters</name></member>
      <member refid="class_community_1a527f03120e4cb211e466cab7e405ba9a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>internalOption</name></member>
      <member refid="class_community_1a094f10ce5bbbcab19bccda352f545aad" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>iSpecies</name></member>
      <member refid="class_community_1a5de3afc536570241b82489d1b9c87d03" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>max_fragment_id</name></member>
      <member refid="class_community_1ae503af91bc33ed302a363098a3b49a61" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>max_locations_id</name></member>
      <member refid="class_community_1aeff6623b51fdd177e87b6eebfba27080" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>max_speciation_gen</name></member>
      <member refid="class_community_1a31f80e452a92aabdf2d9ba7bcc798f84" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>max_species_id</name></member>
      <member refid="class_metacommunity_1ae9f7d7ea2b20471a330b10db37a15342" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>Metacommunity</name></member>
      <member refid="class_metacommunity_1ae9ef6b36732d3269baef697b5341c0b9" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>metacommunity_cumulative_abundances</name></member>
      <member refid="class_metacommunity_1a85e91103025feb641bf0df9d02152b99" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>metacommunity_tree</name></member>
      <member refid="class_community_1a9dc6f7d4ab75b382be85c2b74edac6b7" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>min_spec_rate</name></member>
      <member refid="class_community_1a6b906ec2096b22631b60aa3511925fe0" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>min_speciation_gen</name></member>
      <member refid="class_community_1aa1309616989642b98c15e6e2ed25b379" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>nodes</name></member>
      <member refid="class_community_1a389c35f39ed73eb1e5dc1476c220c140" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>openSqlConnection</name></member>
      <member refid="class_community_1a884634e98e0aacb082968664acd5a32e" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>outdatabase</name></member>
      <member refid="class_community_1ad2483623c7ad7a11564fc49305204585" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>output</name></member>
      <member refid="class_community_1a8cb8044c6b2e290e7933cbc78d7019be" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>outputSpeciesAbundances</name></member>
      <member refid="class_community_1a132137f2a27a6fad21ada4c94726480a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>overrideProtractedParameters</name></member>
      <member refid="class_metacommunity_1a8b0ca689c1c638e49424d59fadb2e28d" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>parameters_checked</name></member>
      <member refid="class_community_1a0726a962287af565658aaa8f9d9ea6c1" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>past_communities</name></member>
      <member refid="class_community_1ae00d8d9f52d163b040cc716955569ad3" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>past_metacommunities</name></member>
      <member refid="class_community_1a36216913433e3e011ee2420e83e1fe4a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>printEndTimes</name></member>
      <member refid="class_community_1acab5a676e365934f9dfd2148ab9d5a60" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>protracted</name></member>
      <member refid="class_metacommunity_1aa47b2ff3f6944143f8e734d0988d2ff3" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>random</name></member>
      <member refid="class_community_1a08be240fddc6ea481014567276a84dd0" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>recordSpatial</name></member>
      <member refid="class_community_1abd099aacb5332a9b89b3421e01269d24" prot="public" virt="virtual"><scope>Metacommunity</scope><name>resetTree</name></member>
      <member refid="class_community_1a06e5a133792f29fa17a1b0664d650541" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>row_out</name></member>
      <member refid="class_community_1ac7434119a77086e3b38a4a94c8fbff01" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>samplemask</name></member>
      <member refid="class_community_1ac4985481c86bd62a50fa946699867216" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>samplemask_x_offset</name></member>
      <member refid="class_community_1a960bb6bb58eaec017d36d16cb3a3bc8a" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>samplemask_x_size</name></member>
      <member refid="class_community_1aeaebe975a46d62b70380e50ff7ebd09a" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>samplemask_y_offset</name></member>
      <member refid="class_community_1a10722b2fe8855460946f04f0ae69fd74" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>samplemask_y_size</name></member>
      <member refid="class_metacommunity_1afd81750697ac8540b71de001ee53fc61" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>seed</name></member>
      <member refid="class_metacommunity_1ac1884bfd79b272d8dcb470f34f579cf1" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>selectLineageFromMetacommunity</name></member>
      <member refid="class_metacommunity_1af9407da2a2e99848ac11ce3a426d4c8a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setCommunityParameters</name></member>
      <member refid="class_community_1a6fe2fdb93911f403dd879ca2847e4933" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setDatabase</name></member>
      <member refid="class_community_1acba6b894e62ad4ecccbcf86f064ebc46" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setInternalDatabase</name></member>
      <member refid="class_community_1a710a402dffa1b85183dd7f4a5a44f988" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setList</name></member>
      <member refid="class_community_1a649afbf07398a1717ad49cb22bb744ff" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setProtracted</name></member>
      <member refid="class_community_1aa5643c34557be54ea2674e78a1e0c53a" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setProtractedParameters</name></member>
      <member refid="class_community_1a3833e048848d21bc0292c05e86b7d5ce" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>setProtractedParameters</name></member>
      <member refid="class_community_1a45df8aefb9914e7c8f3133143069ca35" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>spec_sim_parameters</name></member>
      <member refid="class_metacommunity_1aad4378b40264345fc6f5116aedc58c26" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>speciation_rate</name></member>
      <member refid="class_metacommunity_1a094dfd2d0bb737a1f5bd06ceb3c6da1f" prot="protected" virt="non-virtual"><scope>Metacommunity</scope><name>task</name></member>
      <member refid="class_community_1af3f5939bfb59fdf3b7d7b5f3699bd225" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>updateCommunityParameters</name></member>
      <member refid="class_community_1afbc8709084a00a7450e3a168cb016db9" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>writeNewCommunityParameters</name></member>
      <member refid="class_community_1ac900c23ffe2572504fca11f20b7ba8cd" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>writeNewMetacommuntyParameters</name></member>
      <member refid="class_community_1adcfc04e92cbb597682dcc1f2913d6668" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>writeSpeciationRates</name></member>
      <member refid="class_community_1a9ed3b94e90b38497805610de6d18df4e" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>~Community</name></member>
      <member refid="class_metacommunity_1a41711a34f23904297adc63f6abf3a8e4" prot="public" virt="non-virtual"><scope>Metacommunity</scope><name>~Metacommunity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
