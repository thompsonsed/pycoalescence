<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="file__system_8h" kind="file" language="C++">
    <compoundname>file_system.h</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">sqlite3.h</includes>
    <includes local="no">string</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">iostream</includes>
    <includedby refid="_sim_parameters_8h" local="yes">necsim/SimParameters.h</includedby>
    <includedby refid="_s_q_lite_handler_8h" local="yes">necsim/SQLiteHandler.h</includedby>
    <includedby refid="file__system_8cpp" local="yes">necsim/file_system.cpp</includedby>
    <includedby refid="_landscape_8cpp" local="yes">necsim/Landscape.cpp</includedby>
    <includedby refid="_log_file_8cpp" local="yes">necsim/LogFile.cpp</includedby>
    <includedby refid="_tree_8h" local="yes">necsim/Tree.h</includedby>
    <includedby refid="_simulate_dispersal_8cpp" local="yes">necsim/SimulateDispersal.cpp</includedby>
    <incdepgraph>
      <node id="613">
        <label>necsim/file_system.h</label>
        <link refid="file_system.h"/>
        <childnode refid="614" relation="include">
        </childnode>
        <childnode refid="615" relation="include">
        </childnode>
        <childnode refid="616" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
      </node>
      <node id="614">
        <label>cmath</label>
      </node>
      <node id="616">
        <label>string</label>
      </node>
      <node id="615">
        <label>sqlite3.h</label>
      </node>
      <node id="617">
        <label>cstdio</label>
      </node>
      <node id="618">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="630">
        <label>necsim/DispersalCoordinator.h</label>
        <link refid="_dispersal_coordinator_8h_source"/>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
      </node>
      <node id="619">
        <label>necsim/file_system.h</label>
        <link refid="file_system.h"/>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
      </node>
      <node id="621">
        <label>necsim/DataMask.h</label>
        <link refid="_data_mask_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
      </node>
      <node id="623">
        <label>necsim/Tree.h</label>
        <link refid="_tree_8h_source"/>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="627" relation="include">
        </childnode>
      </node>
      <node id="632">
        <label>necsim/SQLiteHandler.h</label>
        <link refid="_s_q_lite_handler_8h_source"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
      </node>
      <node id="625">
        <label>necsim/ProtractedSpatialTree.h</label>
        <link refid="_protracted_spatial_tree_8h_source"/>
      </node>
      <node id="622">
        <label>necsim/Community.h</label>
        <link refid="_community_8h_source"/>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="627" relation="include">
        </childnode>
        <childnode refid="628" relation="include">
        </childnode>
      </node>
      <node id="631">
        <label>necsim/SimulateDispersal.h</label>
        <link refid="_simulate_dispersal_8h_source"/>
      </node>
      <node id="624">
        <label>necsim/SpatialTree.h</label>
        <link refid="_spatial_tree_8h_source"/>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
      <node id="620">
        <label>necsim/SimParameters.h</label>
        <link refid="_sim_parameters_8h_source"/>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
      </node>
      <node id="626">
        <label>necsim/ProtractedTree.h</label>
        <link refid="_protracted_tree_8h_source"/>
        <childnode refid="625" relation="include">
        </childnode>
      </node>
      <node id="627">
        <label>necsim/Metacommunity.h</label>
        <link refid="_metacommunity_8h_source"/>
      </node>
      <node id="629">
        <label>necsim/Landscape.h</label>
        <link refid="_landscape_8h_source"/>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
      </node>
      <node id="628">
        <label>necsim/SpeciationCommands.h</label>
        <link refid="_speciation_commands_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="file__system_8h_1a525335710b53cb064ca56b936120431e" prot="public" static="no">
        <name>_USE_MATH_DEFINES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="16" column="9" bodyfile="necsim/file_system.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="file__system_8h_1aa045270f48927dae2700f6207584b9c8" prot="public" static="no">
        <name>SPECIATIONCOUNTER_FILESYSTEM_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="25" column="9" bodyfile="necsim/file_system.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="file__system_8h_1a2dd35a078ed71b998730c8af8f4788f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void openSQLiteDatabase</definition>
        <argsstring>(const string &amp;database_name, sqlite3 *&amp;database)</argsstring>
        <name>openSQLiteDatabase</name>
        <param>
          <type>const string &amp;</type>
          <declname>database_name</declname>
        </param>
        <param>
          <type>sqlite3 *&amp;</type>
          <declname>database</declname>
        </param>
        <briefdescription>
<para>Safely opens a connection to the provided SQLite database. </para>        </briefdescription>
        <detaileddescription>
<para>Adds type safety for usage on different filesystems. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>database_name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>database</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="36" column="1" bodyfile="necsim/file_system.cpp" bodystart="29" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8h_1a2323ae41e0f9ed5173015ea3bd87037d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void createParent</definition>
        <argsstring>(string file)</argsstring>
        <name>createParent</name>
        <param>
          <type>string</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Checks that parent folder to the supplied file exists, and if it doesn&apos;t creates it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>the file path to check for </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="42" column="1" bodyfile="necsim/file_system.cpp" bodystart="79" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8h_1af836e59d723600545dfdfe76b0c14b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool doesExist</definition>
        <argsstring>(string testfile)</argsstring>
        <name>doesExist</name>
        <param>
          <type>string</type>
          <declname>testfile</declname>
        </param>
        <briefdescription>
<para>Checks the existance of a file on the hard drive. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>testfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>should always return true, or raise an error (if the file doesn&apos;t exist) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="49" column="1" bodyfile="necsim/file_system.cpp" bodystart="105" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8h_1a0b70d536db024e2f65c377c02fa596ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool doesExistNull</definition>
        <argsstring>(string testfile)</argsstring>
        <name>doesExistNull</name>
        <param>
          <type>string</type>
          <declname>testfile</declname>
        </param>
        <briefdescription>
<para>Checks for the existance of a file, but returns true if the file name is &apos;null&apos;. Note: this function just calls doesExist(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>testfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if true, file exists (or is null). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="57" column="1" bodyfile="necsim/file_system.cpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8h_1abb00ca4d88a22a1d1f7c6ac7cb75334c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long cantorPairing</definition>
        <argsstring>(const unsigned long &amp;x1, const unsigned long &amp;x2)</argsstring>
        <name>cantorPairing</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
<para>Generates a unique ID for the pair of provided parameters. </para>        </briefdescription>
        <detaileddescription>
<para>Maps ZxZ -&gt; N, so only relevant for positive numbers. For any A and B, generates C such that no D and E produce C unless D=A and B=E.</para><para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Should not be used for large integers, or of unknown size, as integer overflows are likely. Cantor pairing explodes in size of return value.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first integer reference </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second integer reference </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a unique reference for the two provided integers </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="72" column="1" bodyfile="necsim/file_system.cpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8h_1ac1d9fe36fa1cb4485a3e79af663978d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long elegantPairing</definition>
        <argsstring>(const unsigned long &amp;x1, const unsigned long &amp;x2)</argsstring>
        <name>elegantPairing</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
<para>A more elegant version of cantor pairing, which allows for storing of a greater number of digits without experiencing integer overflow issues. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For scenarios when performance is critical, and the integers are known to be small, cantorPairing provides equivalent functionality.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first integer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="85" column="1" bodyfile="necsim/file_system.cpp" bodystart="130" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8h_1a9e12562fb15ce7c6462457551d293d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; string &gt;</type>
        <definition>vector&lt;string&gt; getCsvLineAndSplitIntoTokens</definition>
        <argsstring>(istream &amp;str)</argsstring>
        <name>getCsvLineAndSplitIntoTokens</name>
        <param>
          <type>istream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Gets the next line from a csv filestream and splits the row into a vector of strings, where each string is the value from the csv file, delimited by a comma (i.e. each column of the row). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream from the csv file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector where each element corresponds to the respective row from the csv. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="93" column="1" bodyfile="necsim/file_system.cpp" bodystart="139" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8h_1a101860141504d1fff48a6391dd6eabb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Overload the output operator for vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the template type of the vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to write out </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the modified output operator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="103" column="1" bodyfile="necsim/file_system.h" bodystart="103" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="file__system_8h_1aba8866189cbcaeb96147aeb86e33be2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Overloaded input stream operator for a vector of objects. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the objects stored in a vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of objects to read in to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/file_system.h" line="121" column="1" bodyfile="necsim/file_system.h" bodystart="121" bodyend="134"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>necsim<sp/>project<sp/>which<sp/>is<sp/>released<sp/>under<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>**LICENSE.txt**<sp/>or<sp/>visit<sp/>https://opensource.org/licenses/MIT)<sp/>for<sp/>full<sp/>license<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sqlite3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SPECIATIONCOUNTER_FILESYSTEM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPECIATIONCOUNTER_FILESYSTEM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>openSQLiteDatabase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;database_name,<sp/>sqlite3<sp/>*&amp;database);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createParent(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>file);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doesExist(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>testfile);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doesExistNull(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>testfile);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>cantorPairing(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;x1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;x2);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>elegantPairing(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;x1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;x2);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">vector&lt;string&gt;<sp/>getCsvLineAndSplitIntoTokens(istream<sp/>&amp;str);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">ostream<sp/>&amp;operator&lt;&lt;(ostream<sp/>&amp;os,<sp/>const<sp/>vector&lt;T&gt;<sp/>&amp;v)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>v.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;item:<sp/>v)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>item<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">istream<sp/>&amp;operator&gt;&gt;(istream<sp/>&amp;is,<sp/>vector&lt;T&gt;<sp/>&amp;v)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delim;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>n;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>v.resize(n);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>delim;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>static_cast&lt;unsigned<sp/>long&gt;(n);<sp/>c++)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>v[c];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>delim;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//SPECIATIONCOUNTER_FILESYSTEM_H</highlight></codeline>
    </programlisting>
    <location file="necsim/file_system.h"/>
  </compounddef>
</doxygen>
