<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_s_q_lite_handler" kind="class" language="C++" prot="public">
    <compoundname>SQLiteHandler</compoundname>
    <includes refid="_s_q_lite_handler_8h" local="no">SQLiteHandler.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_q_lite_handler_1acf20df90fd63d2838403fe88c1634aa9" prot="protected" static="no" mutable="no">
        <type>sqlite3 *</type>
        <definition>sqlite3* SQLiteHandler::database</definition>
        <argsstring></argsstring>
        <name>database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="62" column="1" bodyfile="necsim/SQLiteHandler.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_q_lite_handler_1ada3096a63544a107ba2ce93ac410b38d" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string SQLiteHandler::file_name</definition>
        <argsstring></argsstring>
        <name>file_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="63" column="1" bodyfile="necsim/SQLiteHandler.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_q_lite_handler_1a656bbab95b5ff6936505642c64773d7a" prot="protected" static="no" mutable="no">
        <type>shared_ptr&lt; <ref refid="struct_s_q_l_statement" kindref="compound">SQLStatement</ref> &gt;</type>
        <definition>shared_ptr&lt;SQLStatement&gt; SQLiteHandler::stmt</definition>
        <argsstring></argsstring>
        <name>stmt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="64" column="1" bodyfile="necsim/SQLiteHandler.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_q_lite_handler_1af2605298dd20e8619427ddf52d70bd5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SQLiteHandler::SQLiteHandler</definition>
        <argsstring>()</argsstring>
        <name>SQLiteHandler</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="69" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1a3b818614bf80a9bc169f74dd72738d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SQLiteHandler::~SQLiteHandler</definition>
        <argsstring>()</argsstring>
        <name>~SQLiteHandler</name>
        <briefdescription>
<para>Default destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="74" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1a4f163ced00a5b227e7bc47891755fd33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SQLiteHandler::open</definition>
        <argsstring>(const std::string &amp;file_name)</argsstring>
        <name>open</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Opens a database connection to the specified file name. If the file name is &quot;:memory:&quot;, instead opens a connection to an in-memory database object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file to open (or &quot;:memory:&quot; for in-memory databases) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="81" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1abaaf6bef77ae3eef99e9848a6d53cf5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SQLiteHandler::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Closes the sqlite3 connection to the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="86" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1a368cc649b6a491990d2af33b818c328d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SQLiteHandler::getErrorMsg</definition>
        <argsstring>(int rc)</argsstring>
        <name>getErrorMsg</name>
        <param>
          <type>int</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
<para>Gets the error message from the sqlite3 database operations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rc</parametername>
</parameternamelist>
<parameterdescription>
<para>the result code of the previous operation, to print out </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string containing the result code and the error message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="93" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1a18f387be42dcd44388edae088568753e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SQLiteHandler::getErrorMsg</definition>
        <argsstring>()</argsstring>
        <name>getErrorMsg</name>
        <briefdescription>
<para>Gets the error message from the database. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the error message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="99" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1ad3997486833555a9118677a3461941bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SQLiteHandler::backupFrom</definition>
        <argsstring>(SQLiteHandler &amp;sqlite_handler)</argsstring>
        <name>backupFrom</name>
        <param>
          <type><ref refid="class_s_q_lite_handler" kindref="compound">SQLiteHandler</ref> &amp;</type>
          <declname>sqlite_handler</declname>
        </param>
        <briefdescription>
<para>Copies the data from the provided SQLiteHander object to this database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sqlite_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the database containing data to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="105" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="76" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1a2d43df52e740eb308087df98c0b8ef0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shared_ptr&lt; <ref refid="struct_s_q_l_statement" kindref="compound">SQLStatement</ref> &gt;</type>
        <definition>shared_ptr&lt; SQLStatement &gt; SQLiteHandler::prepare</definition>
        <argsstring>(const std::string &amp;command)</argsstring>
        <name>prepare</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Prepares the given commmand within the statement object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>the command to execute </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the statement to prepare within </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the prepared statement </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="113" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="105" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1ae53eea6e0d7ce2666f55f12dd2605de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SQLiteHandler::createStatement</definition>
        <argsstring>()</argsstring>
        <name>createStatement</name>
        <briefdescription>
<para>Creates a new statement for the database handler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="118" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1a0abc9bab779da2d93b30b4376d04e1db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SQLiteHandler::useStatement</definition>
        <argsstring>(shared_ptr&lt; SQLStatement &gt; stmt)</argsstring>
        <name>useStatement</name>
        <param>
          <type>shared_ptr&lt; <ref refid="struct_s_q_l_statement" kindref="compound">SQLStatement</ref> &gt;</type>
          <declname>stmt</declname>
        </param>
        <briefdescription>
<para>Use the supplied statement object for the database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stmt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="124" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1a637fde99d865e3fd1c6f1425b0ca929e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SQLiteHandler::step</definition>
        <argsstring>()</argsstring>
        <name>step</name>
        <briefdescription>
<para>Steps the prepared statement forwards and reports any errors. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>stmt should have been opened from the same <ref refid="class_s_q_lite_handler" kindref="compound">SQLiteHandler</ref> object using <ref refid="class_s_q_lite_handler_1a2d43df52e740eb308087df98c0b8ef0f" kindref="member">prepare()</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the statement to step forwards </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="131" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="130" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1a071e474509db8ac06753d2aed7cde53c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SQLiteHandler::finalise</definition>
        <argsstring>()</argsstring>
        <name>finalise</name>
        <briefdescription>
<para>Finalises the sqlite statement and reports any errors. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>stmt should have been opened from the same <ref refid="class_s_q_lite_handler" kindref="compound">SQLiteHandler</ref> object using <ref refid="class_s_q_lite_handler_1a2d43df52e740eb308087df98c0b8ef0f" kindref="member">prepare()</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the statement to finalise </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="138" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="142" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1ac52be7cf1228e4eb550a09906684c65e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SQLiteHandler::execute</definition>
        <argsstring>(const string &amp;command)</argsstring>
        <name>execute</name>
        <param>
          <type>const string &amp;</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Executes a command from the database and reports any errors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>the command to execute within the database </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="144" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="153" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1a9ae3e804218d77490985533961ecb8d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SQLiteHandler::beginTransaction</definition>
        <argsstring>()</argsstring>
        <name>beginTransaction</name>
        <briefdescription>
<para>Starts a transaction from this database object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="149" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1ac00ab0a46da9951dc74166912981db75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SQLiteHandler::endTransaction</definition>
        <argsstring>()</argsstring>
        <name>endTransaction</name>
        <briefdescription>
<para>Ends the transaction from this database object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="154" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1ae2e3d630fb0007cffff23c02e9662f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SQLiteHandler::isOpen</definition>
        <argsstring>()</argsstring>
        <name>isOpen</name>
        <briefdescription>
<para>Checks if the database is open. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true, if the database is not a nullptr. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="160" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_s_q_lite_handler_1a45477f80d47793fa522106abb5021388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SQLiteHandler::hasTable</definition>
        <argsstring>(const std::string &amp;table_name)</argsstring>
        <name>hasTable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>table_name</declname>
        </param>
        <briefdescription>
<para>Checks if the database has the specified table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the table name to check for existence </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the table exists </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/SQLiteHandler.h" line="167" column="1" bodyfile="necsim/SQLiteHandler.cpp" bodystart="180" bodyend="188"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Handler for the SQLite connection, including proper opening and closing of the database object. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="781">
        <label>SQLiteHandler</label>
        <link refid="class_s_q_lite_handler"/>
        <childnode refid="782" relation="usage">
          <edgelabel>file_name</edgelabel>
        </childnode>
      </node>
      <node id="783">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="782">
        <label>std::string</label>
        <childnode refid="783" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/SQLiteHandler.h" line="60" column="1" bodyfile="necsim/SQLiteHandler.h" bodystart="59" bodyend="168"/>
    <listofallmembers>
      <member refid="class_s_q_lite_handler_1ad3997486833555a9118677a3461941bd" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>backupFrom</name></member>
      <member refid="class_s_q_lite_handler_1a9ae3e804218d77490985533961ecb8d2" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>beginTransaction</name></member>
      <member refid="class_s_q_lite_handler_1abaaf6bef77ae3eef99e9848a6d53cf5c" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>close</name></member>
      <member refid="class_s_q_lite_handler_1ae53eea6e0d7ce2666f55f12dd2605de8" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>createStatement</name></member>
      <member refid="class_s_q_lite_handler_1acf20df90fd63d2838403fe88c1634aa9" prot="protected" virt="non-virtual"><scope>SQLiteHandler</scope><name>database</name></member>
      <member refid="class_s_q_lite_handler_1ac00ab0a46da9951dc74166912981db75" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>endTransaction</name></member>
      <member refid="class_s_q_lite_handler_1ac52be7cf1228e4eb550a09906684c65e" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>execute</name></member>
      <member refid="class_s_q_lite_handler_1ada3096a63544a107ba2ce93ac410b38d" prot="protected" virt="non-virtual"><scope>SQLiteHandler</scope><name>file_name</name></member>
      <member refid="class_s_q_lite_handler_1a071e474509db8ac06753d2aed7cde53c" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>finalise</name></member>
      <member refid="class_s_q_lite_handler_1a368cc649b6a491990d2af33b818c328d" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>getErrorMsg</name></member>
      <member refid="class_s_q_lite_handler_1a18f387be42dcd44388edae088568753e" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>getErrorMsg</name></member>
      <member refid="class_s_q_lite_handler_1a45477f80d47793fa522106abb5021388" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>hasTable</name></member>
      <member refid="class_s_q_lite_handler_1ae2e3d630fb0007cffff23c02e9662f38" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>isOpen</name></member>
      <member refid="class_s_q_lite_handler_1a4f163ced00a5b227e7bc47891755fd33" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>open</name></member>
      <member refid="class_s_q_lite_handler_1a2d43df52e740eb308087df98c0b8ef0f" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>prepare</name></member>
      <member refid="class_s_q_lite_handler_1af2605298dd20e8619427ddf52d70bd5e" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>SQLiteHandler</name></member>
      <member refid="class_s_q_lite_handler_1a637fde99d865e3fd1c6f1425b0ca929e" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>step</name></member>
      <member refid="class_s_q_lite_handler_1a656bbab95b5ff6936505642c64773d7a" prot="protected" virt="non-virtual"><scope>SQLiteHandler</scope><name>stmt</name></member>
      <member refid="class_s_q_lite_handler_1a0abc9bab779da2d93b30b4376d04e1db" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>useStatement</name></member>
      <member refid="class_s_q_lite_handler_1a3b818614bf80a9bc169f74dd72738d41" prot="public" virt="non-virtual"><scope>SQLiteHandler</scope><name>~SQLiteHandler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
