<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="namespaceeastl" kind="namespace" language="C++">
    <compoundname>eastl</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="heap_8h_1a421db7f64babc404cfa1cbe489a6cec2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::promote_heap_impl</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance position, T value)</argsstring>
        <name>promote_heap_impl</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="48" column="1" bodyfile="necsim/eastl/heap.h" bodystart="48" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a88a378473358bbdbd07127c015164a99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::promote_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance position, const T &amp;value)</argsstring>
        <name>promote_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>promote_heap</para>
<para>Moves a value in the heap from a given position upward until it is sorted correctly. It&apos;s kind of like bubble-sort, except that instead of moving linearly from the back of a list to the front, it moves from the bottom of the tree up the branches towards the top. But otherwise is just like bubble-sort.</para>
<para>This function requires that the value argument refer to a value that is currently not within the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="73" column="1" bodyfile="necsim/eastl/heap.h" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a68002d85ffe77ecd80ee131649439d56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::promote_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance position, T &amp;&amp;value)</argsstring>
        <name>promote_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>promote_heap</para>
<para>Moves a value in the heap from a given position upward until it is sorted correctly. It&apos;s kind of like bubble-sort, except that instead of moving linearly from the back of a list to the front, it moves from the bottom of the tree up the branches towards the top. But otherwise is just like bubble-sort.</para>
<para>This function requires that the value argument refer to a value that is currently not within the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="92" column="1" bodyfile="necsim/eastl/heap.h" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a3554e2e73545b7dd2c188db44ddf65bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::promote_heap_impl</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance position, T value, Compare compare)</argsstring>
        <name>promote_heap_impl</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="100" column="1" bodyfile="necsim/eastl/heap.h" bodystart="100" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a5fa243ca04c6626ddffc960ac50755a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::promote_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance position, const T &amp;value, Compare compare)</argsstring>
        <name>promote_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>promote_heap</para>
<para>Takes a Compare(a, b) function (or function object) which returns true if a &lt; b. For example, you could use the standard &apos;less&apos; comparison object.</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap.</para>
<para>This function requires that the value argument refer to a value that is currently not within the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="126" column="1" bodyfile="necsim/eastl/heap.h" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1af025b26c88d33c3cc6e56fbc18d4ed38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::promote_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance position, T &amp;&amp;value, Compare compare)</argsstring>
        <name>promote_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>promote_heap</para>
<para>Takes a Compare(a, b) function (or function object) which returns true if a &lt; b. For example, you could use the standard &apos;less&apos; comparison object.</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap.</para>
<para>This function requires that the value argument refer to a value that is currently not within the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="145" column="1" bodyfile="necsim/eastl/heap.h" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a34ba5a42c264dbe437de9afda36c2110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::adjust_heap_impl</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance heapSize, Distance position, T value)</argsstring>
        <name>adjust_heap_impl</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="158" column="1" bodyfile="necsim/eastl/heap.h" bodystart="158" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a99335227e3aec0cf68f0e7f7b61c4fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::adjust_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance heapSize, Distance position, const T &amp;value)</argsstring>
        <name>adjust_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adjust_heap</para>
<para>Given a position that has just been vacated, this function moves new values into that vacated position appropriately. The value argument is an entry which will be inserted into the heap after we move nodes into the positions that were vacated.</para>
<para>This function requires that the value argument refer to a value that is currently not within the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="192" column="1" bodyfile="necsim/eastl/heap.h" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1ad4871af5a5ec0bbaef91410ec4402d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::adjust_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance heapSize, Distance position, T &amp;&amp;value)</argsstring>
        <name>adjust_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adjust_heap</para>
<para>Given a position that has just been vacated, this function moves new values into that vacated position appropriately. The value argument is an entry which will be inserted into the heap after we move nodes into the positions that were vacated.</para>
<para>This function requires that the value argument refer to a value that is currently not within the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="210" column="1" bodyfile="necsim/eastl/heap.h" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a131abeb4f7009ec31df1a020b738d5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::adjust_heap_impl</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance heapSize, Distance position, T value, Compare compare)</argsstring>
        <name>adjust_heap_impl</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="218" column="1" bodyfile="necsim/eastl/heap.h" bodystart="218" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a729425543b1f9031bc3565cfea088ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::adjust_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance heapSize, Distance position, const T &amp;value, Compare compare)</argsstring>
        <name>adjust_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adjust_heap</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap.</para>
<para>This function requires that the value argument refer to a value that is currently not within the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="250" column="1" bodyfile="necsim/eastl/heap.h" bodystart="250" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a801b4bbcaec8e56f61e5cf3cda177b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::adjust_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance topPosition, Distance heapSize, Distance position, T &amp;&amp;value, Compare compare)</argsstring>
        <name>adjust_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>topPosition</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adjust_heap</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap.</para>
<para>This function requires that the value argument refer to a value that is currently not within the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="266" column="1" bodyfile="necsim/eastl/heap.h" bodystart="266" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1ab6da6605c8bb6e3b0647aceeb51b0639" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::push_heap</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last)</argsstring>
        <name>push_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>push_heap</para>
<para>Adds an item to a heap (which is an array). The item necessarily comes from the back of the heap (array). Thus, the insertion of a new item in a heap is a two step process: push_back and push_heap.</para>
<para>Example usage: vector&lt;int&gt; heap;</para>
<para>heap.push_back(3); push_heap(heap.begin(), heap.end()); // Places &apos;3&apos; appropriately. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="290" column="1" bodyfile="necsim/eastl/heap.h" bodystart="290" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1acb2c38ca780dba996870cec9d132556d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::push_heap</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, Compare compare)</argsstring>
        <name>push_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>push_heap</para>
<para>This version is useful for cases where your object comparison is unusual or where you want to have the heap store pointers to objects instead of storing the objects themselves (often in order to improve cache coherency while doing sorting).</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="313" column="1" bodyfile="necsim/eastl/heap.h" bodystart="313" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1abd83f87c9c2f9097aad476dfd4bb3040" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::pop_heap</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last)</argsstring>
        <name>pop_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pop_heap</para>
<para>Removes the first item from the heap (which is an array), and adjusts the heap so that the highest priority item becomes the new first item.</para>
<para>Example usage: vector&lt;int&gt; heap;</para>
<para>heap.push_back(2); heap.push_back(3); heap.push_back(1); &lt;use heap[0], which is the highest priority item in the heap&gt; pop_heap(heap.begin(), heap.end()); // Moves heap[0] to the back of the heap and adjusts the heap. heap.pop_back(); // Remove value that was just at the top of the heap </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="347" column="1" bodyfile="necsim/eastl/heap.h" bodystart="347" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a087834bbb36241619ee72542c384bb6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::pop_heap</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, Compare compare)</argsstring>
        <name>pop_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pop_heap</para>
<para>This version is useful for cases where your object comparison is unusual or where you want to have the heap store pointers to objects instead of storing the objects themselves (often in order to improve cache coherency while doing sorting).</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="371" column="1" bodyfile="necsim/eastl/heap.h" bodystart="371" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a9eecfc9b2a1a1fc776aafc401b593c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::make_heap</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last)</argsstring>
        <name>make_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>make_heap</para>
<para>Given an array, this function converts it into heap format. The complexity is O(n), where n is count of the range. The input range is not required to be in any order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="395" column="1" bodyfile="necsim/eastl/heap.h" bodystart="395" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a7bc7cb5f369076563633a68442aa6ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::make_heap</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, Compare compare)</argsstring>
        <name>make_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="418" column="1" bodyfile="necsim/eastl/heap.h" bodystart="418" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a54a481cebb4bba2a1aa7a733f5d68a20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::sort_heap</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last)</argsstring>
        <name>sort_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sort_heap</para>
<para>After the application if this algorithm, the range it was applied to is no longer a heap, though it will be a reverse heap (smallest first). The item with the lowest priority will be first, and the highest last. This is not a stable sort because the relative order of equivalent elements is not necessarily preserved. The range referenced must be valid; all pointers must be dereferenceable and within the sequence the last position is reachable from the first by incrementation. The complexity is at most O(n * log(n)), where n is count of the range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="456" column="1" bodyfile="necsim/eastl/heap.h" bodystart="456" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1aa8fd74581d72a4d4c9bf61eadc9b51f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::sort_heap</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, Compare compare)</argsstring>
        <name>sort_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sort_heap</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="469" column="1" bodyfile="necsim/eastl/heap.h" bodystart="469" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1ae359768fe1910e8c665b5fb143c5a9ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::remove_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance heapSize, Distance position)</argsstring>
        <name>remove_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>remove_heap</para>
<para>Removes an arbitrary entry from the heap and adjusts the heap appropriately. This function is unlike pop_heap in that pop_heap moves the top item to the back of the heap, whereas remove_heap moves an arbitrary item to the back of the heap.</para>
<para>Note: Since this function moves the element to the back of the heap and doesn&apos;t actually remove it from the given container, the user must call the container erase function if the user wants to erase the element from the container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="494" column="1" bodyfile="necsim/eastl/heap.h" bodystart="494" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a516dbc650dc9ae15e8685db05a589b5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::remove_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance heapSize, Distance position, Compare compare)</argsstring>
        <name>remove_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>remove_heap</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap.</para>
<para>Note: Since this function moves the element to the back of the heap and doesn&apos;t actually remove it from the given container, the user must call the container erase function if the user wants to erase the element from the container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="517" column="1" bodyfile="necsim/eastl/heap.h" bodystart="517" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a8f51a63693ac70dbaf20a890b95f9dc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::change_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance heapSize, Distance position)</argsstring>
        <name>change_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>change_heap</para>
<para>Given a value in the heap that has changed in priority, this function adjusts the heap appropriately. The heap size remains unchanged after this operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="541" column="1" bodyfile="necsim/eastl/heap.h" bodystart="541" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1ab1b15dd3fa388e57cf3bf300505fbef0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eastl::change_heap</definition>
        <argsstring>(RandomAccessIterator first, Distance heapSize, Distance position, Compare compare)</argsstring>
        <name>change_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>Distance</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>change_heap</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="561" column="1" bodyfile="necsim/eastl/heap.h" bodystart="561" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1ab2470e8f3cd62223f92d2bb9cef9b9f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
        </templateparamlist>
        <type>RandomAccessIterator</type>
        <definition>RandomAccessIterator eastl::is_heap_until</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last)</argsstring>
        <name>is_heap_until</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>is_heap_until </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="583" column="1" bodyfile="necsim/eastl/heap.h" bodystart="583" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a3d9f6d9d6119ce0acd86b9643ed88d73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>RandomAccessIterator</type>
        <definition>RandomAccessIterator eastl::is_heap_until</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, Compare compare)</argsstring>
        <name>is_heap_until</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>is_heap_until</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="604" column="1" bodyfile="necsim/eastl/heap.h" bodystart="604" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1a95104847d051ae05a9ee749f723cbf90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eastl::is_heap</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last)</argsstring>
        <name>is_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>is_heap</para>
<para>This is a useful debugging algorithm for verifying that a random</para>
<para>access container is in heap format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="630" column="1" bodyfile="necsim/eastl/heap.h" bodystart="630" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="heap_8h_1ab995dcaeb58587e386d27851657b90f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eastl::is_heap</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, Compare compare)</argsstring>
        <name>is_heap</name>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>is_heap</para>
<para>The Compare function must work equivalently to the compare function used to make and maintain the heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/eastl/heap.h" line="642" column="1" bodyfile="necsim/eastl/heap.h" bodystart="642" bodyend="645"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="necsim/eastl/heap.h" line="41" column="1"/>
  </compounddef>
</doxygen>
