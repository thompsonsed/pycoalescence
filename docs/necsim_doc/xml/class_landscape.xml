<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_landscape" kind="class" language="C++" prot="public">
    <compoundname>Landscape</compoundname>
    <includes refid="_landscape_8h" local="no">Landscape.h</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="class_landscape_1a0458438a91632e19343e3cf8c2d994f1" prot="protected" static="no">
        <type>unsigned long(Landscape::*</type>
        <definition>typedef unsigned long(Landscape::* Landscape::fptr) (const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</definition>
        <argsstring>)(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</argsstring>
        <name>fptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="124" column="1" bodyfile="necsim/Landscape.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_landscape_1a8947e46b9be54b42a93fb0792d4a9ed4" prot="protected" static="no" mutable="no">
        <type>Map&lt; uint32_t &gt;</type>
        <definition>Map&lt;uint32_t&gt; Landscape::fine_map</definition>
        <argsstring></argsstring>
        <name>fine_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="66" column="1" bodyfile="necsim/Landscape.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a5e34fe2e75c3b84657a4edc75f9fcdec" prot="protected" static="no" mutable="no">
        <type>Map&lt; uint32_t &gt;</type>
        <definition>Map&lt;uint32_t&gt; Landscape::historical_fine_map</definition>
        <argsstring></argsstring>
        <name>historical_fine_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="68" column="1" bodyfile="necsim/Landscape.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a58c8bb6432b578dac46bdbdba9e759c9" prot="protected" static="no" mutable="no">
        <type>Map&lt; uint32_t &gt;</type>
        <definition>Map&lt;uint32_t&gt; Landscape::coarse_map</definition>
        <argsstring></argsstring>
        <name>coarse_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="70" column="1" bodyfile="necsim/Landscape.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a5ac41db1c48869d974c97393eb548dd8" prot="protected" static="no" mutable="no">
        <type>Map&lt; uint32_t &gt;</type>
        <definition>Map&lt;uint32_t&gt; Landscape::historical_coarse_map</definition>
        <argsstring></argsstring>
        <name>historical_coarse_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="72" column="1" bodyfile="necsim/Landscape.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1aa3de03e94cea3c560df40bfa78b79f54" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref> *</type>
        <definition>SimParameters* Landscape::mapvars</definition>
        <argsstring></argsstring>
        <name>mapvars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="74" column="1" bodyfile="necsim/Landscape.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a95634ae0e15826160ad5c58a4093130d" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::fine_x_min</definition>
        <argsstring></argsstring>
        <name>fine_x_min</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="76" column="1" bodyfile="necsim/Landscape.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a90e7fe904c80133338ac19aa13534ef9" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::fine_y_min</definition>
        <argsstring></argsstring>
        <name>fine_y_min</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="76" column="1" bodyfile="necsim/Landscape.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a39dba789588465fe23055988ac52f217" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::coarse_x_min</definition>
        <argsstring></argsstring>
        <name>coarse_x_min</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="76" column="1" bodyfile="necsim/Landscape.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a23b1484f4694fbc2a7c79af8d5e3fce5" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::coarse_y_min</definition>
        <argsstring></argsstring>
        <name>coarse_y_min</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="76" column="1" bodyfile="necsim/Landscape.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1ac52242e6c558deb9a80478497d7320bc" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::fine_x_max</definition>
        <argsstring></argsstring>
        <name>fine_x_max</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="78" column="1" bodyfile="necsim/Landscape.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1aaea622624838abd58a05597d6f76b121" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::fine_y_max</definition>
        <argsstring></argsstring>
        <name>fine_y_max</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="78" column="1" bodyfile="necsim/Landscape.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a73283359848d8c8119084d7d9f5a3bfe" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::coarse_x_max</definition>
        <argsstring></argsstring>
        <name>coarse_x_max</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="78" column="1" bodyfile="necsim/Landscape.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1adf5a2af1186ab939bb90dde23a27f60c" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::coarse_y_max</definition>
        <argsstring></argsstring>
        <name>coarse_y_max</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="78" column="1" bodyfile="necsim/Landscape.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a899905b0ac6d0404df55f0e940dcaed3" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::fine_x_offset</definition>
        <argsstring></argsstring>
        <name>fine_x_offset</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="80" column="1" bodyfile="necsim/Landscape.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a877f2a63c37fc4c8c2a06a92d3a6e71b" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::fine_y_offset</definition>
        <argsstring></argsstring>
        <name>fine_y_offset</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="80" column="1" bodyfile="necsim/Landscape.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1af63078d425659fd16d4e43e9c47aaa8c" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::coarse_x_offset</definition>
        <argsstring></argsstring>
        <name>coarse_x_offset</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="80" column="1" bodyfile="necsim/Landscape.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a148b32c4e5d520e9f243c696f3f2c87b" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::coarse_y_offset</definition>
        <argsstring></argsstring>
        <name>coarse_y_offset</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="80" column="1" bodyfile="necsim/Landscape.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1ac37c42cb1cd73762d9d8b26aaa48515f" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::scale</definition>
        <argsstring></argsstring>
        <name>scale</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="82" column="1" bodyfile="necsim/Landscape.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a5784be0f55885e8ef1dd50465a5d63d8" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::x_dim</definition>
        <argsstring></argsstring>
        <name>x_dim</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="84" column="1" bodyfile="necsim/Landscape.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1ac094722ad10e8bafffdf45483cb3fcaa" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Landscape::y_dim</definition>
        <argsstring></argsstring>
        <name>y_dim</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="86" column="1" bodyfile="necsim/Landscape.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1abd51cdc30074be8d7fb1a1ceeb0d4a08" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::deme</definition>
        <argsstring></argsstring>
        <name>deme</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="87" column="1" bodyfile="necsim/Landscape.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a1c30f0ba1b668f7f6913f4d5c40ac53b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Landscape::check_set_dim</definition>
        <argsstring></argsstring>
        <name>check_set_dim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="89" column="1" bodyfile="necsim/Landscape.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1ab8bab4e21c685214909cbbc4778fabd6" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Landscape::dispersal_relative_cost</definition>
        <argsstring></argsstring>
        <name>dispersal_relative_cost</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="91" column="1" bodyfile="necsim/Landscape.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a6a3b5496ba13ddaba8940bc16cbf38e9" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Landscape::update_time</definition>
        <argsstring></argsstring>
        <name>update_time</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="93" column="1" bodyfile="necsim/Landscape.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1af58f378233b6143a4b38987573a2ea98" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Landscape::habitat_change_rate</definition>
        <argsstring></argsstring>
        <name>habitat_change_rate</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="96" column="1" bodyfile="necsim/Landscape.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a780302ea1b4320e137c31e766bb8a1ae" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Landscape::gen_since_historical</definition>
        <argsstring></argsstring>
        <name>gen_since_historical</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="98" column="1" bodyfile="necsim/Landscape.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1addbe4d0513a863384085e839d47d78ad" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Landscape::current_map_time</definition>
        <argsstring></argsstring>
        <name>current_map_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="100" column="1" bodyfile="necsim/Landscape.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a6d45f993b8d922286b349bcd0a679843" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Landscape::is_historical</definition>
        <argsstring></argsstring>
        <name>is_historical</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="102" column="1" bodyfile="necsim/Landscape.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a7c92406ace422080c978fbf6c2b8d4ab" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Landscape::has_historical</definition>
        <argsstring></argsstring>
        <name>has_historical</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="104" column="1" bodyfile="necsim/Landscape.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1ae0f64209a3747b1f023da89254683490" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::habitat_max</definition>
        <argsstring></argsstring>
        <name>habitat_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="106" column="1" bodyfile="necsim/Landscape.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a5b36f28911c3b7484b89d357b85849a9" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::fine_max</definition>
        <argsstring></argsstring>
        <name>fine_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="108" column="1" bodyfile="necsim/Landscape.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a4ce133d5e07e46f127bfa4f47597dcec" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::coarse_max</definition>
        <argsstring></argsstring>
        <name>coarse_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="110" column="1" bodyfile="necsim/Landscape.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a86e67628c5ad3426f1f258e35ab5e4df" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::historical_fine_max</definition>
        <argsstring></argsstring>
        <name>historical_fine_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="112" column="1" bodyfile="necsim/Landscape.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1aa79ae2cca59b135591c3cb978f14ee2a" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::historical_coarse_max</definition>
        <argsstring></argsstring>
        <name>historical_coarse_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="114" column="1" bodyfile="necsim/Landscape.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a2bed03fc250afab4f9341da6f1f6c0da" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Landscape::landscape_type</definition>
        <argsstring></argsstring>
        <name>landscape_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="116" column="1" bodyfile="necsim/Landscape.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a7e16bed309816971071c17ad0ebf94e5" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Landscape::NextMap</definition>
        <argsstring></argsstring>
        <name>NextMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="117" column="1" bodyfile="necsim/Landscape.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a0389b53426acd490ec77f94d9897f130" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Landscape::has_coarse</definition>
        <argsstring></argsstring>
        <name>has_coarse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="119" column="1" bodyfile="necsim/Landscape.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1ae4830197a96ec263ee533b65aac8d2e6" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Landscape::nUpdate</definition>
        <argsstring></argsstring>
        <name>nUpdate</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="121" column="1" bodyfile="necsim/Landscape.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_landscape_1a3cca2f0650d5979668f2a22753f965b9" prot="protected" static="no" mutable="no">
        <type>fptr</type>
        <definition>fptr Landscape::getValFunc</definition>
        <argsstring></argsstring>
        <name>getValFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="127" column="1" bodyfile="necsim/Landscape.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_landscape_1a0a54d8aabc38c0a5aa27ccace3f91915" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Landscape::Landscape</definition>
        <argsstring>()</argsstring>
        <name>Landscape</name>
        <briefdescription>
<para>The default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="132" column="1" bodyfile="necsim/Landscape.h" bodystart="132" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a99fac44043825a97e2e7fbc71caeb8e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::getHabitatMax</definition>
        <argsstring>()</argsstring>
        <name>getHabitatMax</name>
        <briefdescription>
<para>Gets the maximum habitat value from any map. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the maximum habitat value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="153" column="1" bodyfile="necsim/Landscape.cpp" bodystart="979" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1ad8e9a0520be7426592aa1d8c91227f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Landscape::hasHistorical</definition>
        <argsstring>()</argsstring>
        <name>hasHistorical</name>
        <briefdescription>
<para>Returns if the simulation is using historical maps. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if using historical maps </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="159" column="1" bodyfile="necsim/Landscape.cpp" bodystart="984" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1acc47e50bdad6af7f2bbed57db73f6730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::setDims</definition>
        <argsstring>(SimParameters *mapvarsin)</argsstring>
        <name>setDims</name>
        <param>
          <type><ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref> *</type>
          <declname>mapvarsin</declname>
        </param>
        <briefdescription>
<para>Sets the dimensions of the grid, the area where the species are initially sampled from. This function must be run before any of the calc map functions to allow for the correct deme allocation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mapvarsin</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref> object containing the map variables to import </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="166" column="1" bodyfile="necsim/Landscape.cpp" bodystart="71" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1ab7d8cd906a44c24a7f120362563d1217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Landscape::checkMapExists</definition>
        <argsstring>()</argsstring>
        <name>checkMapExists</name>
        <briefdescription>
<para>Checks that the map files exist (or are none/null). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all the paths exist in configs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="173" column="1" bodyfile="necsim/Landscape.cpp" bodystart="99" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1ad500af94a2afd577e682b3c042cab217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::calcFineMap</definition>
        <argsstring>()</argsstring>
        <name>calcFineMap</name>
        <briefdescription>
<para>Imports the fine map object from file and calculates the correct values at each point. Without a map to input, the fine map will simply be a matrix of 1s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="179" column="1" bodyfile="necsim/Landscape.cpp" bodystart="112" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1aa1861f8971b5dad0904284f8d873da3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::calcHistoricalFineMap</definition>
        <argsstring>()</argsstring>
        <name>calcHistoricalFineMap</name>
        <briefdescription>
<para>Imports the historical fine map object from file and calculates the correct values at each point. Without a map to input, the historical fine map will simply be a matrix of 1s. This has the potential to be changed easily in future versions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="186" column="1" bodyfile="necsim/Landscape.cpp" bodystart="125" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a2b34dcd828e0006dde9e60315cbddac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::calcCoarseMap</definition>
        <argsstring>()</argsstring>
        <name>calcCoarseMap</name>
        <briefdescription>
<para>Imports the coarse map object from file and calculates the correct values at each point. Without a map to input, the coarse map will simply be a matrix of 1s. This has the potential to be changed easily in future versions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="193" column="1" bodyfile="necsim/Landscape.cpp" bodystart="142" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a2ac3d30b203ecb73d0b2a126a4ed8acf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::calcHistoricalCoarseMap</definition>
        <argsstring>()</argsstring>
        <name>calcHistoricalCoarseMap</name>
        <briefdescription>
<para>Imports the historical coarse map object from file and calculates the correct values at each point. Without a map to input, the historical coarse map will simply be a matrix of 1s. This has the potential to be changed easily in future versions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="200" column="1" bodyfile="necsim/Landscape.cpp" bodystart="159" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1ac8aa9b3c8003cbc52c929e7532c0b0aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::setTimeVars</definition>
        <argsstring>(double gen_since_historical_in, double habitat_change_rate_in)</argsstring>
        <name>setTimeVars</name>
        <param>
          <type>double</type>
          <declname>gen_since_historical_in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>habitat_change_rate_in</declname>
        </param>
        <briefdescription>
<para>Sets the time variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gen_since_historical_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the time (in generations) since a historical habitat state was achieved. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>habitat_change_rate_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the rate of transform of the habitat up until the historical time. A value of 0.2 would mean 20% of the change occurs linearlly up until the historical time and the remaining 80% occurs in a jump to the historical state. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="209" column="1" bodyfile="necsim/Landscape.cpp" bodystart="179" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1ae4d6050ab25b5c0dca01446b0e59bfb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::calcOffset</definition>
        <argsstring>()</argsstring>
        <name>calcOffset</name>
        <briefdescription>
<para>Calculates the offset and extremeties of the fine map. </para>        </briefdescription>
        <detaileddescription>
<para>Note that setting dispersal_relative_cost to a value other than 1 can massively increase simulation time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="217" column="1" bodyfile="necsim/Landscape.cpp" bodystart="186" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a998dcf0659841398c2eb336c91ecdfba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Landscape::checkAllDimensionsZero</definition>
        <argsstring>()</argsstring>
        <name>checkAllDimensionsZero</name>
        <briefdescription>
<para>Checks that all dimensions for all maps are zero. </para>        </briefdescription>
        <detaileddescription>
<para>If this is true, then it means we can calculate actual offsets and dimensions from the maps, otherwise the values from the parameters will be used.</para><para><simplesect kind="return"><para>true if all map offsets are zero </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="227" column="1" bodyfile="necsim/Landscape.cpp" bodystart="233" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a67fc255ef73d331034f2a626117035e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::calculateOffsetsFromMaps</definition>
        <argsstring>()</argsstring>
        <name>calculateOffsetsFromMaps</name>
        <briefdescription>
<para>Calculates the offsets from the map files directly. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes that all required maps have been imported. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="234" column="1" bodyfile="necsim/Landscape.cpp" bodystart="241" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a739549f09fbfbc36674e1a27ad8e9363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::calculateOffsetsFromParameters</definition>
        <argsstring>()</argsstring>
        <name>calculateOffsetsFromParameters</name>
        <briefdescription>
<para>Uses the inputted parameters to set the offsets for the map files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="239" column="1" bodyfile="necsim/Landscape.cpp" bodystart="317" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a9181afc2546082c9d4798e16e033b0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::validateMaps</definition>
        <argsstring>()</argsstring>
        <name>validateMaps</name>
        <briefdescription>
<para>Checks that the map file sizes are correct and that each value on the fragmented maps is less than the historical maps. This should be disabled in simulations where habitat sizes are expected to shrink as well as grow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="245" column="1" bodyfile="necsim/Landscape.cpp" bodystart="349" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1aa96c5208ad89b2e620b52f80b0937dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::updateMap</definition>
        <argsstring>(double generation)</argsstring>
        <name>updateMap</name>
        <param>
          <type>double</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Checks if an update needs to be performed to the map configuration, and if it does, performs the update. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation timer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="251" column="1" bodyfile="necsim/Landscape.cpp" bodystart="432" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a1669ae6563ef5ed11ce1da30fb28214b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::doUpdate</definition>
        <argsstring>()</argsstring>
        <name>doUpdate</name>
        <briefdescription>
<para>Updates the historical map configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation timer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="257" column="1" bodyfile="necsim/Landscape.cpp" bodystart="455" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a03e35a3a42e40a683be01e75413d30d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::resetHistorical</definition>
        <argsstring>()</argsstring>
        <name>resetHistorical</name>
        <briefdescription>
<para>Resets the historical variables to recalculate historical maps. </para>        </briefdescription>
        <detaileddescription>
<para>Required for rcoalescence compatability. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="263" column="1" bodyfile="necsim/Landscape.cpp" bodystart="476" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1ab302f8a4ae779d20df94cb2525187cac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Landscape::isHistorical</definition>
        <argsstring>()</argsstring>
        <name>isHistorical</name>
        <briefdescription>
<para>Gets the historical boolean. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the historical map state. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="269" column="1" bodyfile="necsim/Landscape.h" bodystart="269" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a7b1c5459e1ecf8d11c1dd12299a53c61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::setHistorical</definition>
        <argsstring>(const bool &amp;historical_in)</argsstring>
        <name>setHistorical</name>
        <param>
          <type>const bool &amp;</type>
          <declname>historical_in</declname>
        </param>
        <briefdescription>
<para>Sets the historical state of the system. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>historical_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the historical state. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="282" column="1" bodyfile="necsim/Landscape.h" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a6b15e6748d7d776deaa489e618750983" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Landscape::getHistorical</definition>
        <argsstring>()</argsstring>
        <name>getHistorical</name>
        <briefdescription>
<para>Get the historical map time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double the historical map time </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="291" column="1" bodyfile="necsim/Landscape.h" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a5dec397270e8278478f807660e43d565" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Landscape::getLandscapeType</definition>
        <argsstring>()</argsstring>
        <name>getLandscapeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="296" column="1" bodyfile="necsim/Landscape.h" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1ae4a7ae12f299407d5c379fd20ed2ccbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::checkHistorical</definition>
        <argsstring>(double generation)</argsstring>
        <name>checkHistorical</name>
        <param>
          <type>double</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Checks if the historical state has been reached. </para>        </briefdescription>
        <detaileddescription>
<para>If there are no historical maps, this function will do nothing. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to check at. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="307" column="1" bodyfile="necsim/Landscape.h" bodystart="307" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a63150f634d7936439bc5a1d20b84a7b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::setLandscape</definition>
        <argsstring>(string is_infinite)</argsstring>
        <name>setLandscape</name>
        <param>
          <type>string</type>
          <declname>is_infinite</declname>
        </param>
        <briefdescription>
<para>Sets the landscape functions to either infinite or finite. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_infinite</parametername>
</parameternamelist>
<parameterdescription>
<para>a string of either closed, infinite, tiled_fine or tiled_coarse, corresponding to the relevant landscape type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="325" column="1" bodyfile="necsim/Landscape.cpp" bodystart="482" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a06dbce690810d8d771490c310cb96310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::getVal</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getVal</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version involves a call to the function pointer, *getValFunc, so that the correct call to either <ref refid="class_landscape_1a736605cefe34af236a4f8da38276a12e" kindref="member">getValFinite()</ref> or getValInfinite is made. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="339" column="1" bodyfile="necsim/Landscape.cpp" bodystart="509" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1aa98fad5a154486dbb0bca6056e19399c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::getValCoarse</definition>
        <argsstring>(const double &amp;xval, const double &amp;yval, const double &amp;current_generation)</argsstring>
        <name>getValCoarse</name>
        <param>
          <type>const double &amp;</type>
          <declname>xval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value from the coarse maps, including linear interpolating between the historical and present maps. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xval</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yval</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation timer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the map at the given coordinates and time </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="349" column="1" bodyfile="necsim/Landscape.cpp" bodystart="573" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a33a1d5c3fba6c895ad3d390a547e0361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::getValFine</definition>
        <argsstring>(const double &amp;xval, const double &amp;yval, const double &amp;current_generation)</argsstring>
        <name>getValFine</name>
        <param>
          <type>const double &amp;</type>
          <declname>xval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value from the fine maps, including linear interpolating between the historical and present maps. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xval</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yval</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation timer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the map at the given coordinates and time </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="358" column="1" bodyfile="necsim/Landscape.cpp" bodystart="611" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a736605cefe34af236a4f8da38276a12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::getValFinite</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getValFinite</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes finite landscape. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="370" column="1" bodyfile="necsim/Landscape.cpp" bodystart="654" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a98762916e5acb685338016b88abae251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::getValInfinite</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getValInfinite</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="383" column="1" bodyfile="necsim/Landscape.cpp" bodystart="515" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a4b9ec1da69d6ce6720da7cd57cddad30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::getValCoarseTiled</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getValCoarseTiled</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape of tiled coarse maps. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="397" column="1" bodyfile="necsim/Landscape.cpp" bodystart="529" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a4e3ee0a3c83904131415abdaba111218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::getValFineTiled</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;current_generation)</argsstring>
        <name>getValFineTiled</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>current_generation</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape of tiled fine maps. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="411" column="1" bodyfile="necsim/Landscape.cpp" bodystart="545" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a03e9dfbcd6eab3532bf8cf333dd43513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::convertSampleXToFineX</definition>
        <argsstring>(const unsigned long &amp;x, const long &amp;xwrap)</argsstring>
        <name>convertSampleXToFineX</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <briefdescription>
<para>Gets the x position on the fine map, given an x and x wrapping. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this function will not check if the value is actually within bounds of the fine map, and an error will likely be thrown by the matrix referencing if this is the case. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate on the sample mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the x wrapping of the sample mask. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the x location on the fine map </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="423" column="1" bodyfile="necsim/Landscape.cpp" bodystart="685" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a20bce25a388ec094f4c3fa8600c22545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::convertSampleYToFineY</definition>
        <argsstring>(const unsigned long &amp;y, const long &amp;ywrap)</argsstring>
        <name>convertSampleYToFineY</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Gets the y position on the fine map, given a y and y wrapping. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this function will not check if the value is actually within bounds of the fine map, and an error will likely be thrown by the matrix referencing if this is the case. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate on the sample mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the y wrapping of the sample mask. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the y location on the fine map </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="434" column="1" bodyfile="necsim/Landscape.cpp" bodystart="690" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a33e5909b7d430caf0f4fb909ba3e0499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::convertFineToSample</definition>
        <argsstring>(long &amp;x, long &amp;xwrap, long &amp;y, long &amp;ywrap)</argsstring>
        <name>convertFineToSample</name>
        <param>
          <type>long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Converts the fine map coordinates to the sample grid coordinates. Main conversion is in a call to convertCoordinates, but also makes sure the returned types are long integers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the x wrapping to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the y wrapping to modify </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="444" column="1" bodyfile="necsim/Landscape.cpp" bodystart="695" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1ae8d533d9a8fff3a96c240aadaeac3f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::getInitialCount</definition>
        <argsstring>(double dSample, DataMask &amp;samplemask)</argsstring>
        <name>getInitialCount</name>
        <param>
          <type>double</type>
          <declname>dSample</declname>
        </param>
        <param>
          <type><ref refid="class_data_mask" kindref="compound">DataMask</ref> &amp;</type>
          <declname>samplemask</declname>
        </param>
        <briefdescription>
<para>Counts the number of spaces available in the initial species space. Requires the samplemask to check the sampling area. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dSample</parametername>
</parameternamelist>
<parameterdescription>
<para>the sample proportion (from 0 to 1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samplemask</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_data_mask" kindref="compound">DataMask</ref> object to sample from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the total number of individuals predicted to initially exist on the map. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="452" column="1" bodyfile="necsim/Landscape.cpp" bodystart="705" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a679bb7a577f9404093b5aa8d17ba049e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref> *</type>
        <definition>SimParameters * Landscape::getSimParameters</definition>
        <argsstring>()</argsstring>
        <name>getSimParameters</name>
        <briefdescription>
<para>Gets the mapvars object pointer for referencing simulation parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="458" column="1" bodyfile="necsim/Landscape.cpp" bodystart="738" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a24de83f1e8f762b9640cdba35793a404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Landscape::checkMap</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double generation)</argsstring>
        <name>checkMap</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Checks whether the point is habitat or non-habitat. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean of whether the map is habitat or non-habitat. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="469" column="1" bodyfile="necsim/Landscape.cpp" bodystart="747" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a0545765b734539f622804bb3aa72e38c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Landscape::checkFine</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap)</argsstring>
        <name>checkFine</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Checks whether the point comes from the fine grid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean of whether the location is on the fine map. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="479" column="1" bodyfile="necsim/Landscape.cpp" bodystart="752" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a5aa0fca1b87ab838ebab933ef6daf4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::fixGridCoordinates</definition>
        <argsstring>(double &amp;x, double &amp;y, long &amp;xwrap, long &amp;ywrap)</argsstring>
        <name>fixGridCoordinates</name>
        <param>
          <type>double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Fixes the coordinates to be correctly within the original grid, altering the xwrap and ywrap consequently. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="488" column="1" bodyfile="necsim/Landscape.cpp" bodystart="760" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1aedc33de89997456d53cceb3e4e424e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Landscape::runDispersal</definition>
        <argsstring>(const double &amp;dist, const double &amp;angle, long &amp;startx, long &amp;starty, long &amp;startxwrap, long &amp;startywrap, bool &amp;disp_comp, const double &amp;generation)</argsstring>
        <name>runDispersal</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>startx</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>starty</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>startxwrap</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>startywrap</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>disp_comp</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>The function that actually performs the dispersal. It is included here for easier programming and efficiency as the function doesn&apos;t need to perform all the checks until the edge of the fine grid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance travelled (or &quot;distance energy&quot; if dispersal_relative_cost is not 1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle of movement. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startx</parametername>
</parameternamelist>
<parameterdescription>
<para>the start x position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>starty</parametername>
</parameternamelist>
<parameterdescription>
<para>the start y position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startxwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the start number of wraps in the x dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the start number of wraps in the y dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>disp_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean of whether the dispersal was complete or not. This value is returned false if dispersal is to habitat, false otherwise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the time in generations since the start of the simulation. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the density value at the end dispersal point </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="505" column="1" bodyfile="necsim/Landscape.cpp" bodystart="768" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a9b867a59c88f754bae6788451845b698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string Landscape::printVars</definition>
        <argsstring>()</argsstring>
        <name>printVars</name>
        <briefdescription>
<para>Prints some selected Map variables to the terminal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string containing the map variables to print </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="570" column="1" bodyfile="necsim/Landscape.cpp" bodystart="967" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1a28d01a593cbaf9d8fde9c2e1da996f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::clearMap</definition>
        <argsstring>()</argsstring>
        <name>clearMap</name>
        <briefdescription>
<para>Wipes the map of all variables. Only really useful for testing purposes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="575" column="1" bodyfile="necsim/Landscape.cpp" bodystart="960" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="class_landscape_1abaf14ac4da88cd26f6593bdaa88d999f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Landscape::recalculateHabitatMax</definition>
        <argsstring>()</argsstring>
        <name>recalculateHabitatMax</name>
        <briefdescription>
<para>Recalculates the habitat map maximum by checking the maximums for each of the relevant map files (fine, coarse and historicals). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="581" column="1" bodyfile="necsim/Landscape.cpp" bodystart="989" bodyend="1031"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_landscape_1a1c309185f0c3a601f27c932f1f2fa886" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Landscape &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_landscape" kindref="compound">Landscape</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Operator for outputting the Map object variables to an output stream. This is used for storing the Map object to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the Map object to output. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="515" column="1" bodyfile="necsim/Landscape.h" bodystart="515" bodyend="532"/>
      </memberdef>
      <memberdef kind="friend" id="class_landscape_1a8b9beb241ad534346dc98d24f6bb9279" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Landscape &amp;r)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="class_landscape" kindref="compound">Landscape</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Operator for inputting the Map object variables from an input stream. This is used for reading the Map object from file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the Map object to input to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="necsim/Landscape.h" line="541" column="1" bodyfile="necsim/Landscape.h" bodystart="541" bodyend="564"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains all maps and provides the functions for accessing a grid cell in the correct temporal and spacial location. </para>    </briefdescription>
    <detaileddescription>
<para>The function <ref refid="class_landscape_1aedc33de89997456d53cceb3e4e424e64" kindref="member">runDispersal()</ref> also provides the move routine, provided two alternative methods for moving individuals. Contains routines for easy setting up and switching between the different coordinate systems required. Set the map parameters with <ref refid="class_landscape_1acc47e50bdad6af7f2bbed57db73f6730" kindref="member">setDims()</ref>, import the map files with <ref refid="class_landscape_1ad500af94a2afd577e682b3c042cab217" kindref="member">calcFineMap()</ref>, <ref refid="class_landscape_1a2b34dcd828e0006dde9e60315cbddac8" kindref="member">calcCoarseMap()</ref> etc, then set up the landscape type using <ref refid="class_landscape_1a63150f634d7936439bc5a1d20b84a7b2" kindref="member">setLandscape()</ref> and sethistorical(). Usage is then by <ref refid="class_landscape_1aedc33de89997456d53cceb3e4e424e64" kindref="member">runDispersal()</ref> for running a dispersal kernel on the landscape, and then <ref refid="class_landscape_1a06dbce690810d8d771490c310cb96310" kindref="member">getVal()</ref> to obtain the density at the desired coordinates. All coordinates should be given in reference to the simulation grid, and offsets for the fine and coarse map are calculated automatically. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="789">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="788">
        <label>ConfigOption</label>
        <link refid="class_config_option"/>
      </node>
      <node id="786">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="787">
        <label>SimParameters</label>
        <link refid="struct_sim_parameters"/>
        <childnode refid="788" relation="usage">
          <edgelabel>configs</edgelabel>
        </childnode>
        <childnode refid="785" relation="usage">
          <edgelabel>reproduction_file</edgelabel>
          <edgelabel>times_file</edgelabel>
          <edgelabel>sample_mask_file</edgelabel>
          <edgelabel>fine_map_file</edgelabel>
          <edgelabel>dispersal_method</edgelabel>
          <edgelabel>dispersal_file</edgelabel>
          <edgelabel>historical_fine_map_file</edgelabel>
          <edgelabel>historical_coarse_map_file</edgelabel>
          <edgelabel>output_directory</edgelabel>
          <edgelabel>coarse_map_file</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="789" relation="usage">
          <edgelabel>times</edgelabel>
        </childnode>
      </node>
      <node id="784">
        <label>Landscape</label>
        <link refid="class_landscape"/>
        <childnode refid="785" relation="usage">
          <edgelabel>NextMap</edgelabel>
          <edgelabel>landscape_type</edgelabel>
        </childnode>
        <childnode refid="787" relation="usage">
          <edgelabel>mapvars</edgelabel>
        </childnode>
      </node>
      <node id="785">
        <label>std::string</label>
        <childnode refid="786" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="necsim/Landscape.h" line="59" column="1" bodyfile="necsim/Landscape.h" bodystart="58" bodyend="583"/>
    <listofallmembers>
      <member refid="class_landscape_1a2b34dcd828e0006dde9e60315cbddac8" prot="public" virt="non-virtual"><scope>Landscape</scope><name>calcCoarseMap</name></member>
      <member refid="class_landscape_1ad500af94a2afd577e682b3c042cab217" prot="public" virt="non-virtual"><scope>Landscape</scope><name>calcFineMap</name></member>
      <member refid="class_landscape_1a2ac3d30b203ecb73d0b2a126a4ed8acf" prot="public" virt="non-virtual"><scope>Landscape</scope><name>calcHistoricalCoarseMap</name></member>
      <member refid="class_landscape_1aa1861f8971b5dad0904284f8d873da3a" prot="public" virt="non-virtual"><scope>Landscape</scope><name>calcHistoricalFineMap</name></member>
      <member refid="class_landscape_1ae4d6050ab25b5c0dca01446b0e59bfb1" prot="public" virt="non-virtual"><scope>Landscape</scope><name>calcOffset</name></member>
      <member refid="class_landscape_1a67fc255ef73d331034f2a626117035e8" prot="public" virt="non-virtual"><scope>Landscape</scope><name>calculateOffsetsFromMaps</name></member>
      <member refid="class_landscape_1a739549f09fbfbc36674e1a27ad8e9363" prot="public" virt="non-virtual"><scope>Landscape</scope><name>calculateOffsetsFromParameters</name></member>
      <member refid="class_landscape_1a1c30f0ba1b668f7f6913f4d5c40ac53b" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>check_set_dim</name></member>
      <member refid="class_landscape_1a998dcf0659841398c2eb336c91ecdfba" prot="public" virt="non-virtual"><scope>Landscape</scope><name>checkAllDimensionsZero</name></member>
      <member refid="class_landscape_1a0545765b734539f622804bb3aa72e38c" prot="public" virt="non-virtual"><scope>Landscape</scope><name>checkFine</name></member>
      <member refid="class_landscape_1ae4a7ae12f299407d5c379fd20ed2ccbc" prot="public" virt="non-virtual"><scope>Landscape</scope><name>checkHistorical</name></member>
      <member refid="class_landscape_1a24de83f1e8f762b9640cdba35793a404" prot="public" virt="non-virtual"><scope>Landscape</scope><name>checkMap</name></member>
      <member refid="class_landscape_1ab7d8cd906a44c24a7f120362563d1217" prot="public" virt="non-virtual"><scope>Landscape</scope><name>checkMapExists</name></member>
      <member refid="class_landscape_1a28d01a593cbaf9d8fde9c2e1da996f91" prot="public" virt="non-virtual"><scope>Landscape</scope><name>clearMap</name></member>
      <member refid="class_landscape_1a58c8bb6432b578dac46bdbdba9e759c9" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>coarse_map</name></member>
      <member refid="class_landscape_1a4ce133d5e07e46f127bfa4f47597dcec" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>coarse_max</name></member>
      <member refid="class_landscape_1a73283359848d8c8119084d7d9f5a3bfe" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>coarse_x_max</name></member>
      <member refid="class_landscape_1a39dba789588465fe23055988ac52f217" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>coarse_x_min</name></member>
      <member refid="class_landscape_1af63078d425659fd16d4e43e9c47aaa8c" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>coarse_x_offset</name></member>
      <member refid="class_landscape_1adf5a2af1186ab939bb90dde23a27f60c" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>coarse_y_max</name></member>
      <member refid="class_landscape_1a23b1484f4694fbc2a7c79af8d5e3fce5" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>coarse_y_min</name></member>
      <member refid="class_landscape_1a148b32c4e5d520e9f243c696f3f2c87b" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>coarse_y_offset</name></member>
      <member refid="class_landscape_1a33e5909b7d430caf0f4fb909ba3e0499" prot="public" virt="non-virtual"><scope>Landscape</scope><name>convertFineToSample</name></member>
      <member refid="class_landscape_1a03e9dfbcd6eab3532bf8cf333dd43513" prot="public" virt="non-virtual"><scope>Landscape</scope><name>convertSampleXToFineX</name></member>
      <member refid="class_landscape_1a20bce25a388ec094f4c3fa8600c22545" prot="public" virt="non-virtual"><scope>Landscape</scope><name>convertSampleYToFineY</name></member>
      <member refid="class_landscape_1addbe4d0513a863384085e839d47d78ad" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>current_map_time</name></member>
      <member refid="class_landscape_1abd51cdc30074be8d7fb1a1ceeb0d4a08" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>deme</name></member>
      <member refid="class_landscape_1ab8bab4e21c685214909cbbc4778fabd6" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>dispersal_relative_cost</name></member>
      <member refid="class_landscape_1a1669ae6563ef5ed11ce1da30fb28214b" prot="public" virt="non-virtual"><scope>Landscape</scope><name>doUpdate</name></member>
      <member refid="class_landscape_1a8947e46b9be54b42a93fb0792d4a9ed4" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>fine_map</name></member>
      <member refid="class_landscape_1a5b36f28911c3b7484b89d357b85849a9" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>fine_max</name></member>
      <member refid="class_landscape_1ac52242e6c558deb9a80478497d7320bc" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>fine_x_max</name></member>
      <member refid="class_landscape_1a95634ae0e15826160ad5c58a4093130d" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>fine_x_min</name></member>
      <member refid="class_landscape_1a899905b0ac6d0404df55f0e940dcaed3" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>fine_x_offset</name></member>
      <member refid="class_landscape_1aaea622624838abd58a05597d6f76b121" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>fine_y_max</name></member>
      <member refid="class_landscape_1a90e7fe904c80133338ac19aa13534ef9" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>fine_y_min</name></member>
      <member refid="class_landscape_1a877f2a63c37fc4c8c2a06a92d3a6e71b" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>fine_y_offset</name></member>
      <member refid="class_landscape_1a5aa0fca1b87ab838ebab933ef6daf4a2" prot="public" virt="non-virtual"><scope>Landscape</scope><name>fixGridCoordinates</name></member>
      <member refid="class_landscape_1a0458438a91632e19343e3cf8c2d994f1" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>fptr</name></member>
      <member refid="class_landscape_1a780302ea1b4320e137c31e766bb8a1ae" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>gen_since_historical</name></member>
      <member refid="class_landscape_1a99fac44043825a97e2e7fbc71caeb8e2" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getHabitatMax</name></member>
      <member refid="class_landscape_1a6b15e6748d7d776deaa489e618750983" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getHistorical</name></member>
      <member refid="class_landscape_1ae8d533d9a8fff3a96c240aadaeac3f04" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getInitialCount</name></member>
      <member refid="class_landscape_1a5dec397270e8278478f807660e43d565" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getLandscapeType</name></member>
      <member refid="class_landscape_1a679bb7a577f9404093b5aa8d17ba049e" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getSimParameters</name></member>
      <member refid="class_landscape_1a06dbce690810d8d771490c310cb96310" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getVal</name></member>
      <member refid="class_landscape_1aa98fad5a154486dbb0bca6056e19399c" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getValCoarse</name></member>
      <member refid="class_landscape_1a4b9ec1da69d6ce6720da7cd57cddad30" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getValCoarseTiled</name></member>
      <member refid="class_landscape_1a33a1d5c3fba6c895ad3d390a547e0361" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getValFine</name></member>
      <member refid="class_landscape_1a4e3ee0a3c83904131415abdaba111218" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getValFineTiled</name></member>
      <member refid="class_landscape_1a736605cefe34af236a4f8da38276a12e" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getValFinite</name></member>
      <member refid="class_landscape_1a3cca2f0650d5979668f2a22753f965b9" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>getValFunc</name></member>
      <member refid="class_landscape_1a98762916e5acb685338016b88abae251" prot="public" virt="non-virtual"><scope>Landscape</scope><name>getValInfinite</name></member>
      <member refid="class_landscape_1af58f378233b6143a4b38987573a2ea98" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>habitat_change_rate</name></member>
      <member refid="class_landscape_1ae0f64209a3747b1f023da89254683490" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>habitat_max</name></member>
      <member refid="class_landscape_1a0389b53426acd490ec77f94d9897f130" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>has_coarse</name></member>
      <member refid="class_landscape_1a7c92406ace422080c978fbf6c2b8d4ab" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>has_historical</name></member>
      <member refid="class_landscape_1ad8e9a0520be7426592aa1d8c91227f3e" prot="public" virt="non-virtual"><scope>Landscape</scope><name>hasHistorical</name></member>
      <member refid="class_landscape_1a5ac41db1c48869d974c97393eb548dd8" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>historical_coarse_map</name></member>
      <member refid="class_landscape_1aa79ae2cca59b135591c3cb978f14ee2a" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>historical_coarse_max</name></member>
      <member refid="class_landscape_1a5e34fe2e75c3b84657a4edc75f9fcdec" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>historical_fine_map</name></member>
      <member refid="class_landscape_1a86e67628c5ad3426f1f258e35ab5e4df" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>historical_fine_max</name></member>
      <member refid="class_landscape_1a6d45f993b8d922286b349bcd0a679843" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>is_historical</name></member>
      <member refid="class_landscape_1ab302f8a4ae779d20df94cb2525187cac" prot="public" virt="non-virtual"><scope>Landscape</scope><name>isHistorical</name></member>
      <member refid="class_landscape_1a0a54d8aabc38c0a5aa27ccace3f91915" prot="public" virt="non-virtual"><scope>Landscape</scope><name>Landscape</name></member>
      <member refid="class_landscape_1a2bed03fc250afab4f9341da6f1f6c0da" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>landscape_type</name></member>
      <member refid="class_landscape_1aa3de03e94cea3c560df40bfa78b79f54" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>mapvars</name></member>
      <member refid="class_landscape_1a7e16bed309816971071c17ad0ebf94e5" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>NextMap</name></member>
      <member refid="class_landscape_1ae4830197a96ec263ee533b65aac8d2e6" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>nUpdate</name></member>
      <member refid="class_landscape_1a1c309185f0c3a601f27c932f1f2fa886" prot="public" virt="non-virtual"><scope>Landscape</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_landscape_1a8b9beb241ad534346dc98d24f6bb9279" prot="public" virt="non-virtual"><scope>Landscape</scope><name>operator&gt;&gt;</name></member>
      <member refid="class_landscape_1a9b867a59c88f754bae6788451845b698" prot="public" virt="non-virtual"><scope>Landscape</scope><name>printVars</name></member>
      <member refid="class_landscape_1abaf14ac4da88cd26f6593bdaa88d999f" prot="public" virt="non-virtual"><scope>Landscape</scope><name>recalculateHabitatMax</name></member>
      <member refid="class_landscape_1a03e35a3a42e40a683be01e75413d30d2" prot="public" virt="non-virtual"><scope>Landscape</scope><name>resetHistorical</name></member>
      <member refid="class_landscape_1aedc33de89997456d53cceb3e4e424e64" prot="public" virt="non-virtual"><scope>Landscape</scope><name>runDispersal</name></member>
      <member refid="class_landscape_1ac37c42cb1cd73762d9d8b26aaa48515f" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>scale</name></member>
      <member refid="class_landscape_1acc47e50bdad6af7f2bbed57db73f6730" prot="public" virt="non-virtual"><scope>Landscape</scope><name>setDims</name></member>
      <member refid="class_landscape_1a7b1c5459e1ecf8d11c1dd12299a53c61" prot="public" virt="non-virtual"><scope>Landscape</scope><name>setHistorical</name></member>
      <member refid="class_landscape_1a63150f634d7936439bc5a1d20b84a7b2" prot="public" virt="non-virtual"><scope>Landscape</scope><name>setLandscape</name></member>
      <member refid="class_landscape_1ac8aa9b3c8003cbc52c929e7532c0b0aa" prot="public" virt="non-virtual"><scope>Landscape</scope><name>setTimeVars</name></member>
      <member refid="class_landscape_1a6a3b5496ba13ddaba8940bc16cbf38e9" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>update_time</name></member>
      <member refid="class_landscape_1aa96c5208ad89b2e620b52f80b0937dff" prot="public" virt="non-virtual"><scope>Landscape</scope><name>updateMap</name></member>
      <member refid="class_landscape_1a9181afc2546082c9d4798e16e033b0f1" prot="public" virt="non-virtual"><scope>Landscape</scope><name>validateMaps</name></member>
      <member refid="class_landscape_1a5784be0f55885e8ef1dd50465a5d63d8" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>x_dim</name></member>
      <member refid="class_landscape_1ac094722ad10e8bafffdf45483cb3fcaa" prot="protected" virt="non-virtual"><scope>Landscape</scope><name>y_dim</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
