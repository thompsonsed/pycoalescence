<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_matrix" kind="class" language="C++" prot="public">
    <compoundname>Matrix</compoundname>
    <includes refid="_matrix_8h" local="no">Matrix.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_matrix_1a341aaedcfaac978957087bd0467dc527" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Matrix&lt; T &gt;::numCols</definition>
        <argsstring></argsstring>
        <name>numCols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="297" column="1" bodyfile="Matrix.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_matrix_1ac1e96667d48c7845708f978ddd17475d" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Matrix&lt; T &gt;::numRows</definition>
        <argsstring></argsstring>
        <name>numRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="297" column="1" bodyfile="Matrix.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_matrix_1a7a143ae112112155c9622ba17dc434c7" prot="protected" static="no" mutable="no">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; T &gt; *</type>
        <definition>Row&lt;T&gt;* Matrix&lt; T &gt;::matrix</definition>
        <argsstring></argsstring>
        <name>matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="299" column="1" bodyfile="Matrix.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_matrix_1a53f60218c002f2bb454695a1fc35c5d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Matrix&lt; T &gt;::Matrix</definition>
        <argsstring>(unsigned long rows=0, unsigned long cols=0)</argsstring>
        <name>Matrix</name>
        <param>
          <type>unsigned long</type>
          <declname>rows</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>cols</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>The standard constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>optionally provide the number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>optionally provide the number of columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="308" column="1" bodyfile="Matrix.h" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a3796b4f32dc8e11f908a90fd3dd39c45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Matrix&lt; T &gt;::Matrix</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="class_matrix" kindref="compound">Matrix</ref> object to copy from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="317" column="1" bodyfile="Matrix.h" bodystart="317" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a91aa704de674203e96aece9e1955ccd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Matrix&lt; T &gt;::~Matrix</definition>
        <argsstring>()</argsstring>
        <name>~Matrix</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="329" column="1" bodyfile="Matrix.h" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1afec0d39d2d97ec573024552983694a66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::SetSize</definition>
        <argsstring>(unsigned long rows, unsigned long cols)</argsstring>
        <name>SetSize</name>
        <param>
          <type>unsigned long</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
<para>Sets the matrix size. Similar concept to that for Rows. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="340" column="1" bodyfile="Matrix.h" bodystart="340" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a0467ce3fc5d310bd78e2c48ae4e80b45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Matrix&lt; T &gt;::GetCols</definition>
        <argsstring>() const </argsstring>
        <name>GetCols</name>
        <briefdescription>
<para>Getter for the number of columns. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of columns. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="367" column="1" bodyfile="Matrix.h" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a7c3e1fb8bf860913a03d874c02655ac2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Matrix&lt; T &gt;::GetRows</definition>
        <argsstring>() const </argsstring>
        <name>GetRows</name>
        <briefdescription>
<para>Getter for the number of rows. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of rows. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="376" column="1" bodyfile="Matrix.h" bodystart="376" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1ae7e14b4bd8bb570260a4e578e4a601b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; T &gt; &amp;</type>
        <definition>Row&lt;T&gt;&amp; Matrix&lt; T &gt;::operator[]</definition>
        <argsstring>(unsigned long index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>unsigned long</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Overoads the [] operator for <ref refid="class_matrix" kindref="compound">Matrix</ref>. Allows referencing of a value i,j using <ref refid="class_matrix" kindref="compound">Matrix</ref>[i][j]. Includes error checking for if the indices are out of range of the matrix. Note that this functionality has been altered since the original file generation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the row number to get the value from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the matrix row object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="392" column="1" bodyfile="Matrix.h" bodystart="392" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a94508f84ba0d62e81aa8d508aa43f1ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; Matrix&lt; T &gt;::operator=</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the = operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to copy from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="430" column="1" bodyfile="Matrix.h" bodystart="430" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a311f3649e41cb4a3155f3f71a65829cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>const Matrix Matrix&lt; T &gt;::operator+</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the + operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to add to this matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the matrix object which is the sum of the two matrices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="447" column="1" bodyfile="Matrix.h" bodystart="447" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a08e75978ea8288083ef36f53b4ac115d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>const Matrix Matrix&lt; T &gt;::operator-</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the - operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to subtract from this matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the matrix object which is the subtraction of the two matrices. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="486" column="1" bodyfile="Matrix.h" bodystart="486" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a480a72298ae1fc8443b0edfaa66d7c46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; Matrix&lt; T &gt;::operator+=</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the += operator so that the new object is written to the current object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_matrix" kindref="compound">Matrix</ref> object to add to this matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="523" column="1" bodyfile="Matrix.h" bodystart="523" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a0e459fd035b2435ea016dc93c55ccac0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; Matrix&lt; T &gt;::operator-=</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the -= operator so that the new object is written to the current object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_matrix" kindref="compound">Matrix</ref> object to subtract from this matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="562" column="1" bodyfile="Matrix.h" bodystart="562" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1ac4e94b307c56a15fb47a9255855f94a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>const Matrix Matrix&lt; T &gt;::operator*</definition>
        <argsstring>(const double s)</argsstring>
        <name>operator*</name>
        <param>
          <type>const double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Overloading the * operator for scaling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the constant to scale the matrix by. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the scaled matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="601" column="1" bodyfile="Matrix.h" bodystart="601" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1ac396cdd2d98e1b4d99f7e17c1c26b1ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>const Matrix Matrix&lt; T &gt;::operator*</definition>
        <argsstring>(Matrix &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the * operator for matrix multiplication. Multiplies each value in the matrix with its corresponding value in the other matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to multiply with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the product of each ith,jth value of the matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="621" column="1" bodyfile="Matrix.h" bodystart="621" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a2df813f38f535bde8d1c8ae00b9c2eb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Matrix&lt; T &gt;::symmetric</definition>
        <argsstring>()</argsstring>
        <name>symmetric</name>
        <briefdescription>
<para>Checks if the matrix is symmetric or not. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if matrix is symmetric, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="719" column="1" bodyfile="Matrix.h" bodystart="719" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a93ee02612d3a28747bdbe7667e3c3f29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;x, const unsigned long &amp;y, char *value, const double &amp;t)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Overloaded function for setting the (double) value of a matrix based on the template type of the matrix. This appears like a bit of a goofy workaround and there might be a better way of doing this, but it works. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the template class (passed to the function). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="744" column="1" bodyfile="Matrix.h" bodystart="744" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1ac742681e44a0b08c105ce7c16047ee20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;x, const unsigned long &amp;y, char *value, const char &amp;t)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Overloaded function for setting the (char) value of a matrix based on the template type of the matrix. This appears like a bit of a goofy workaround and there might be a better way of doing this, but it works. Note this version of the function has not been properly tested and is included for compilation purposes only. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the template class (passed to the function). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="758" column="1" bodyfile="Matrix.h" bodystart="758" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1ad9c05b3b70a1d2cbde0da69d9c509b28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;x, const unsigned long &amp;y, char *value, const int8_t &amp;t)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const int8_t &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Overloaded function for setting the (int8_t) value of a matrix based on the template type of the matrix. This appears like a bit of a goofy workaround and there might be a better way of doing this, but it works. Note this version of the function has not been properly tested and is included for compilation purposes only. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the template class (passed to the function). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="772" column="1" bodyfile="Matrix.h" bodystart="772" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a8e6de70fe02f240a62ec9cc1fd81dcc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;x, const unsigned long &amp;y, char *value, const uint8_t &amp;t)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const uint8_t &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Overloaded function for setting the (uint8_t) value of a matrix based on the template type of the matrix. This appears like a bit of a goofy workaround and there might be a better way of doing this, but it works. Note this version of the function has not been properly tested and is included for compilation purposes only. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the template class (passed to the function). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="786" column="1" bodyfile="Matrix.h" bodystart="786" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a922762fa2b44b243ae23c9a009f1d097" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;x, const unsigned long &amp;y, char *value, const bool &amp;t)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Overloaded function for setting the (integer) value of a matrix based on the template type of the matrix. This appears like a bit of a goofy workaround and there might be a better way of doing this, but it works. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the template class (passed to the function). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="799" column="1" bodyfile="Matrix.h" bodystart="799" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a559bd9956b135c07d4b9f4c7b7ab3587" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;x, const unsigned long &amp;y, char *value, const unsigned long &amp;t)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Overloaded function for setting the (unsigned long integer) value of a matrix based on the template type of the matrix. This appears like a bit of a goofy workaround and there might be a better way of doing this, but it works. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the template class (passed to the function). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="812" column="1" bodyfile="Matrix.h" bodystart="812" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a143c4e675168a714dfb039e142cb9623" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;x, const unsigned long &amp;y, char *value, const long &amp;t)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Overloaded function for setting the (long integer) value of a matrix based on the template type of the matrix. This appears like a bit of a goofy workaround and there might be a better way of doing this, but it works. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>include other overloaded functions which deal with other matrix types. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the template class (passed to the function). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="826" column="1" bodyfile="Matrix.h" bodystart="826" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1a28788b5a7f7d5f107bf26f4d8fd43d1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::setValue</definition>
        <argsstring>(const unsigned long &amp;x, const unsigned long &amp;y, char *value, const unsigned short &amp;t)</argsstring>
        <name>setValue</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Overloaded function for setting the (long integer) value of a matrix based on the template type of the matrix. This appears like a bit of a goofy workaround and there might be a better way of doing this, but it works. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>include other overloaded functions which deal with other matrix types. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the template class (passed to the function). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="840" column="1" bodyfile="Matrix.h" bodystart="840" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1ad52cb35470afb7a524e825b586cc2ccb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::import</definition>
        <argsstring>(string filename)</argsstring>
        <name>import</name>
        <param>
          <type>string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Imports the matrix from either a csv or tif file. Calls either <ref refid="class_matrix_1ace5dbaac7d1be865b2f366bfe8896a41" kindref="member">importCsv()</ref> or importTif() dependent on the provided file type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to import. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="850" column="1" bodyfile="Matrix.h" bodystart="850" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="class_matrix_1ace5dbaac7d1be865b2f366bfe8896a41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Matrix&lt; T &gt;::importCsv</definition>
        <argsstring>(string filename)</argsstring>
        <name>importCsv</name>
        <param>
          <type>string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Imports the matrix from a tif file using the gdal library functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the file to import. Imports the matrix from a csv file using the fast-csv-parser method. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the file to import. Imports the matrix from a csv file using the standard, slower method. </para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>this function should not be used any more as it is much slower. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the file to import. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="1335" column="1" bodyfile="Matrix.h" bodystart="1335" bodyend="1382"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_matrix_1a5ed9a90fd6f010e7e9840a17d92d5361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Matrix &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the &lt;&lt; operator for outputting to an output stream. This can be used for writing to console or storing to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to output. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="661" column="1" bodyfile="Matrix.h" bodystart="661" bodyend="673"/>
      </memberdef>
      <memberdef kind="friend" id="class_matrix_1afcea9fa7d9a5052070fe1fda963ef237" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Matrix &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Overloading the &gt;&gt; operator for inputting from an input stream. This can be used for writing to console or storing to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to input to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="682" column="1" bodyfile="Matrix.h" bodystart="682" bodyend="713"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class containing the <ref refid="class_matrix" kindref="compound">Matrix</ref> object, set up as an array of <ref refid="class_row" kindref="compound">Row</ref> objects. Includes basic operations, as well as the <ref refid="class_matrix_1ace5dbaac7d1be865b2f366bfe8896a41" kindref="member">importCsv()</ref> function for more advanced reading from file. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Matrix.h" line="292" column="1" bodyfile="Matrix.h" bodystart="291" bodyend="1384"/>
    <listofallmembers>
      <member refid="class_matrix_1a0467ce3fc5d310bd78e2c48ae4e80b45" prot="public" virt="non-virtual"><scope>Matrix</scope><name>GetCols</name></member>
      <member refid="class_matrix_1a7c3e1fb8bf860913a03d874c02655ac2" prot="public" virt="non-virtual"><scope>Matrix</scope><name>GetRows</name></member>
      <member refid="class_matrix_1ad52cb35470afb7a524e825b586cc2ccb" prot="public" virt="non-virtual"><scope>Matrix</scope><name>import</name></member>
      <member refid="class_matrix_1ace5dbaac7d1be865b2f366bfe8896a41" prot="public" virt="non-virtual"><scope>Matrix</scope><name>importCsv</name></member>
      <member refid="class_matrix_1a53f60218c002f2bb454695a1fc35c5d3" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Matrix</name></member>
      <member refid="class_matrix_1a3796b4f32dc8e11f908a90fd3dd39c45" prot="public" virt="non-virtual"><scope>Matrix</scope><name>Matrix</name></member>
      <member refid="class_matrix_1a7a143ae112112155c9622ba17dc434c7" prot="protected" virt="non-virtual"><scope>Matrix</scope><name>matrix</name></member>
      <member refid="class_matrix_1a341aaedcfaac978957087bd0467dc527" prot="protected" virt="non-virtual"><scope>Matrix</scope><name>numCols</name></member>
      <member refid="class_matrix_1ac1e96667d48c7845708f978ddd17475d" prot="protected" virt="non-virtual"><scope>Matrix</scope><name>numRows</name></member>
      <member refid="class_matrix_1ac4e94b307c56a15fb47a9255855f94a9" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator*</name></member>
      <member refid="class_matrix_1ac396cdd2d98e1b4d99f7e17c1c26b1ec" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator*</name></member>
      <member refid="class_matrix_1a311f3649e41cb4a3155f3f71a65829cb" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator+</name></member>
      <member refid="class_matrix_1a480a72298ae1fc8443b0edfaa66d7c46" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator+=</name></member>
      <member refid="class_matrix_1a08e75978ea8288083ef36f53b4ac115d" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator-</name></member>
      <member refid="class_matrix_1a0e459fd035b2435ea016dc93c55ccac0" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator-=</name></member>
      <member refid="class_matrix_1a5ed9a90fd6f010e7e9840a17d92d5361" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_matrix_1a94508f84ba0d62e81aa8d508aa43f1ec" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator=</name></member>
      <member refid="class_matrix_1afcea9fa7d9a5052070fe1fda963ef237" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator&gt;&gt;</name></member>
      <member refid="class_matrix_1ae7e14b4bd8bb570260a4e578e4a601b7" prot="public" virt="non-virtual"><scope>Matrix</scope><name>operator[]</name></member>
      <member refid="class_matrix_1afec0d39d2d97ec573024552983694a66" prot="public" virt="non-virtual"><scope>Matrix</scope><name>SetSize</name></member>
      <member refid="class_matrix_1a93ee02612d3a28747bdbe7667e3c3f29" prot="public" virt="non-virtual"><scope>Matrix</scope><name>setValue</name></member>
      <member refid="class_matrix_1ac742681e44a0b08c105ce7c16047ee20" prot="public" virt="non-virtual"><scope>Matrix</scope><name>setValue</name></member>
      <member refid="class_matrix_1ad9c05b3b70a1d2cbde0da69d9c509b28" prot="public" virt="non-virtual"><scope>Matrix</scope><name>setValue</name></member>
      <member refid="class_matrix_1a8e6de70fe02f240a62ec9cc1fd81dcc6" prot="public" virt="non-virtual"><scope>Matrix</scope><name>setValue</name></member>
      <member refid="class_matrix_1a922762fa2b44b243ae23c9a009f1d097" prot="public" virt="non-virtual"><scope>Matrix</scope><name>setValue</name></member>
      <member refid="class_matrix_1a559bd9956b135c07d4b9f4c7b7ab3587" prot="public" virt="non-virtual"><scope>Matrix</scope><name>setValue</name></member>
      <member refid="class_matrix_1a143c4e675168a714dfb039e142cb9623" prot="public" virt="non-virtual"><scope>Matrix</scope><name>setValue</name></member>
      <member refid="class_matrix_1a28788b5a7f7d5f107bf26f4d8fd43d1c" prot="public" virt="non-virtual"><scope>Matrix</scope><name>setValue</name></member>
      <member refid="class_matrix_1a2df813f38f535bde8d1c8ae00b9c2eb4" prot="public" virt="non-virtual"><scope>Matrix</scope><name>symmetric</name></member>
      <member refid="class_matrix_1a91aa704de674203e96aece9e1955ccd3" prot="public" virt="non-virtual"><scope>Matrix</scope><name>~Matrix</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
