<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_treelist" kind="class" language="C++" prot="public">
    <compoundname>Treelist</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_treelist_1a0e77a47be5f1a28e22760562e7d68ae1" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Treelist::bMem</definition>
        <argsstring></argsstring>
        <name>bMem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="265" column="1" bodyfile="Treelist.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a7e0662813dff9c9a8d0df16d2c004388" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Treelist::bFileSet</definition>
        <argsstring></argsstring>
        <name>bFileSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="266" column="1" bodyfile="Treelist.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1ababc3eab84906f8cdfa52f81c3397809" prot="private" static="no" mutable="no">
        <type>sqlite3 *</type>
        <definition>sqlite3* Treelist::database</definition>
        <argsstring></argsstring>
        <name>database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="267" column="1" bodyfile="Treelist.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1aa31995d29fcda6acaee0ab27ac1cda16" prot="private" static="no" mutable="no">
        <type>sqlite3 *</type>
        <definition>sqlite3* Treelist::outdatabase</definition>
        <argsstring></argsstring>
        <name>outdatabase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="268" column="1" bodyfile="Treelist.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a549d2261bab3664f63e8618275ffcbbd" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Treelist::bSqlConnection</definition>
        <argsstring></argsstring>
        <name>bSqlConnection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="269" column="1" bodyfile="Treelist.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1aeff593f611be75952559ef853c9e1966" prot="private" static="no" mutable="no">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; <ref refid="class_treenode" kindref="compound">Treenode</ref> &gt; *</type>
        <definition>Row&lt;Treenode&gt;* Treelist::nodes</definition>
        <argsstring></argsstring>
        <name>nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="270" column="1" bodyfile="Treelist.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a13903ad4e840640ebdaa5879ac33a018" prot="private" static="no" mutable="no">
        <type><ref refid="class_row" kindref="compound">Row</ref>&lt; unsigned int &gt;</type>
        <definition>Row&lt;unsigned int&gt; Treelist::rOut</definition>
        <argsstring></argsstring>
        <name>rOut</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="271" column="1" bodyfile="Treelist.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a9216d2d44bb169cc26fcfeb63d085561" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Treelist::dSpecRate</definition>
        <argsstring></argsstring>
        <name>dSpecRate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="272" column="1" bodyfile="Treelist.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a0cc8a1bea8903474294a64234d8dd807" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Treelist::iSpecies</definition>
        <argsstring></argsstring>
        <name>iSpecies</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="273" column="1" bodyfile="Treelist.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a2c82dd7757879b6df3c015430e844f1e" prot="private" static="no" mutable="no">
        <type>long double</type>
        <definition>long double Treelist::generation</definition>
        <argsstring></argsstring>
        <name>generation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="274" column="1" bodyfile="Treelist.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a4f759127598650486e96ec9b022a8958" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Treelist::bSample</definition>
        <argsstring></argsstring>
        <name>bSample</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="275" column="1" bodyfile="Treelist.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1ab48a9f382b467d4ede9c4d4ec3f4f1e7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Treelist::bDataImport</definition>
        <argsstring></argsstring>
        <name>bDataImport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="276" column="1" bodyfile="Treelist.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1ac7057fe54af211436f6560ce97e04ece" prot="private" static="no" mutable="no">
        <type>string</type>
        <definition>string Treelist::samplemaskfile</definition>
        <argsstring></argsstring>
        <name>samplemaskfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="277" column="1" bodyfile="Treelist.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1ac39b54f54a856234d0158965d3cc423c" prot="private" static="no" mutable="no">
        <type><ref refid="class_samplematrix" kindref="compound">Samplematrix</ref></type>
        <definition>Samplematrix Treelist::samplemask</definition>
        <argsstring></argsstring>
        <name>samplemask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="278" column="1" bodyfile="Treelist.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a97a39bdcce063c80630ab9dec1fff0be" prot="private" static="no" mutable="no">
        <type>vector&lt; <ref refid="struct_fragment" kindref="compound">Fragment</ref> &gt;</type>
        <definition>vector&lt;Fragment&gt; Treelist::fragments</definition>
        <argsstring></argsstring>
        <name>fragments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="279" column="1" bodyfile="Treelist.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a32c183afd470da60b6a18facbe759138" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Treelist::min_spec_rate</definition>
        <argsstring></argsstring>
        <name>min_spec_rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="281" column="1" bodyfile="Treelist.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a486e62d24a65343d5c481319e3d90e87" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Treelist::grid_x_size</definition>
        <argsstring></argsstring>
        <name>grid_x_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="283" column="1" bodyfile="Treelist.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1ab45270d9e643bd8b73d2d7fa109c1c26" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Treelist::grid_y_size</definition>
        <argsstring></argsstring>
        <name>grid_y_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="283" column="1" bodyfile="Treelist.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a941e83bce91b80971abf886388422a4e" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Treelist::samplemask_x_size</definition>
        <argsstring></argsstring>
        <name>samplemask_x_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="285" column="1" bodyfile="Treelist.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a1c7015fa4a3752ff4a7df72c8ee86131" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Treelist::samplemask_y_size</definition>
        <argsstring></argsstring>
        <name>samplemask_y_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="285" column="1" bodyfile="Treelist.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a6555b4365333d1cdf7ce253f83489c2d" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Treelist::samplemask_x_offset</definition>
        <argsstring></argsstring>
        <name>samplemask_x_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="285" column="1" bodyfile="Treelist.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1afc47a122276c2c59db31cf1ff216c82f" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Treelist::samplemask_y_offset</definition>
        <argsstring></argsstring>
        <name>samplemask_y_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="285" column="1" bodyfile="Treelist.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1adc908a5bd1d035026f110019c3db9414" prot="private" static="no" mutable="no">
        <type><ref refid="struct_calc_pair_array" kindref="compound">CalcPairArray</ref></type>
        <definition>CalcPairArray Treelist::past_speciation_rates</definition>
        <argsstring></argsstring>
        <name>past_speciation_rates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="287" column="1" bodyfile="Treelist.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a293cb5c91239ff3d2d8fee13ad5706f7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Treelist::protracted</definition>
        <argsstring></argsstring>
        <name>protracted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="289" column="1" bodyfile="Treelist.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a540059079eeb2aa5ef7b5e43e68a0ccf" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Treelist::min_speciation_gen</definition>
        <argsstring></argsstring>
        <name>min_speciation_gen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="290" column="1" bodyfile="Treelist.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1aa376138c96d85b569057a89ce71c47aa" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Treelist::max_speciation_gen</definition>
        <argsstring></argsstring>
        <name>max_speciation_gen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="290" column="1" bodyfile="Treelist.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_treelist_1a270dbab075260cfd4c74716961f4ab9c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Treelist::applied_max_speciation_gen</definition>
        <argsstring></argsstring>
        <name>applied_max_speciation_gen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="290" column="1" bodyfile="Treelist.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_treelist_1a2fa11958071a9887c0fec031d7f2b3e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Treelist::Treelist</definition>
        <argsstring>(Row&lt; Treenode &gt; *r)</argsstring>
        <name>Treelist</name>
        <param>
          <type><ref refid="class_row" kindref="compound">Row</ref>&lt; <ref refid="class_treenode" kindref="compound">Treenode</ref> &gt; *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Contructor for treelist linking to <ref refid="class_treenode" kindref="compound">Treenode</ref> list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_row" kindref="compound">Row</ref> of <ref refid="class_treenode" kindref="compound">Treenode</ref> objects to link to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="298" column="1" bodyfile="Treelist.h" bodystart="298" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a7aa5acf72fa6310b63bcdc1ae8a279b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Treelist::Treelist</definition>
        <argsstring>()</argsstring>
        <name>Treelist</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="317" column="1" bodyfile="Treelist.h" bodystart="317" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1ab1c100e36696c2d0c8e77f8f3eed2db8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Treelist::~Treelist</definition>
        <argsstring>()</argsstring>
        <name>~Treelist</name>
        <briefdescription>
<para>Default destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="336" column="1" bodyfile="Treelist.h" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a209bded4d1a38b52de02bd375dc8f214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::setList</definition>
        <argsstring>(Row&lt; Treenode &gt; *l)</argsstring>
        <name>setList</name>
        <param>
          <type><ref refid="class_row" kindref="compound">Row</ref>&lt; <ref refid="class_treenode" kindref="compound">Treenode</ref> &gt; *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Set the nodes object to the input <ref refid="class_row" kindref="compound">Row</ref> of <ref refid="class_treenode" kindref="compound">Treenode</ref> objects. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_row" kindref="compound">Row</ref> of <ref refid="class_treenode" kindref="compound">Treenode</ref> objects to link to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="344" column="1" bodyfile="Treelist.cpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a0991cf24ea19b2d99c5bc70f47b45518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::setDatabase</definition>
        <argsstring>(sqlite3 *dbin)</argsstring>
        <name>setDatabase</name>
        <param>
          <type>sqlite3 *</type>
          <declname>dbin</declname>
        </param>
        <briefdescription>
<para>Sets the database object for the sqlite functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dbin</parametername>
</parameternamelist>
<parameterdescription>
<para>the sqlite3 input database. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="350" column="1" bodyfile="Treelist.cpp" bodystart="30" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1ae4f75c202f4813f388660577bdbb1b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Treelist::hasImportedData</definition>
        <argsstring>()</argsstring>
        <name>hasImportedData</name>
        <briefdescription>
<para>Get the boolean of whether the data has been imported yet. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if database has been imported. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="356" column="1" bodyfile="Treelist.cpp" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1ad6177750efa83354a844bb7072551227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Treelist::getMinimumSpeciation</definition>
        <argsstring>()</argsstring>
        <name>getMinimumSpeciation</name>
        <briefdescription>
<para>Get the minimum speciation rate the simulation was originally run with. This value is read in from the SIMULATION_PARAMETERS table in the database file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the minimum speciation rate. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="363" column="1" bodyfile="Treelist.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a40a8108fe416b9431b232b0e49280e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::importSamplemask</definition>
        <argsstring>(string sSamplemask)</argsstring>
        <name>importSamplemask</name>
        <param>
          <type>string</type>
          <declname>sSamplemask</declname>
        </param>
        <briefdescription>
<para>Imports the samplemask if it hasn&apos;t already been imported. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sSamplemask</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the samplemask file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="369" column="1" bodyfile="Treelist.cpp" bodystart="53" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1af8888281f584bb1cc6a1543f70b747e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Treelist::countSpecies</definition>
        <argsstring>()</argsstring>
        <name>countSpecies</name>
        <briefdescription>
<para>Counts the number of species that have speciated currently on the tree. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of species </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="376" column="1" bodyfile="Treelist.cpp" bodystart="95" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a251b84151f3ba70e34bca3824b165093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Treelist::calcSpecies</definition>
        <argsstring>(double s)</argsstring>
        <name>calcSpecies</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Calculate the number of species in the list given a specific speciation rate. This is the main function which reconstructs the coalescence tree. Each <ref refid="class_treenode" kindref="compound">Treenode</ref> object will end having its existance value set correctly after a call to this function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to apply. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of species present. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="385" column="1" bodyfile="Treelist.cpp" bodystart="109" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a7d077eac323c32bfdce6bca808f357ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::calcSpeciesAbundance</definition>
        <argsstring>()</argsstring>
        <name>calcSpeciesAbundance</name>
        <briefdescription>
<para>Calculates the species abundance of the dataset. The species abundances will be with rOut after a call do this function. If a samplemask has been applied, only lineages which originally existed in the samplemask will be counted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="392" column="1" bodyfile="Treelist.cpp" bodystart="258" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1ad089f6a63b1904d0b50299adfae52f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::resetTree</definition>
        <argsstring>()</argsstring>
        <name>resetTree</name>
        <briefdescription>
<para>Resets the entire tree. Sets existance to false, speciation to false and removes any species ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="398" column="1" bodyfile="Treelist.cpp" bodystart="311" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1acaa619f2d186f60c9c9fa5d90db0da68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::detectDimensions</definition>
        <argsstring>(string db)</argsstring>
        <name>detectDimensions</name>
        <param>
          <type>string</type>
          <declname>db</declname>
        </param>
        <briefdescription>
<para>This function detects the maximum x and y values of the sql database. This allows for the dimensions before opening the map file. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated as of 08/2016 due to simulation parameters being stored in the SQL database. </para></xrefdescription></xrefsect><xrefsect id="bug_1_bug000002"><xreftitle>Bug</xreftitle><xrefdescription><para>If species do not exist across the whole range of the samplemask, samplemask size will not be set correctly and samplemask referencing may be incorrect. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input database to read from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="408" column="1" bodyfile="Treelist.cpp" bodystart="319" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1aa0a68f38a0cfcfe69d53dd8387174688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::openSqlConnection</definition>
        <argsstring>(string inputfile)</argsstring>
        <name>openSqlConnection</name>
        <param>
          <type>string</type>
          <declname>inputfile</declname>
        </param>
        <briefdescription>
<para>Opens the connection to the sql database file Note that this imports the database to memory, so functionality should be changed for extremely large database files. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the sql database output from a NECSim simulation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="416" column="1" bodyfile="Treelist.cpp" bodystart="340" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a98bd7ebad85966794a3871969b0f04f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::internalOption</definition>
        <argsstring>()</argsstring>
        <name>internalOption</name>
        <briefdescription>
<para>Internally sets the file referencing, data import and sql connection flags to true, for allowing checks to pass from internal object creation (so no external files are needed) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="422" column="1" bodyfile="Treelist.cpp" bodystart="1178" bodyend="1183"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a8042f6a3ab6eb1e7dc75baba20240118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::importData</definition>
        <argsstring>(string inputfile)</argsstring>
        <name>importData</name>
        <param>
          <type>string</type>
          <declname>inputfile</declname>
        </param>
        <briefdescription>
<para>Imports the data from the desired SQL database object into the array. Note this function opens the sql connection if it has not already been opened. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input SQLite database. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="428" column="1" bodyfile="Treelist.cpp" bodystart="401" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1ac2e1f6e132233499568af35fa57e60b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::importSimParameters</definition>
        <argsstring>(string file)</argsstring>
        <name>importSimParameters</name>
        <param>
          <type>string</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Imports the simulation parameters by reading the SIMULATION_PARAMETERS table in the provided file. This imports the grid_x_size, grid_y_size (which should also be the sample map dimensions) and the minimum speciation rate. </para>        </briefdescription>
        <detaileddescription>
<para>Note this function opens the sql connection if it has not already been opened.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>the sqlite database simulation output which will be used for coalescence tree generation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="440" column="1" bodyfile="Treelist.cpp" bodystart="1091" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a8062e61c6ae961447cb71654006a1e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::setProtractedParameters</definition>
        <argsstring>(double max_speciation_gen_in)</argsstring>
        <name>setProtractedParameters</name>
        <param>
          <type>double</type>
          <declname>max_speciation_gen_in</declname>
        </param>
        <briefdescription>
<para>Sets the protracted parameters for application of protracted speciation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_speciation_gen</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of generations a lineage can exist for before speciating </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="446" column="1" bodyfile="Treelist.cpp" bodystart="1152" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a5a0b1ddf62000375a53df9c16c548b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::setProtractedParameters</definition>
        <argsstring>(double min_speciation_gen_in, double max_speciation_gen_in)</argsstring>
        <name>setProtractedParameters</name>
        <param>
          <type>double</type>
          <declname>min_speciation_gen_in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_speciation_gen_in</declname>
        </param>
        <briefdescription>
<para>Sets the protracted parameters for application of protracted speciation. </para>        </briefdescription>
        <detaileddescription>
<para>This overloaded version is for setting protracted parameters before a full simulation has been outputted (i.e. immediately after completion of the simulation).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_speciation_gen_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum number of generations a lineage must exist before speciating. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_speciation_gen_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of generations a lineage can exist for before speciating </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="457" column="1" bodyfile="Treelist.cpp" bodystart="1165" bodyend="1170"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a11b7efee52f995ea524ebc35ebe76cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::setProtracted</definition>
        <argsstring>(bool protracted_in)</argsstring>
        <name>setProtracted</name>
        <param>
          <type>bool</type>
          <declname>protracted_in</declname>
        </param>
        <briefdescription>
<para>Sets the protracted boolean to the input. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>protracted_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the protracted boolean to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="464" column="1" bodyfile="Treelist.cpp" bodystart="1172" bodyend="1175"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a3bdea04b963ec5a92711d5f389a534c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::setGeneration</definition>
        <argsstring>(long double generationin)</argsstring>
        <name>setGeneration</name>
        <param>
          <type>long double</type>
          <declname>generationin</declname>
        </param>
        <briefdescription>
<para>Set the time of interest where all analysis will be performed. It is assumed that this was one of the temporal points defined at simulation time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>generationin</parametername>
</parameternamelist>
<parameterdescription>
<para>the target generation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="471" column="1" bodyfile="Treelist.cpp" bodystart="498" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a3416c2a81ee64b98b3d7956f58a8132d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::createDatabase</definition>
        <argsstring>(double s)</argsstring>
        <name>createDatabase</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Creates a new table in the database file and outputs the database object to the same file as the input file. The new SPECIES_ABUNDANCES table contains the species abundance distribution for the whole samplemask. A similar tabe FRAGMENT_ABUNDANCES is generated by <ref refid="class_treelist_1aba14303915c31c334e1d63ae61c3812c" kindref="member">createFragmentDatabase()</ref> if specified via the command line parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to apply. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="481" column="1" bodyfile="Treelist.cpp" bodystart="503" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a729efcf34c00e6dfbf45a6fb17cab0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Treelist::checkRepeatSpeciation</definition>
        <argsstring>(double s, double generation, bool fragment)</argsstring>
        <name>checkRepeatSpeciation</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>generation</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fragment</declname>
        </param>
        <briefdescription>
<para>Checks to see if any of the speciation rates have already been applied and exist within the SPECIES_ABUNDANCES table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to apply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to apply the speciation rate at </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean of whether to check for fragments or not </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="490" column="1" bodyfile="Treelist.cpp" bodystart="596" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1af8bf1c31280aac49f5863b22373d17ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Treelist::checkRepeatSpeciation</definition>
        <argsstring>(double s, double generation)</argsstring>
        <name>checkRepeatSpeciation</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Checks to see if any of the speciation rates have already been applied and exist within the SPECIES_ABUNDANCES table. Overloaded version for assuming there are no differing fragments. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to apply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to apply the speciation rate at </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean of whether to check for fragments or not </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="500" column="1" bodyfile="Treelist.cpp" bodystart="606" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a08e810576f6294def9e958a20352ad94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Treelist::checkRepeatSpeciation</definition>
        <argsstring>(double s)</argsstring>
        <name>checkRepeatSpeciation</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Checks to see if any of the speciation rates have already been applied and exist within the SPECIES_ABUNDANCES table. Overloaded version for assuming there are no differing times. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the speciation rate to apply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to apply the speciation rate at </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean of whether to check for fragments or not </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="510" column="1" bodyfile="Treelist.cpp" bodystart="611" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1aba14303915c31c334e1d63ae61c3812c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::createFragmentDatabase</definition>
        <argsstring>(const Fragment &amp;f)</argsstring>
        <name>createFragmentDatabase</name>
        <param>
          <type>const <ref refid="struct_fragment" kindref="compound">Fragment</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Creates a new table in the database file and outputs the database object to the same file as the input file. Essentially creates a species abundance distribution (as in <ref refid="class_treelist_1a3416c2a81ee64b98b3d7956f58a8132d" kindref="member">createDatabase()</ref>), but for the specified fragment within the samplemask. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_fragment" kindref="compound">Fragment</ref> to sample from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="518" column="1" bodyfile="Treelist.cpp" bodystart="616" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a3f7f7eb4526ee91180742010394e0f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::exportDatabase</definition>
        <argsstring>(string outputfile)</argsstring>
        <name>exportDatabase</name>
        <param>
          <type>string</type>
          <declname>outputfile</declname>
        </param>
        <briefdescription>
<para>Output the database from memory to the database file. Most of the time, it is desirable for the outputfile to be the same path as the input file and will write to the same object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outputfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the output file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="526" column="1" bodyfile="Treelist.cpp" bodystart="683" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a3bba0e4657b3c98025331ae6c76d2a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::recordSpatial</definition>
        <argsstring>()</argsstring>
        <name>recordSpatial</name>
        <briefdescription>
<para>Record the full spatial data. Creates a new table, SPECIES_LOCATIONS containing every species and their parameters. This allows for more in-depth analysis to be performed if necessary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="533" column="1" bodyfile="Treelist.cpp" bodystart="746" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1ac0569d1ff2167b24751e490d7d76ac9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::calcFragments</definition>
        <argsstring>(string fragment_file)</argsstring>
        <name>calcFragments</name>
        <param>
          <type>string</type>
          <declname>fragment_file</declname>
        </param>
        <briefdescription>
<para>Calculates the limits of each fragment in the sample map and adds it to the vector of fragments. If the fragment_file is null, then the program will attempt to calculate fragments from the map. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="bug_1_bug000003"><xreftitle>Bug</xreftitle><xrefdescription><para>Only rectangular fragments will be detected. Problems will also be encountered for adjacent fragments. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fragment_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the fragment file to read from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="541" column="1" bodyfile="Treelist.cpp" bodystart="823" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a40ce2abdada3090379f75ac0532e9ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::applyFragments</definition>
        <argsstring>()</argsstring>
        <name>applyFragments</name>
        <briefdescription>
<para>Calculate species abundances for each fragment, and call <ref refid="class_treelist_1aba14303915c31c334e1d63ae61c3812c" kindref="member">createFragmentDatabase()</ref> for each <ref refid="struct_fragment" kindref="compound">Fragment</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="546" column="1" bodyfile="Treelist.cpp" bodystart="1046" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="class_treelist_1a79db972fe848fac179c29f38bedadab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Treelist::getPreviousCalcs</definition>
        <argsstring>()</argsstring>
        <name>getPreviousCalcs</name>
        <briefdescription>
<para>Gets the previous calculations that have already been performed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Treelist.h" line="551" column="1" bodyfile="Treelist.cpp" bodystart="1185" bodyend="1277"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class to contain the tree object lineages and reconstructing the coalescence tree. Contains functions for calculating the number of species for a given speciation rate, outputting spatial data and generating species abundance distributions. Requires a link to the SQLite database from simulation output, and produces results within the same database file. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Treelist.h" line="263" column="1" bodyfile="Treelist.h" bodystart="262" bodyend="552"/>
    <listofallmembers>
      <member refid="class_treelist_1a270dbab075260cfd4c74716961f4ab9c" prot="private" virt="non-virtual"><scope>Treelist</scope><name>applied_max_speciation_gen</name></member>
      <member refid="class_treelist_1a40ce2abdada3090379f75ac0532e9ea0" prot="public" virt="non-virtual"><scope>Treelist</scope><name>applyFragments</name></member>
      <member refid="class_treelist_1ab48a9f382b467d4ede9c4d4ec3f4f1e7" prot="private" virt="non-virtual"><scope>Treelist</scope><name>bDataImport</name></member>
      <member refid="class_treelist_1a7e0662813dff9c9a8d0df16d2c004388" prot="private" virt="non-virtual"><scope>Treelist</scope><name>bFileSet</name></member>
      <member refid="class_treelist_1a0e77a47be5f1a28e22760562e7d68ae1" prot="private" virt="non-virtual"><scope>Treelist</scope><name>bMem</name></member>
      <member refid="class_treelist_1a4f759127598650486e96ec9b022a8958" prot="private" virt="non-virtual"><scope>Treelist</scope><name>bSample</name></member>
      <member refid="class_treelist_1a549d2261bab3664f63e8618275ffcbbd" prot="private" virt="non-virtual"><scope>Treelist</scope><name>bSqlConnection</name></member>
      <member refid="class_treelist_1ac0569d1ff2167b24751e490d7d76ac9f" prot="public" virt="non-virtual"><scope>Treelist</scope><name>calcFragments</name></member>
      <member refid="class_treelist_1a251b84151f3ba70e34bca3824b165093" prot="public" virt="non-virtual"><scope>Treelist</scope><name>calcSpecies</name></member>
      <member refid="class_treelist_1a7d077eac323c32bfdce6bca808f357ae" prot="public" virt="non-virtual"><scope>Treelist</scope><name>calcSpeciesAbundance</name></member>
      <member refid="class_treelist_1a729efcf34c00e6dfbf45a6fb17cab0ca" prot="public" virt="non-virtual"><scope>Treelist</scope><name>checkRepeatSpeciation</name></member>
      <member refid="class_treelist_1af8bf1c31280aac49f5863b22373d17ca" prot="public" virt="non-virtual"><scope>Treelist</scope><name>checkRepeatSpeciation</name></member>
      <member refid="class_treelist_1a08e810576f6294def9e958a20352ad94" prot="public" virt="non-virtual"><scope>Treelist</scope><name>checkRepeatSpeciation</name></member>
      <member refid="class_treelist_1af8888281f584bb1cc6a1543f70b747e9" prot="public" virt="non-virtual"><scope>Treelist</scope><name>countSpecies</name></member>
      <member refid="class_treelist_1a3416c2a81ee64b98b3d7956f58a8132d" prot="public" virt="non-virtual"><scope>Treelist</scope><name>createDatabase</name></member>
      <member refid="class_treelist_1aba14303915c31c334e1d63ae61c3812c" prot="public" virt="non-virtual"><scope>Treelist</scope><name>createFragmentDatabase</name></member>
      <member refid="class_treelist_1ababc3eab84906f8cdfa52f81c3397809" prot="private" virt="non-virtual"><scope>Treelist</scope><name>database</name></member>
      <member refid="class_treelist_1acaa619f2d186f60c9c9fa5d90db0da68" prot="public" virt="non-virtual"><scope>Treelist</scope><name>detectDimensions</name></member>
      <member refid="class_treelist_1a9216d2d44bb169cc26fcfeb63d085561" prot="private" virt="non-virtual"><scope>Treelist</scope><name>dSpecRate</name></member>
      <member refid="class_treelist_1a3f7f7eb4526ee91180742010394e0f65" prot="public" virt="non-virtual"><scope>Treelist</scope><name>exportDatabase</name></member>
      <member refid="class_treelist_1a97a39bdcce063c80630ab9dec1fff0be" prot="private" virt="non-virtual"><scope>Treelist</scope><name>fragments</name></member>
      <member refid="class_treelist_1a2c82dd7757879b6df3c015430e844f1e" prot="private" virt="non-virtual"><scope>Treelist</scope><name>generation</name></member>
      <member refid="class_treelist_1ad6177750efa83354a844bb7072551227" prot="public" virt="non-virtual"><scope>Treelist</scope><name>getMinimumSpeciation</name></member>
      <member refid="class_treelist_1a79db972fe848fac179c29f38bedadab7" prot="public" virt="non-virtual"><scope>Treelist</scope><name>getPreviousCalcs</name></member>
      <member refid="class_treelist_1a486e62d24a65343d5c481319e3d90e87" prot="private" virt="non-virtual"><scope>Treelist</scope><name>grid_x_size</name></member>
      <member refid="class_treelist_1ab45270d9e643bd8b73d2d7fa109c1c26" prot="private" virt="non-virtual"><scope>Treelist</scope><name>grid_y_size</name></member>
      <member refid="class_treelist_1ae4f75c202f4813f388660577bdbb1b9d" prot="public" virt="non-virtual"><scope>Treelist</scope><name>hasImportedData</name></member>
      <member refid="class_treelist_1a8042f6a3ab6eb1e7dc75baba20240118" prot="public" virt="non-virtual"><scope>Treelist</scope><name>importData</name></member>
      <member refid="class_treelist_1a40a8108fe416b9431b232b0e49280e52" prot="public" virt="non-virtual"><scope>Treelist</scope><name>importSamplemask</name></member>
      <member refid="class_treelist_1ac2e1f6e132233499568af35fa57e60b5" prot="public" virt="non-virtual"><scope>Treelist</scope><name>importSimParameters</name></member>
      <member refid="class_treelist_1a98bd7ebad85966794a3871969b0f04f8" prot="public" virt="non-virtual"><scope>Treelist</scope><name>internalOption</name></member>
      <member refid="class_treelist_1a0cc8a1bea8903474294a64234d8dd807" prot="private" virt="non-virtual"><scope>Treelist</scope><name>iSpecies</name></member>
      <member refid="class_treelist_1aa376138c96d85b569057a89ce71c47aa" prot="private" virt="non-virtual"><scope>Treelist</scope><name>max_speciation_gen</name></member>
      <member refid="class_treelist_1a32c183afd470da60b6a18facbe759138" prot="private" virt="non-virtual"><scope>Treelist</scope><name>min_spec_rate</name></member>
      <member refid="class_treelist_1a540059079eeb2aa5ef7b5e43e68a0ccf" prot="private" virt="non-virtual"><scope>Treelist</scope><name>min_speciation_gen</name></member>
      <member refid="class_treelist_1aeff593f611be75952559ef853c9e1966" prot="private" virt="non-virtual"><scope>Treelist</scope><name>nodes</name></member>
      <member refid="class_treelist_1aa0a68f38a0cfcfe69d53dd8387174688" prot="public" virt="non-virtual"><scope>Treelist</scope><name>openSqlConnection</name></member>
      <member refid="class_treelist_1aa31995d29fcda6acaee0ab27ac1cda16" prot="private" virt="non-virtual"><scope>Treelist</scope><name>outdatabase</name></member>
      <member refid="class_treelist_1adc908a5bd1d035026f110019c3db9414" prot="private" virt="non-virtual"><scope>Treelist</scope><name>past_speciation_rates</name></member>
      <member refid="class_treelist_1a293cb5c91239ff3d2d8fee13ad5706f7" prot="private" virt="non-virtual"><scope>Treelist</scope><name>protracted</name></member>
      <member refid="class_treelist_1a3bba0e4657b3c98025331ae6c76d2a14" prot="public" virt="non-virtual"><scope>Treelist</scope><name>recordSpatial</name></member>
      <member refid="class_treelist_1ad089f6a63b1904d0b50299adfae52f5b" prot="public" virt="non-virtual"><scope>Treelist</scope><name>resetTree</name></member>
      <member refid="class_treelist_1a13903ad4e840640ebdaa5879ac33a018" prot="private" virt="non-virtual"><scope>Treelist</scope><name>rOut</name></member>
      <member refid="class_treelist_1ac39b54f54a856234d0158965d3cc423c" prot="private" virt="non-virtual"><scope>Treelist</scope><name>samplemask</name></member>
      <member refid="class_treelist_1a6555b4365333d1cdf7ce253f83489c2d" prot="private" virt="non-virtual"><scope>Treelist</scope><name>samplemask_x_offset</name></member>
      <member refid="class_treelist_1a941e83bce91b80971abf886388422a4e" prot="private" virt="non-virtual"><scope>Treelist</scope><name>samplemask_x_size</name></member>
      <member refid="class_treelist_1afc47a122276c2c59db31cf1ff216c82f" prot="private" virt="non-virtual"><scope>Treelist</scope><name>samplemask_y_offset</name></member>
      <member refid="class_treelist_1a1c7015fa4a3752ff4a7df72c8ee86131" prot="private" virt="non-virtual"><scope>Treelist</scope><name>samplemask_y_size</name></member>
      <member refid="class_treelist_1ac7057fe54af211436f6560ce97e04ece" prot="private" virt="non-virtual"><scope>Treelist</scope><name>samplemaskfile</name></member>
      <member refid="class_treelist_1a0991cf24ea19b2d99c5bc70f47b45518" prot="public" virt="non-virtual"><scope>Treelist</scope><name>setDatabase</name></member>
      <member refid="class_treelist_1a3bdea04b963ec5a92711d5f389a534c2" prot="public" virt="non-virtual"><scope>Treelist</scope><name>setGeneration</name></member>
      <member refid="class_treelist_1a209bded4d1a38b52de02bd375dc8f214" prot="public" virt="non-virtual"><scope>Treelist</scope><name>setList</name></member>
      <member refid="class_treelist_1a11b7efee52f995ea524ebc35ebe76cfc" prot="public" virt="non-virtual"><scope>Treelist</scope><name>setProtracted</name></member>
      <member refid="class_treelist_1a8062e61c6ae961447cb71654006a1e71" prot="public" virt="non-virtual"><scope>Treelist</scope><name>setProtractedParameters</name></member>
      <member refid="class_treelist_1a5a0b1ddf62000375a53df9c16c548b35" prot="public" virt="non-virtual"><scope>Treelist</scope><name>setProtractedParameters</name></member>
      <member refid="class_treelist_1a2fa11958071a9887c0fec031d7f2b3e7" prot="public" virt="non-virtual"><scope>Treelist</scope><name>Treelist</name></member>
      <member refid="class_treelist_1a7aa5acf72fa6310b63bcdc1ae8a279b5" prot="public" virt="non-virtual"><scope>Treelist</scope><name>Treelist</name></member>
      <member refid="class_treelist_1ab1c100e36696c2d0c8e77f8f3eed2db8" prot="public" virt="non-virtual"><scope>Treelist</scope><name>~Treelist</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
