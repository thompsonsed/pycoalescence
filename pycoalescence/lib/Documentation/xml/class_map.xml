<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_map" kind="class" language="C++" prot="public">
    <compoundname>Map</compoundname>
    <includes refid="_map_8h" local="no">Map.h</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="class_map_1a0080b09c39d18cad51d83d5ec2bc2ce7" prot="protected" static="no">
        <type>unsigned long(Map::*</type>
        <definition>typedef unsigned long(Map::* Map::fptr) (const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</definition>
        <argsstring>)(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</argsstring>
        <name>fptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="82" column="1" bodyfile="Map.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_map_1a4579c0a75f27777739b8f13ec620fa21" prot="protected" static="no" mutable="no">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref>&lt; uint32_t &gt;</type>
        <definition>Matrix&lt;uint32_t&gt; Map::fine_map</definition>
        <argsstring></argsstring>
        <name>fine_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="51" column="1" bodyfile="Map.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a807b35e2a3822cb98f92cf545cb85cf6" prot="protected" static="no" mutable="no">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref>&lt; uint32_t &gt;</type>
        <definition>Matrix&lt;uint32_t&gt; Map::pristine_fine_map</definition>
        <argsstring></argsstring>
        <name>pristine_fine_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="52" column="1" bodyfile="Map.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a67045641f66beb1d3689726cb23fbc29" prot="protected" static="no" mutable="no">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref>&lt; uint32_t &gt;</type>
        <definition>Matrix&lt;uint32_t&gt; Map::coarse_map</definition>
        <argsstring></argsstring>
        <name>coarse_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="53" column="1" bodyfile="Map.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a6d2258eb1652f5d411d88a02efaf4862" prot="protected" static="no" mutable="no">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref>&lt; uint32_t &gt;</type>
        <definition>Matrix&lt;uint32_t&gt; Map::pristine_coarse_map</definition>
        <argsstring></argsstring>
        <name>pristine_coarse_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="54" column="1" bodyfile="Map.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1afc7243e4b89be2a6e7340e8fa84c6679" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref></type>
        <definition>SimParameters Map::mapvars</definition>
        <argsstring></argsstring>
        <name>mapvars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="55" column="1" bodyfile="Map.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a1f1b99453482eac3e459e4346eeb3c7e" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::finexmin</definition>
        <argsstring></argsstring>
        <name>finexmin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="56" column="1" bodyfile="Map.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1aa654a9603699c76654c528f8462cf246" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::fineymin</definition>
        <argsstring></argsstring>
        <name>fineymin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="56" column="1" bodyfile="Map.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a52e2a83e9f8cedcd1bb41bd41f7f54fb" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::coarsexmin</definition>
        <argsstring></argsstring>
        <name>coarsexmin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="56" column="1" bodyfile="Map.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a02ab899e67c2b145294fe1f527fa3024" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::coarseymin</definition>
        <argsstring></argsstring>
        <name>coarseymin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="56" column="1" bodyfile="Map.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a94bb813e300ee493f057afb154a35f88" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::finexmax</definition>
        <argsstring></argsstring>
        <name>finexmax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="57" column="1" bodyfile="Map.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1ac130e3a3380ab6e3b292f6612324a506" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::fineymax</definition>
        <argsstring></argsstring>
        <name>fineymax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="57" column="1" bodyfile="Map.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1ae704ef75722551d40b2bc091e9562749" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::coarsexmax</definition>
        <argsstring></argsstring>
        <name>coarsexmax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="57" column="1" bodyfile="Map.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a9216f730fb7b4dfce6405101342f567d" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::coarseymax</definition>
        <argsstring></argsstring>
        <name>coarseymax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="57" column="1" bodyfile="Map.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a6bb818fa07b885e39aaeffaaf216a36a" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::finexoffset</definition>
        <argsstring></argsstring>
        <name>finexoffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="58" column="1" bodyfile="Map.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a6dca9f42981567905ac8a47198bd2cda" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::fineyoffset</definition>
        <argsstring></argsstring>
        <name>fineyoffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="58" column="1" bodyfile="Map.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a25dbfc9d32dc1a63fab69aafe19b9cbf" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::coarsexoffset</definition>
        <argsstring></argsstring>
        <name>coarsexoffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="58" column="1" bodyfile="Map.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1abdc8c317e75ed6a7dc645b7ece0c7218" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::coarseyoffset</definition>
        <argsstring></argsstring>
        <name>coarseyoffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="58" column="1" bodyfile="Map.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1ab02a8112322ed5d3ca32212708542118" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Map::scale</definition>
        <argsstring></argsstring>
        <name>scale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="59" column="1" bodyfile="Map.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a380e8afdd2cd4062303a69ec1d9aa36e" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::xdim</definition>
        <argsstring></argsstring>
        <name>xdim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="60" column="1" bodyfile="Map.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a58747b507e46cdf16b12b174c5e8f548" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long Map::ydim</definition>
        <argsstring></argsstring>
        <name>ydim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="61" column="1" bodyfile="Map.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a6e4e471035966189b5085bb6b82c2227" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Map::deme</definition>
        <argsstring></argsstring>
        <name>deme</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="62" column="1" bodyfile="Map.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1ac78fbb51922d6eca0e9b9c4c217ad56c" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Map::checksetdim</definition>
        <argsstring></argsstring>
        <name>checksetdim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="63" column="1" bodyfile="Map.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1aeb8e8114c1bfa253379098978b50f603" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Map::dispersal_relative_cost</definition>
        <argsstring></argsstring>
        <name>dispersal_relative_cost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="64" column="1" bodyfile="Map.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a7a06ca1a975e17055e41e31c33fc94e8" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Map::dUpdateTime</definition>
        <argsstring></argsstring>
        <name>dUpdateTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="66" column="1" bodyfile="Map.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a254ad38e48e101cda7b6db9c05e500be" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Map::dForestTransform</definition>
        <argsstring></argsstring>
        <name>dForestTransform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="67" column="1" bodyfile="Map.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1ad1922124162d60a7711bbfec5675d7b6" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Map::dPristine</definition>
        <argsstring></argsstring>
        <name>dPristine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="68" column="1" bodyfile="Map.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1aa059ee6240b877c73449079e143cc315" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Map::dCurrent</definition>
        <argsstring></argsstring>
        <name>dCurrent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="69" column="1" bodyfile="Map.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a2220e5d773e2ebc2ff4a6fa4155b3704" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Map::bPristine</definition>
        <argsstring></argsstring>
        <name>bPristine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="70" column="1" bodyfile="Map.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1aa5522cbe869fecb05f3289d497abb3f2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Map::hasPristine</definition>
        <argsstring></argsstring>
        <name>hasPristine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="71" column="1" bodyfile="Map.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a8579e315f59b50a729ac229610c3b719" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Map::iForestMax</definition>
        <argsstring></argsstring>
        <name>iForestMax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="72" column="1" bodyfile="Map.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1aaf1aa491a06c809e7ad7e03cdf1cc616" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Map::iFineForestMax</definition>
        <argsstring></argsstring>
        <name>iFineForestMax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="73" column="1" bodyfile="Map.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1aaff790d9eda0a99e0e7217af587bbae7" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Map::iCoarseForestMax</definition>
        <argsstring></argsstring>
        <name>iCoarseForestMax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="74" column="1" bodyfile="Map.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1add2abacf840d9daa1d3f5cc62902a188" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Map::iPristineFineForestMax</definition>
        <argsstring></argsstring>
        <name>iPristineFineForestMax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="75" column="1" bodyfile="Map.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a65de79734ab3072d1ebab055e4eae685" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long Map::iPristineCoarseForestMax</definition>
        <argsstring></argsstring>
        <name>iPristineCoarseForestMax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="76" column="1" bodyfile="Map.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a81e886ea2c2168c3d8b33a3e9502901a" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Map::landscape_type</definition>
        <argsstring></argsstring>
        <name>landscape_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="77" column="1" bodyfile="Map.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1a8346e76eb734528fc6cffc2170517c3d" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Map::NextMap</definition>
        <argsstring></argsstring>
        <name>NextMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="78" column="1" bodyfile="Map.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1aa2478803a3e80e91042d054de88e9ee1" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Map::bCoarse</definition>
        <argsstring></argsstring>
        <name>bCoarse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="79" column="1" bodyfile="Map.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1ae91de9d71b1aa841d73adcacaf1777d8" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Map::nUpdate</definition>
        <argsstring></argsstring>
        <name>nUpdate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="80" column="1" bodyfile="Map.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_map_1af2ed0369327fb4dbe0e7f7fc5088920d" prot="protected" static="no" mutable="no">
        <type>fptr</type>
        <definition>fptr Map::getValFunc</definition>
        <argsstring></argsstring>
        <name>getValFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="85" column="1" bodyfile="Map.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_map_1a0f5ad0fd4563497b4214038cbca8b582" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Map::Map</definition>
        <argsstring>()</argsstring>
        <name>Map</name>
        <briefdescription>
<para>The default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="90" column="1" bodyfile="Map.h" bodystart="90" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ad426134803fb70813613e5bd34908811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Map::printForestMax</definition>
        <argsstring>()</argsstring>
        <name>printForestMax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="110" column="1" bodyfile="Map.h" bodystart="110" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a2267868566b8c925a5d7f2200e8f6491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::getForestMax</definition>
        <argsstring>()</argsstring>
        <name>getForestMax</name>
        <briefdescription>
<para>Gets the maximum forest value from any map. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iForestMax the maximum forest value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="122" column="1" bodyfile="Map.cpp" bodystart="969" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a4265717341e63a4662bf7ada49cc0c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::setDims</definition>
        <argsstring>(SimParameters mapvarsin)</argsstring>
        <name>setDims</name>
        <param>
          <type><ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref></type>
          <declname>mapvarsin</declname>
        </param>
        <briefdescription>
<para>Sets the dimensions of the grid, the area where the species are initially sampled from. This function must be run before any of the calc map functions to allow for the correct deme allocation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mapvarsin</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref> object containing the map variables to import </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="130" column="1" bodyfile="Map.cpp" bodystart="14" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ab74d57e0de40b6e16c7bb62489ecff5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Map::checkMapExists</definition>
        <argsstring>()</argsstring>
        <name>checkMapExists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="132" column="1" bodyfile="Map.cpp" bodystart="42" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ab3c9e77675ad9ca1d34e9ff8e861901d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::calcFineMap</definition>
        <argsstring>()</argsstring>
        <name>calcFineMap</name>
        <briefdescription>
<para>Imports the fine map object from file and calculates the correct values at each point. Without a map to input, the fine map will simply be a matrix of 1s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="142" column="1" bodyfile="Map.cpp" bodystart="55" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ab1d1bac59d3e1518deaa2ebc561a7f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::calcPristineFineMap</definition>
        <argsstring>()</argsstring>
        <name>calcPristineFineMap</name>
        <briefdescription>
<para>Imports the pristine fine map object from file and calculates the correct values at each point. Without a map to input, the pristine fine map will simply be a matrix of 1s. This has the potential to be changed easily in future versions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="149" column="1" bodyfile="Map.cpp" bodystart="110" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ac0b46ec7e4792d6ad3d7bdcf358ecabf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::calcCoarseMap</definition>
        <argsstring>()</argsstring>
        <name>calcCoarseMap</name>
        <briefdescription>
<para>Imports the coarse map object from file and calculates the correct values at each point. Without a map to input, the coarse map will simply be a matrix of 1s. This has the potential to be changed easily in future versions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="156" column="1" bodyfile="Map.cpp" bodystart="169" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a4efc51f5d4e2bb562cf4126a7f291f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::calcPristineCoarseMap</definition>
        <argsstring>()</argsstring>
        <name>calcPristineCoarseMap</name>
        <briefdescription>
<para>Imports the pristine coarse map object from file and calculates the correct values at each point. Without a map to input, the pristine coarse map will simply be a matrix of 1s. This has the potential to be changed easily in future versions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="163" column="1" bodyfile="Map.cpp" bodystart="228" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1aa91176218ae59941096b4a080b2e45ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::setTimeVars</definition>
        <argsstring>(double dPristinein, double dForestTransformin)</argsstring>
        <name>setTimeVars</name>
        <param>
          <type>double</type>
          <declname>dPristinein</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dForestTransformin</declname>
        </param>
        <briefdescription>
<para>Sets the time variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dPristinein</parametername>
</parameternamelist>
<parameterdescription>
<para>the time (in generations) since a pristine habitat state was achieved. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dForestTransformin</parametername>
</parameternamelist>
<parameterdescription>
<para>the rate of transform of the forest up until the pristine time. A value of 0.2 would mean 20% of the change occurs linearlly up until the pristine time and the remaining 80% occurs in a jump to the pristine state. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="171" column="1" bodyfile="Map.cpp" bodystart="289" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a7615f4c20da51b3a96d60f9fa89ec73e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::calcOffset</definition>
        <argsstring>()</argsstring>
        <name>calcOffset</name>
        <briefdescription>
<para>Calculates the offset and extremeties of the fine map. </para>        </briefdescription>
        <detaileddescription>
<para>Note that setting dispersal_relative_cost to a value other than 1 can massively increase simulation time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="180" column="1" bodyfile="Map.cpp" bodystart="296" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a123d710095a549030f2c801ccf9645f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::validateMaps</definition>
        <argsstring>()</argsstring>
        <name>validateMaps</name>
        <briefdescription>
<para>Checks that the map file sizes are correct and that each value on the fragmented maps is less than the pristine maps. This should be disabled in simulations where habitat sizes are expected to shrink as well as grow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="189" column="1" bodyfile="Map.cpp" bodystart="364" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a0c71277515f9f2fc5e2ae586ae9d07f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::updateMap</definition>
        <argsstring>(double generation)</argsstring>
        <name>updateMap</name>
        <param>
          <type>double</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Updates the maps to the newer map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="198" column="1" bodyfile="Map.cpp" bodystart="438" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a7c4ca1306850126bf6c040f1c0cc0754" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Map::isPristine</definition>
        <argsstring>()</argsstring>
        <name>isPristine</name>
        <briefdescription>
<para>Gets the pristine boolean. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pristine map state. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="204" column="1" bodyfile="Map.h" bodystart="204" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1aff6628e343532689d5bdcee2433ac041" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map::setPristine</definition>
        <argsstring>(const bool &amp;bPristinein)</argsstring>
        <name>setPristine</name>
        <param>
          <type>const bool &amp;</type>
          <declname>bPristinein</declname>
        </param>
        <briefdescription>
<para>Sets the pristine state of the system. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bPristinein</parametername>
</parameternamelist>
<parameterdescription>
<para>the pristine state. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="217" column="1" bodyfile="Map.h" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a56f158adbe67d3eea95e2537493851f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Map::getPristine</definition>
        <argsstring>()</argsstring>
        <name>getPristine</name>
        <briefdescription>
<para>Get the pristine map time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double the pristine map time </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="226" column="1" bodyfile="Map.h" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a89f96e39e9111c0c6a05a1ee59e7a5d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Map::getLandscapeType</definition>
        <argsstring>()</argsstring>
        <name>getLandscapeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="231" column="1" bodyfile="Map.h" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1af7067d6d076eb10b735dc08750dbf924" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Map::checkPristine</definition>
        <argsstring>(double generation)</argsstring>
        <name>checkPristine</name>
        <param>
          <type>double</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Checks if the pristine state has been reached. </para>        </briefdescription>
        <detaileddescription>
<para>If there are no pristine maps, this function will do nothing. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to check at. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="242" column="1" bodyfile="Map.h" bodystart="242" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1acaff6d6881f7547b824cb1a9086f8094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::setLandscape</definition>
        <argsstring>(string is_infinite)</argsstring>
        <name>setLandscape</name>
        <param>
          <type>string</type>
          <declname>is_infinite</declname>
        </param>
        <briefdescription>
<para>Sets the landscape functions to either infinite or finite. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_infinite</parametername>
</parameternamelist>
<parameterdescription>
<para>a string of either closed, infinite, tiled_fine or tiled_coarse, corresponding to the relevant landscape type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="269" column="1" bodyfile="Map.cpp" bodystart="476" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a69bc2233f8b2495cb7f37a8dc123ef68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::getVal</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</argsstring>
        <name>getVal</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dCurrentGen</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version involves a call to the function pointer, *getValFunc, so that the correct call to either <ref refid="class_map_1a67718998cacf879b7b4ea05a4c758f39" kindref="member">getValFinite()</ref> or getValInfinite is made. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dCurrentGen</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="284" column="1" bodyfile="Map.cpp" bodystart="503" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a5907934cd80f7c2703ab1535fab5d606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::getValCoarse</definition>
        <argsstring>(const double &amp;xval, const double &amp;yval, const double &amp;dCurrentGen)</argsstring>
        <name>getValCoarse</name>
        <param>
          <type>const double &amp;</type>
          <declname>xval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dCurrentGen</declname>
        </param>
        <briefdescription>
<para>Gets the value from the coarse maps, including linear interpolating between the pristine and present maps. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xval</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yval</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dCurrentGen</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation timer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the map at the given coordinates and time </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="293" column="1" bodyfile="Map.cpp" bodystart="567" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a20854e36fbd48ebc0b6a98a9e2e7874c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::getValFine</definition>
        <argsstring>(const double &amp;xval, const double &amp;yval, const double &amp;dCurrentGen)</argsstring>
        <name>getValFine</name>
        <param>
          <type>const double &amp;</type>
          <declname>xval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yval</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dCurrentGen</declname>
        </param>
        <briefdescription>
<para>Gets the value from the fine maps, including linear interpolating between the pristine and present maps. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xval</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yval</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dCurrentGen</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation timer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the map at the given coordinates and time </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="302" column="1" bodyfile="Map.cpp" bodystart="605" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a67718998cacf879b7b4ea05a4c758f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::getValFinite</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</argsstring>
        <name>getValFinite</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dCurrentGen</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes finite landscape. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dCurrentGen</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="315" column="1" bodyfile="Map.cpp" bodystart="641" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a9c6f27e30da1fc9e5b47a0709dfdf124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::getValInfinite</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</argsstring>
        <name>getValInfinite</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dCurrentGen</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dCurrentGen</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="329" column="1" bodyfile="Map.cpp" bodystart="509" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a4d809944207db362f71257f6cc90e16c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::getValCoarseTiled</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</argsstring>
        <name>getValCoarseTiled</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dCurrentGen</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape of tiled coarse maps. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dCurrentGen</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="343" column="1" bodyfile="Map.cpp" bodystart="523" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a5cec27123cd76e08fab2bcb612fc5224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::getValFineTiled</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double &amp;dCurrentGen)</argsstring>
        <name>getValFineTiled</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dCurrentGen</declname>
        </param>
        <briefdescription>
<para>Gets the value at a particular coordinate from the correct map. Takes in to account temporal and spatial referencing. This version assumes an infinite landscape of tiled fine maps. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension.. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dCurrentGen</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value on the correct map at the correct space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="358" column="1" bodyfile="Map.cpp" bodystart="539" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a12d17532ea880afc77b729f1005b6e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::convertSampleXToFineX</definition>
        <argsstring>(const unsigned long &amp;x, const long &amp;xwrap)</argsstring>
        <name>convertSampleXToFineX</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <briefdescription>
<para>Gets the x position on the fine map, given an x and x wrapping. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this function will not check if the value is actually within bounds of the fine map, and an error will likely be thrown by the matrix referencing if this is the case. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate on the sample mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the x wrapping of the sample mask. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the x location on the fine map </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="370" column="1" bodyfile="Map.cpp" bodystart="672" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a69ba72442bd3cbf7ee892ea0d2b6e4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::convertSampleYToFineY</definition>
        <argsstring>(const unsigned long &amp;y, const long &amp;ywrap)</argsstring>
        <name>convertSampleYToFineY</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Gets the y position on the fine map, given a y and y wrapping. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this function will not check if the value is actually within bounds of the fine map, and an error will likely be thrown by the matrix referencing if this is the case. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate on the sample mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the y wrapping of the sample mask. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the y location on the fine map </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="381" column="1" bodyfile="Map.cpp" bodystart="677" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1abd472c52b8aa58027621187de4a65683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::convertFineToSample</definition>
        <argsstring>(long &amp;x, long &amp;xwrap, long &amp;y, long &amp;ywrap)</argsstring>
        <name>convertFineToSample</name>
        <param>
          <type>long &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Converts the fine map coordinates to the sample grid coordinates. Main conversion is in a call to convertCoordinates, but also makes sure the returned types are long integers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the x wrapping to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the y wrapping to modify </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="391" column="1" bodyfile="Map.cpp" bodystart="682" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ad5a611be56ff6dc834dac93e91644f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::getInitialCount</definition>
        <argsstring>(double dSample, Datamask &amp;samplemask)</argsstring>
        <name>getInitialCount</name>
        <param>
          <type>double</type>
          <declname>dSample</declname>
        </param>
        <param>
          <type><ref refid="class_datamask" kindref="compound">Datamask</ref> &amp;</type>
          <declname>samplemask</declname>
        </param>
        <briefdescription>
<para>Counts the number of spaces available in the initial species space. Requires the samplemask to check the sampling area. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dSample</parametername>
</parameternamelist>
<parameterdescription>
<para>the sample proportion (from 0 to 1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samplemask</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_datamask" kindref="compound">Datamask</ref> object to sample from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the total number of individuals predicted to initially exist on the map. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="400" column="1" bodyfile="Map.cpp" bodystart="692" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ac560f241eb5a392d2599e11b00328964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_sim_parameters" kindref="compound">SimParameters</ref></type>
        <definition>SimParameters Map::getSimParameters</definition>
        <argsstring>()</argsstring>
        <name>getSimParameters</name>
        <briefdescription>
<para>Gets the mapvars object for referencing simulation parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="406" column="1" bodyfile="Map.cpp" bodystart="731" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ac5e842ad3f8d76f2293a6b1be44071ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Map::checkMap</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap, const double generation)</argsstring>
        <name>checkMap</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>Checks whether the point is forest or non-forest. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position on the grid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the current generation time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean of whether the map is forest or non-forest. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="420" column="1" bodyfile="Map.cpp" bodystart="736" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1aae9663c2b5bb78e89e2c476d1d1a409b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Map::checkFine</definition>
        <argsstring>(const double &amp;x, const double &amp;y, const long &amp;xwrap, const long &amp;ywrap)</argsstring>
        <name>checkFine</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Checks whether the point comes from the fine grid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean of whether the location is on the fine map. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="431" column="1" bodyfile="Map.cpp" bodystart="742" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1af0f4a6a41c91e915614b56b2422d6d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::convertCoordinates</definition>
        <argsstring>(double &amp;x, double &amp;y, long &amp;xwrap, long &amp;ywrap)</argsstring>
        <name>convertCoordinates</name>
        <param>
          <type>double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>xwrap</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>ywrap</declname>
        </param>
        <briefdescription>
<para>Converts the coordinates to within the original grid, altering the xwrap and ywrap consequently. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the x dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of wraps in the y dimension. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="441" column="1" bodyfile="Map.cpp" bodystart="750" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a7c5b0623134a33511d7c17626c967176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Map::runDispersal</definition>
        <argsstring>(const double &amp;dist, const double &amp;angle, long &amp;startx, long &amp;starty, long &amp;startxwrap, long &amp;startywrap, bool &amp;disp_comp, const double &amp;generation)</argsstring>
        <name>runDispersal</name>
        <param>
          <type>const double &amp;</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>startx</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>starty</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>startxwrap</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>startywrap</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>disp_comp</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>generation</declname>
        </param>
        <briefdescription>
<para>The function that actually performs the dispersal. It is included here for easier programming and efficiency as the function doesn&apos;t need to perform all the checks until the edge of the fine grid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance travelled (or &quot;distance energy&quot; if dispersal_relative_cost is not 1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle of movement. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startx</parametername>
</parameternamelist>
<parameterdescription>
<para>the start x position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>starty</parametername>
</parameternamelist>
<parameterdescription>
<para>the start y position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startxwrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the start number of wraps in the x dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startywrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the start number of wraps in the y dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>disp_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean of whether the dispersal was complete or not. This value is returned true if dispersal is to habitat, false otherwise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generation</parametername>
</parameternamelist>
<parameterdescription>
<para>the time in generations since the start of the simulation. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the density value at the end dispersal point </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="459" column="1" bodyfile="Map.cpp" bodystart="758" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1af25b0713e794dfa189f0445ffcd511b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string Map::printVars</definition>
        <argsstring>()</argsstring>
        <name>printVars</name>
        <briefdescription>
<para>Prints some selected <ref refid="class_map" kindref="compound">Map</ref> variables to the terminal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string containing the map variables to print </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="524" column="1" bodyfile="Map.cpp" bodystart="957" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1a7ded655c7db0e9d72816430b4f2c83a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::clearMap</definition>
        <argsstring>()</argsstring>
        <name>clearMap</name>
        <briefdescription>
<para>Wipes the map of all variables. Only really useful for testing purposes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="529" column="1" bodyfile="Map.cpp" bodystart="950" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="class_map_1ae29adceaa1b65850566286d61c73133b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Map::recalculateForestMax</definition>
        <argsstring>()</argsstring>
        <name>recalculateForestMax</name>
        <briefdescription>
<para>Recalculates the forest map maximum by checking the maximums for each of the relevant map files (fine, coarse and pristines). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="534" column="1" bodyfile="Map.cpp" bodystart="983" bodyend="1017"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_map_1a0da37af2cd547fa045e06a2da3c1039f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Map &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_map" kindref="compound">Map</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Operator for outputting the <ref refid="class_map" kindref="compound">Map</ref> object variables to an output stream. This is used for storing the <ref refid="class_map" kindref="compound">Map</ref> object to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_map" kindref="compound">Map</ref> object to output. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="470" column="1" bodyfile="Map.h" bodystart="470" bodyend="484"/>
      </memberdef>
      <memberdef kind="friend" id="class_map_1a480da4c3f474c0af7eacdde650546dc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Map &amp;r)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="class_map" kindref="compound">Map</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Operator for inputting the <ref refid="class_map" kindref="compound">Map</ref> object variables from an input stream. This is used for reading the <ref refid="class_map" kindref="compound">Map</ref> object from file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_map" kindref="compound">Map</ref> object to input to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Map.h" line="493" column="1" bodyfile="Map.h" bodystart="493" bodyend="518"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains all maps and provides the functions for accessing a grid cell in the correct temporal and spacial location. The function <ref refid="class_map_1a7c5b0623134a33511d7c17626c967176" kindref="member">runDispersal()</ref> also provides the move routine, provided two alternative methods for moving individuals. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="201">
        <label>Map</label>
        <link refid="class_map"/>
        <childnode refid="202" relation="usage">
          <edgelabel>NextMap</edgelabel>
          <edgelabel>landscape_type</edgelabel>
        </childnode>
        <childnode refid="203" relation="usage">
          <edgelabel>fine_map</edgelabel>
          <edgelabel>coarse_map</edgelabel>
          <edgelabel>pristine_fine_map</edgelabel>
          <edgelabel>pristine_coarse_map</edgelabel>
        </childnode>
        <childnode refid="205" relation="usage">
          <edgelabel>mapvars</edgelabel>
        </childnode>
      </node>
      <node id="202">
        <label>string</label>
      </node>
      <node id="206">
        <label>ConfigOption</label>
        <link refid="class_config_option"/>
      </node>
      <node id="205">
        <label>SimParameters</label>
        <link refid="struct_sim_parameters"/>
        <childnode refid="206" relation="usage">
          <edgelabel>configs</edgelabel>
        </childnode>
        <childnode refid="202" relation="usage">
          <edgelabel>reproduction_file</edgelabel>
          <edgelabel>dispersal_method</edgelabel>
          <edgelabel>outdirectory</edgelabel>
          <edgelabel>dispersal_file</edgelabel>
          <edgelabel>coarsemapfile</edgelabel>
          <edgelabel>finemapfile</edgelabel>
          <edgelabel>samplemaskfile</edgelabel>
          <edgelabel>autocorrel_file</edgelabel>
          <edgelabel>pristinefinemapfile</edgelabel>
          <edgelabel>pristinecoarsemapfile</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="203">
        <label>Matrix&lt; uint32_t &gt;</label>
        <link refid="class_matrix"/>
        <childnode refid="204" relation="usage">
          <edgelabel>matrix</edgelabel>
        </childnode>
      </node>
      <node id="204">
        <label>Row&lt; uint32_t &gt;</label>
        <link refid="class_row"/>
      </node>
    </collaborationgraph>
    <location file="Map.h" line="45" column="1" bodyfile="Map.h" bodystart="44" bodyend="536"/>
    <listofallmembers>
      <member refid="class_map_1aa2478803a3e80e91042d054de88e9ee1" prot="protected" virt="non-virtual"><scope>Map</scope><name>bCoarse</name></member>
      <member refid="class_map_1a2220e5d773e2ebc2ff4a6fa4155b3704" prot="protected" virt="non-virtual"><scope>Map</scope><name>bPristine</name></member>
      <member refid="class_map_1ac0b46ec7e4792d6ad3d7bdcf358ecabf" prot="public" virt="non-virtual"><scope>Map</scope><name>calcCoarseMap</name></member>
      <member refid="class_map_1ab3c9e77675ad9ca1d34e9ff8e861901d" prot="public" virt="non-virtual"><scope>Map</scope><name>calcFineMap</name></member>
      <member refid="class_map_1a7615f4c20da51b3a96d60f9fa89ec73e" prot="public" virt="non-virtual"><scope>Map</scope><name>calcOffset</name></member>
      <member refid="class_map_1a4efc51f5d4e2bb562cf4126a7f291f33" prot="public" virt="non-virtual"><scope>Map</scope><name>calcPristineCoarseMap</name></member>
      <member refid="class_map_1ab1d1bac59d3e1518deaa2ebc561a7f82" prot="public" virt="non-virtual"><scope>Map</scope><name>calcPristineFineMap</name></member>
      <member refid="class_map_1aae9663c2b5bb78e89e2c476d1d1a409b" prot="public" virt="non-virtual"><scope>Map</scope><name>checkFine</name></member>
      <member refid="class_map_1ac5e842ad3f8d76f2293a6b1be44071ca" prot="public" virt="non-virtual"><scope>Map</scope><name>checkMap</name></member>
      <member refid="class_map_1ab74d57e0de40b6e16c7bb62489ecff5c" prot="public" virt="non-virtual"><scope>Map</scope><name>checkMapExists</name></member>
      <member refid="class_map_1af7067d6d076eb10b735dc08750dbf924" prot="public" virt="non-virtual"><scope>Map</scope><name>checkPristine</name></member>
      <member refid="class_map_1ac78fbb51922d6eca0e9b9c4c217ad56c" prot="protected" virt="non-virtual"><scope>Map</scope><name>checksetdim</name></member>
      <member refid="class_map_1a7ded655c7db0e9d72816430b4f2c83a5" prot="public" virt="non-virtual"><scope>Map</scope><name>clearMap</name></member>
      <member refid="class_map_1a67045641f66beb1d3689726cb23fbc29" prot="protected" virt="non-virtual"><scope>Map</scope><name>coarse_map</name></member>
      <member refid="class_map_1ae704ef75722551d40b2bc091e9562749" prot="protected" virt="non-virtual"><scope>Map</scope><name>coarsexmax</name></member>
      <member refid="class_map_1a52e2a83e9f8cedcd1bb41bd41f7f54fb" prot="protected" virt="non-virtual"><scope>Map</scope><name>coarsexmin</name></member>
      <member refid="class_map_1a25dbfc9d32dc1a63fab69aafe19b9cbf" prot="protected" virt="non-virtual"><scope>Map</scope><name>coarsexoffset</name></member>
      <member refid="class_map_1a9216f730fb7b4dfce6405101342f567d" prot="protected" virt="non-virtual"><scope>Map</scope><name>coarseymax</name></member>
      <member refid="class_map_1a02ab899e67c2b145294fe1f527fa3024" prot="protected" virt="non-virtual"><scope>Map</scope><name>coarseymin</name></member>
      <member refid="class_map_1abdc8c317e75ed6a7dc645b7ece0c7218" prot="protected" virt="non-virtual"><scope>Map</scope><name>coarseyoffset</name></member>
      <member refid="class_map_1af0f4a6a41c91e915614b56b2422d6d5a" prot="public" virt="non-virtual"><scope>Map</scope><name>convertCoordinates</name></member>
      <member refid="class_map_1abd472c52b8aa58027621187de4a65683" prot="public" virt="non-virtual"><scope>Map</scope><name>convertFineToSample</name></member>
      <member refid="class_map_1a12d17532ea880afc77b729f1005b6e4f" prot="public" virt="non-virtual"><scope>Map</scope><name>convertSampleXToFineX</name></member>
      <member refid="class_map_1a69ba72442bd3cbf7ee892ea0d2b6e4a1" prot="public" virt="non-virtual"><scope>Map</scope><name>convertSampleYToFineY</name></member>
      <member refid="class_map_1aa059ee6240b877c73449079e143cc315" prot="protected" virt="non-virtual"><scope>Map</scope><name>dCurrent</name></member>
      <member refid="class_map_1a6e4e471035966189b5085bb6b82c2227" prot="protected" virt="non-virtual"><scope>Map</scope><name>deme</name></member>
      <member refid="class_map_1a254ad38e48e101cda7b6db9c05e500be" prot="protected" virt="non-virtual"><scope>Map</scope><name>dForestTransform</name></member>
      <member refid="class_map_1aeb8e8114c1bfa253379098978b50f603" prot="protected" virt="non-virtual"><scope>Map</scope><name>dispersal_relative_cost</name></member>
      <member refid="class_map_1ad1922124162d60a7711bbfec5675d7b6" prot="protected" virt="non-virtual"><scope>Map</scope><name>dPristine</name></member>
      <member refid="class_map_1a7a06ca1a975e17055e41e31c33fc94e8" prot="protected" virt="non-virtual"><scope>Map</scope><name>dUpdateTime</name></member>
      <member refid="class_map_1a4579c0a75f27777739b8f13ec620fa21" prot="protected" virt="non-virtual"><scope>Map</scope><name>fine_map</name></member>
      <member refid="class_map_1a94bb813e300ee493f057afb154a35f88" prot="protected" virt="non-virtual"><scope>Map</scope><name>finexmax</name></member>
      <member refid="class_map_1a1f1b99453482eac3e459e4346eeb3c7e" prot="protected" virt="non-virtual"><scope>Map</scope><name>finexmin</name></member>
      <member refid="class_map_1a6bb818fa07b885e39aaeffaaf216a36a" prot="protected" virt="non-virtual"><scope>Map</scope><name>finexoffset</name></member>
      <member refid="class_map_1ac130e3a3380ab6e3b292f6612324a506" prot="protected" virt="non-virtual"><scope>Map</scope><name>fineymax</name></member>
      <member refid="class_map_1aa654a9603699c76654c528f8462cf246" prot="protected" virt="non-virtual"><scope>Map</scope><name>fineymin</name></member>
      <member refid="class_map_1a6dca9f42981567905ac8a47198bd2cda" prot="protected" virt="non-virtual"><scope>Map</scope><name>fineyoffset</name></member>
      <member refid="class_map_1a0080b09c39d18cad51d83d5ec2bc2ce7" prot="protected" virt="non-virtual"><scope>Map</scope><name>fptr</name></member>
      <member refid="class_map_1a2267868566b8c925a5d7f2200e8f6491" prot="public" virt="non-virtual"><scope>Map</scope><name>getForestMax</name></member>
      <member refid="class_map_1ad5a611be56ff6dc834dac93e91644f8e" prot="public" virt="non-virtual"><scope>Map</scope><name>getInitialCount</name></member>
      <member refid="class_map_1a89f96e39e9111c0c6a05a1ee59e7a5d5" prot="public" virt="non-virtual"><scope>Map</scope><name>getLandscapeType</name></member>
      <member refid="class_map_1a56f158adbe67d3eea95e2537493851f1" prot="public" virt="non-virtual"><scope>Map</scope><name>getPristine</name></member>
      <member refid="class_map_1ac560f241eb5a392d2599e11b00328964" prot="public" virt="non-virtual"><scope>Map</scope><name>getSimParameters</name></member>
      <member refid="class_map_1a69bc2233f8b2495cb7f37a8dc123ef68" prot="public" virt="non-virtual"><scope>Map</scope><name>getVal</name></member>
      <member refid="class_map_1a5907934cd80f7c2703ab1535fab5d606" prot="public" virt="non-virtual"><scope>Map</scope><name>getValCoarse</name></member>
      <member refid="class_map_1a4d809944207db362f71257f6cc90e16c" prot="public" virt="non-virtual"><scope>Map</scope><name>getValCoarseTiled</name></member>
      <member refid="class_map_1a20854e36fbd48ebc0b6a98a9e2e7874c" prot="public" virt="non-virtual"><scope>Map</scope><name>getValFine</name></member>
      <member refid="class_map_1a5cec27123cd76e08fab2bcb612fc5224" prot="public" virt="non-virtual"><scope>Map</scope><name>getValFineTiled</name></member>
      <member refid="class_map_1a67718998cacf879b7b4ea05a4c758f39" prot="public" virt="non-virtual"><scope>Map</scope><name>getValFinite</name></member>
      <member refid="class_map_1af2ed0369327fb4dbe0e7f7fc5088920d" prot="protected" virt="non-virtual"><scope>Map</scope><name>getValFunc</name></member>
      <member refid="class_map_1a9c6f27e30da1fc9e5b47a0709dfdf124" prot="public" virt="non-virtual"><scope>Map</scope><name>getValInfinite</name></member>
      <member refid="class_map_1aa5522cbe869fecb05f3289d497abb3f2" prot="protected" virt="non-virtual"><scope>Map</scope><name>hasPristine</name></member>
      <member refid="class_map_1aaff790d9eda0a99e0e7217af587bbae7" prot="protected" virt="non-virtual"><scope>Map</scope><name>iCoarseForestMax</name></member>
      <member refid="class_map_1aaf1aa491a06c809e7ad7e03cdf1cc616" prot="protected" virt="non-virtual"><scope>Map</scope><name>iFineForestMax</name></member>
      <member refid="class_map_1a8579e315f59b50a729ac229610c3b719" prot="protected" virt="non-virtual"><scope>Map</scope><name>iForestMax</name></member>
      <member refid="class_map_1a65de79734ab3072d1ebab055e4eae685" prot="protected" virt="non-virtual"><scope>Map</scope><name>iPristineCoarseForestMax</name></member>
      <member refid="class_map_1add2abacf840d9daa1d3f5cc62902a188" prot="protected" virt="non-virtual"><scope>Map</scope><name>iPristineFineForestMax</name></member>
      <member refid="class_map_1a7c4ca1306850126bf6c040f1c0cc0754" prot="public" virt="non-virtual"><scope>Map</scope><name>isPristine</name></member>
      <member refid="class_map_1a81e886ea2c2168c3d8b33a3e9502901a" prot="protected" virt="non-virtual"><scope>Map</scope><name>landscape_type</name></member>
      <member refid="class_map_1a0f5ad0fd4563497b4214038cbca8b582" prot="public" virt="non-virtual"><scope>Map</scope><name>Map</name></member>
      <member refid="class_map_1afc7243e4b89be2a6e7340e8fa84c6679" prot="protected" virt="non-virtual"><scope>Map</scope><name>mapvars</name></member>
      <member refid="class_map_1a8346e76eb734528fc6cffc2170517c3d" prot="protected" virt="non-virtual"><scope>Map</scope><name>NextMap</name></member>
      <member refid="class_map_1ae91de9d71b1aa841d73adcacaf1777d8" prot="protected" virt="non-virtual"><scope>Map</scope><name>nUpdate</name></member>
      <member refid="class_map_1a0da37af2cd547fa045e06a2da3c1039f" prot="public" virt="non-virtual"><scope>Map</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_map_1a480da4c3f474c0af7eacdde650546dc1" prot="public" virt="non-virtual"><scope>Map</scope><name>operator&gt;&gt;</name></member>
      <member refid="class_map_1ad426134803fb70813613e5bd34908811" prot="public" virt="non-virtual"><scope>Map</scope><name>printForestMax</name></member>
      <member refid="class_map_1af25b0713e794dfa189f0445ffcd511b8" prot="public" virt="non-virtual"><scope>Map</scope><name>printVars</name></member>
      <member refid="class_map_1a6d2258eb1652f5d411d88a02efaf4862" prot="protected" virt="non-virtual"><scope>Map</scope><name>pristine_coarse_map</name></member>
      <member refid="class_map_1a807b35e2a3822cb98f92cf545cb85cf6" prot="protected" virt="non-virtual"><scope>Map</scope><name>pristine_fine_map</name></member>
      <member refid="class_map_1ae29adceaa1b65850566286d61c73133b" prot="public" virt="non-virtual"><scope>Map</scope><name>recalculateForestMax</name></member>
      <member refid="class_map_1a7c5b0623134a33511d7c17626c967176" prot="public" virt="non-virtual"><scope>Map</scope><name>runDispersal</name></member>
      <member refid="class_map_1ab02a8112322ed5d3ca32212708542118" prot="protected" virt="non-virtual"><scope>Map</scope><name>scale</name></member>
      <member refid="class_map_1a4265717341e63a4662bf7ada49cc0c3d" prot="public" virt="non-virtual"><scope>Map</scope><name>setDims</name></member>
      <member refid="class_map_1acaff6d6881f7547b824cb1a9086f8094" prot="public" virt="non-virtual"><scope>Map</scope><name>setLandscape</name></member>
      <member refid="class_map_1aff6628e343532689d5bdcee2433ac041" prot="public" virt="non-virtual"><scope>Map</scope><name>setPristine</name></member>
      <member refid="class_map_1aa91176218ae59941096b4a080b2e45ee" prot="public" virt="non-virtual"><scope>Map</scope><name>setTimeVars</name></member>
      <member refid="class_map_1a0c71277515f9f2fc5e2ae586ae9d07f8" prot="public" virt="non-virtual"><scope>Map</scope><name>updateMap</name></member>
      <member refid="class_map_1a123d710095a549030f2c801ccf9645f1" prot="public" virt="non-virtual"><scope>Map</scope><name>validateMaps</name></member>
      <member refid="class_map_1a380e8afdd2cd4062303a69ec1d9aa36e" prot="protected" virt="non-virtual"><scope>Map</scope><name>xdim</name></member>
      <member refid="class_map_1a58747b507e46cdf16b12b174c5e8f548" prot="protected" virt="non-virtual"><scope>Map</scope><name>ydim</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
